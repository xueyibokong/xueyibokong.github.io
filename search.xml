<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>前端基础知识点整理</title>
      <link href="/2018/05/25/FEPunktyWiedzy/"/>
      <url>/2018/05/25/FEPunktyWiedzy/</url>
      <content type="html"><![CDATA[<h1 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h1><h3 id="一、布局题"><a href="#一、布局题" class="headerlink" title="一、布局题"></a>一、布局题</h3><p><code>模态窗布局</code>要求：遮罩满屏、内容部分垂直水平居中且不定宽高，请写出标签及样式。进阶要求：内容容器内文案较少时（一行）居中对齐，较多时（多行换行）居左对齐。以上要求不得有js参与。</p><h4 id="dom"><a href="#dom" class="headerlink" title="dom"></a>dom</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;modal-box&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;div class=&quot;modal-box-body&quot;&gt;</span><br><span class="line">&lt;div class=&quot;center-body&quot;&gt;</span><br><span class="line">测试文案...</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">...</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="样式一："><a href="#样式一：" class="headerlink" title="样式一："></a>样式一：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//绝对定位 + transform</span><br><span class="line">.mask&#123;</span><br><span class="line">position:fixed;</span><br><span class="line">top:0;bottom:0;left:0;right:0;</span><br><span class="line">&#125;</span><br><span class="line">.modal-box&#123;</span><br><span class="line">position:absolute;</span><br><span class="line">top:50%;left:50%;</span><br><span class="line">transform:translate(-50%,-50%);</span><br><span class="line">&#125;</span><br><span class="line">解释：</span><br></pre></td></tr></table></figure><h4 id="样式二："><a href="#样式二：" class="headerlink" title="样式二："></a>样式二：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//操作行内块级元素</span><br><span class="line">html,body&#123;</span><br><span class="line">        width:100%;</span><br><span class="line">        height:100%;</span><br><span class="line">    &#125;</span><br><span class="line">    .mask&#123;</span><br><span class="line">        width:100%;</span><br><span class="line">        height:100%;</span><br><span class="line">       text-align: center        </span><br><span class="line">    &#125;</span><br><span class="line">    .mask:after&#123;</span><br><span class="line">        content:&quot;&quot;;</span><br><span class="line">        display:inline-block;</span><br><span class="line">        height:100%;</span><br><span class="line">        width:0;</span><br><span class="line">        vertical-align:middle;</span><br><span class="line">    &#125;</span><br><span class="line">    .modal-box&#123;</span><br><span class="line">        display:inline-block;</span><br><span class="line">        margin:0 auto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="样式三："><a href="#样式三：" class="headerlink" title="样式三："></a>样式三：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//flex布局（主要是实现垂直居中）</span><br><span class="line">.mask&#123;</span><br><span class="line">        position:fixed;</span><br><span class="line">        top:0;bottom:0;left:0;right:0;</span><br><span class="line">       display: flex;</span><br><span class="line">       align-items:center;</span><br><span class="line">       justify-content: center;</span><br><span class="line">    &#125;</span><br><span class="line">    .modal-box&#123;</span><br><span class="line">        flex: 1;</span><br><span class="line">       max-width: 80%;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="进阶要求答案"><a href="#进阶要求答案" class="headerlink" title="进阶要求答案"></a>进阶要求答案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.modal-box-body&#123;</span><br><span class="line">text-align:center;</span><br><span class="line">&#125;</span><br><span class="line">.center-body&#123;</span><br><span class="line">display:inline-block;</span><br><span class="line">text-align:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>自适应布局</code> 要求：左边固定宽，右边自适应。以上要求有js参与。</p><h4 id="dom-1"><a href="#dom-1" class="headerlink" title="dom"></a>dom</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">       &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">       &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">           ...</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="样式一"><a href="#样式一" class="headerlink" title="样式一"></a>样式一</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//定位 + padding-left</span><br><span class="line">.box&#123;</span><br><span class="line">       position: relative;</span><br><span class="line">       height: 35px;</span><br><span class="line">   &#125;</span><br><span class="line">   .box&gt;div&#123;</span><br><span class="line">       height: 100%;</span><br><span class="line">   &#125;</span><br><span class="line">   .left&#123;</span><br><span class="line">       position: absolute;</span><br><span class="line">       width: 120px;</span><br><span class="line">       background: red;</span><br><span class="line">   &#125;</span><br><span class="line">   .right&#123;</span><br><span class="line">       width: 100%;</span><br><span class="line">       padding-left: 120px;</span><br><span class="line">       background: greenyellow;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="样式二"><a href="#样式二" class="headerlink" title="样式二"></a>样式二</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//flex 布局，左边定宽，右边弹性填充</span><br><span class="line">.box&#123;</span><br><span class="line">       display: flex;</span><br><span class="line">       height: 35px;</span><br><span class="line">   &#125;</span><br><span class="line">   .box&gt;div&#123;</span><br><span class="line">       height: 100%;</span><br><span class="line">   &#125;</span><br><span class="line">   .left&#123;</span><br><span class="line">       width: 120px;</span><br><span class="line">       background: red;</span><br><span class="line">   &#125;</span><br><span class="line">   .right&#123;</span><br><span class="line">       flex: 1;</span><br><span class="line">       background: greenyellow;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="样式三"><a href="#样式三" class="headerlink" title="样式三"></a>样式三</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//table 布局</span><br><span class="line">.box&#123;</span><br><span class="line">       display: table;</span><br><span class="line">       width: 100%;</span><br><span class="line">       height: 35px;</span><br><span class="line">   &#125;</span><br><span class="line">   .box&gt;div&#123;</span><br><span class="line">       display: table-cell;</span><br><span class="line">       height: 100%;</span><br><span class="line">   &#125;</span><br><span class="line">   .left&#123;</span><br><span class="line">       width: 120px;</span><br><span class="line">       background: red;</span><br><span class="line">   &#125;</span><br><span class="line">   .right&#123;</span><br><span class="line">       background: greenyellow;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="float方案"><a href="#float方案" class="headerlink" title="float方案"></a>float方案</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//布局</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line"> &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">   ...</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">//样式</span><br><span class="line">.box&#123;</span><br><span class="line">   height: 35px;</span><br><span class="line">&#125;</span><br><span class="line">.box&gt;div&#123;</span><br><span class="line">   height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.left&#123;</span><br><span class="line">   float:left;</span><br><span class="line">   width: 120px;</span><br><span class="line">   background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right&#123;</span><br><span class="line">//不能给100%宽度，会超出父元素出现滚动条</span><br><span class="line">padding-left:120px;//必须给padding-left值，如果没有则只有子行内元素会被前兄弟节点挤到右面</span><br><span class="line">   background: greenyellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css-BFC、IFC、GFC、FFC"><a href="#css-BFC、IFC、GFC、FFC" class="headerlink" title="css BFC、IFC、GFC、FFC"></a>css BFC、IFC、GFC、FFC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">BFC（block fomatting context）是web布局的块级元素格式化上下文。</span><br><span class="line">BFC布局规则：</span><br><span class="line">.内部的Box会在垂直方向，一个接一个地放置。</span><br><span class="line">.Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</span><br><span class="line">.每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</span><br><span class="line">.BFC的区域不会与float box重叠。</span><br><span class="line">.BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</span><br><span class="line">.计算BFC的高度时，浮动元素也参与计算</span><br><span class="line">以下方式可以创BFC</span><br><span class="line">.根元素</span><br><span class="line">.float属性不为none；float本身会对上下文影响，但是其子节点对其外部不会有影响</span><br><span class="line">.position为absolute或fixed</span><br><span class="line">.display为inline-block, table-cell, table-caption, flex, inline-flex</span><br><span class="line">.overflow不为visible</span><br><span class="line">举例：</span><br><span class="line">`自适应两栏布局`</span><br><span class="line">    .aside &#123;</span><br><span class="line">        float: left;//生成NFC</span><br><span class="line">        background: #f66;</span><br><span class="line">    &#125;</span><br><span class="line">    .main &#123;</span><br><span class="line">        overflow:hiddle;//生成NFC</span><br><span class="line">        background: #fcc;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;div class=&quot;aside&quot;&gt;asfsdf&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;main&quot;&gt;1234242&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">`overflow:hiddle清除浮动`</span><br><span class="line">利用了BFC包裹的特性，计算内部高度并且不影响包裹快外部元素，所以可以解决浮动导致包裹节点的塌陷问题。</span><br><span class="line">`利用NFC的margin边界接触规则解决内部元素margin包裹元素的位置影响`</span><br><span class="line">&lt;div class=&quot;body&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    asdf</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">.body&#123;</span><br><span class="line">  background:blue;</span><br><span class="line">  overflow:hidden; //生成nfc，效果 === float:left;</span><br><span class="line">&#125;</span><br><span class="line">.body&gt;div&#123;</span><br><span class="line">  border:1px solid red;</span><br><span class="line">  margin-top:30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">IFC (inline formatting context)是web布局的内联元素格式化上下文。</span><br><span class="line">IFC用来包裹内联元素，其高度为内联元素最高所决定，给IFC设置text-align:center;</span><br><span class="line">会使其内部元素水平居中。</span><br><span class="line">把IFC中最高元素基线设置为vertical-align:middle能使IFC内部元素垂直居中。</span><br><span class="line"></span><br><span class="line">GFC (GridLayout Formatting Contexts) 网格布局格式化上下文 display:grid</span><br><span class="line"></span><br><span class="line">FFC (Flex Formatting Contexts)自适应格式化上下文 display:flex</span><br></pre></td></tr></table></figure><h3 id="用dom节点绘制一个微信logo"><a href="#用dom节点绘制一个微信logo" class="headerlink" title="用dom节点绘制一个微信logo"></a>用dom节点绘制一个微信logo</h3><p><code>css 绘制icon</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;wx-logo&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.wx-logo&#123;</span><br><span class="line">  font-size:20px;</span><br><span class="line">  width:10em;</span><br><span class="line">  height:10em;</span><br><span class="line">  border:1px solid red;</span><br><span class="line">  margin:30px;</span><br><span class="line">  padding:1em .7em;</span><br><span class="line">  box-sizing:border-box;</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(1)&#123;</span><br><span class="line">  background:linear-gradient(#98ea61,#78b94c);</span><br><span class="line">  width:7.5em;</span><br><span class="line">  height: 6em;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(2)&#123;</span><br><span class="line">  background:linear-gradient(#f2f2fa,#c3c3c3);</span><br><span class="line">  width:5.8em;</span><br><span class="line">  height: 4.4em;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  transform:translate(50%,-77%);</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div&#123;</span><br><span class="line">  position:relative;</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div&gt;span&#123;</span><br><span class="line">  position:absolute;</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(1)&gt;span&#123;</span><br><span class="line">  left:15%;</span><br><span class="line">  top:calc(100% - 0.67em);</span><br><span class="line">  transform:rotate(40deg);</span><br><span class="line">  border-top:1em solid #78b94c;</span><br><span class="line">  border-left:0.3em solid transparent;</span><br><span class="line">  border-right:0.3em solid  transparent;</span><br><span class="line">  border-bottom:0 solid transparent;</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(2)&gt;span&#123;</span><br><span class="line">  right:15%;</span><br><span class="line">  top:calc(100% - 0.6em);</span><br><span class="line">  transform:rotate(-40deg);</span><br><span class="line">  border-top:1em solid #c3c3c3;</span><br><span class="line">  border-left:0.3em solid transparent;</span><br><span class="line">  border-right:0.3em solid  transparent;</span><br><span class="line">  border-bottom:0 solid transparent;</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(1):before&#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display:block;</span><br><span class="line">  width:0.7em;</span><br><span class="line">  height:0.7em;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  background:#447921;</span><br><span class="line">  transform:translate(2.1em,1.5em);</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(1):after&#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display:block;</span><br><span class="line">  width:0.7em;</span><br><span class="line">  height:0.7em;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  background:#447921;</span><br><span class="line">  transform:translate(4.7em,0.73em);</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(2):before&#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display:block;</span><br><span class="line">  width:0.56em;</span><br><span class="line">  height:0.56em;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  background:#888888;</span><br><span class="line">  transform:translate(1.6em,1.3em);</span><br><span class="line">&#125;</span><br><span class="line">.wx-logo&gt;div:nth-of-type(2):after&#123;</span><br><span class="line">  content:&apos;&apos;;</span><br><span class="line">  display:block;</span><br><span class="line">  width:0.56em;</span><br><span class="line">  height:0.56em;</span><br><span class="line">  border-radius:50%;</span><br><span class="line">  background:#888888;</span><br><span class="line">  transform:translate(3.5em,0.7em);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">强制转换：</span><br><span class="line">转换为数值类型：Number(mix)、parseInt(string,radix)、parseFloat(string)</span><br><span class="line">转换为字符串类型：toString(radix)、String(mix)</span><br><span class="line">转换为布尔类型：Boolean(mix)</span><br><span class="line"></span><br><span class="line">Boolean(&apos;&apos;) //false</span><br><span class="line">Boolean(0);//false</span><br><span class="line">Boolean(NaN); //false</span><br><span class="line">Boolean(undefined) //false</span><br><span class="line">Boolean(null) //false</span><br><span class="line">Boolean([])//true</span><br><span class="line">Boolean([].valueOf())//true</span><br><span class="line">Boolean([].toString()) //false</span><br><span class="line"></span><br><span class="line">隐式转换：</span><br><span class="line">++ -- - / * - 逻辑运算符 关系操作符（==）</span><br><span class="line"></span><br><span class="line">[] == []</span><br><span class="line">//false</span><br><span class="line">false == []</span><br><span class="line">//true</span><br><span class="line">[] == false</span><br><span class="line">//true</span><br><span class="line">&#123;&#125; == &#123;&#125;</span><br><span class="line">//false</span><br></pre></td></tr></table></figure><h3 id="数据的浅拷贝和深拷贝，数据深拷贝的由来以及实现方式"><a href="#数据的浅拷贝和深拷贝，数据深拷贝的由来以及实现方式" class="headerlink" title="数据的浅拷贝和深拷贝，数据深拷贝的由来以及实现方式"></a>数据的浅拷贝和深拷贝，数据深拷贝的由来以及实现方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">深拷贝是针对于引用数据类型的，由于引用数据类型会将数据本身存储到堆中，将指针（指向堆里数据的地址）存在栈内。浅拷贝可实现不同指针指向同一数据，并不能将数据本身复制，而深拷贝会在内存中开辟新空间来实现数据和指针的全部复制。</span><br><span class="line">浅拷贝的方式有赋值，传参等。</span><br><span class="line">深拷贝的方法有：</span><br><span class="line">1、JSON.stringify()/JSON.parse();</span><br><span class="line">2、对于一位json可以有现成的api比如array的slice、concat等，凡是可以生成新json的api都可以。</span><br><span class="line">3、对多维json进行遍历加递归，判断条件为基本数据类型后结束递归并赋值。</span><br><span class="line"></span><br><span class="line">`应用`</span><br><span class="line">深拷贝和浅拷贝在开发中需应用得当。</span><br><span class="line">浅拷贝可以节省内存开销，并使一组数据在多端程序操作后保持同步，函数传参常用。</span><br><span class="line">深拷贝会耗费一定内存，但是在特定的情景下是必要的，比如封装开发，对初始化数据进行【备份】等。</span><br></pre></td></tr></table></figure><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">`browser`</span><br><span class="line">console.log(this === window)//true</span><br><span class="line">`node`</span><br><span class="line">console.log(this === global)//true</span><br><span class="line"></span><br><span class="line">this指的是，调用函数的那个对象。</span><br><span class="line">call、apply会改变this的指向</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><code>构造函数</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function _A ()&#123;</span><br><span class="line">this.name = &apos;A&apos;;</span><br><span class="line">this.arr = [1,2,3]</span><br><span class="line">&#125;</span><br><span class="line">_A.prototype.o = &#123;&apos;o&apos;:&apos;oo&apos;&#125;</span><br><span class="line">var A = new _A();</span><br><span class="line">A.name;//A</span><br><span class="line">var B = new _A()</span><br><span class="line">B.name;//A</span><br><span class="line">A.name === B.name;//true</span><br><span class="line">A.arr === B.Arr;//false</span><br><span class="line">A.o === B.o; //true 注意：通过构造函数new出来的对象，继承其构造函数的原型</span><br></pre></td></tr></table></figure></p><p><code>call、apply</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function _people()&#123;</span><br><span class="line">this.body = &#123;</span><br><span class="line">head : &apos;one&apos;,</span><br><span class="line">hands: &apos;tow&apos;,</span><br><span class="line">foots : &apos;tow&apos;</span><br><span class="line">&#125;</span><br><span class="line">this.ability = &#123;</span><br><span class="line">language : true,</span><br><span class="line">fly : false</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">_people.prototype.getTheNmae = function()&#123;</span><br><span class="line">return this.theName</span><br><span class="line">&#125;</span><br><span class="line">function _man ()&#123;</span><br><span class="line">_people.call(this)</span><br><span class="line">&#125;</span><br><span class="line">var people = new _people();</span><br><span class="line">var zhangsan = new _man();</span><br><span class="line">zhangsan.body;//&#123;head: &quot;one&quot;, hands: &quot;tow&quot;, foots: &quot;tow&quot;&#125;</span><br><span class="line">zhangsan.body === people1.body//false</span><br><span class="line">zhangsan.theNmae = &apos;张三&apos;</span><br><span class="line">zhangsan.getTheName; //undefined 注意：call、apply造成的继承是不会继承父类的原型</span><br></pre></td></tr></table></figure></p><p><code>原型继承</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function _A()&#123;</span><br><span class="line">this.obj = &#123;&quot;a&quot;:&quot;aa&quot;&#125;</span><br><span class="line">&#125;</span><br><span class="line">_A.prototype.arr = [1,2,3];</span><br><span class="line"></span><br><span class="line">var A = new _A();</span><br><span class="line">var B = new _A();</span><br><span class="line">A.arr;//[1,2,3]</span><br><span class="line">A.arr === B.arr;//true</span><br><span class="line">A.obj === B.obj//false</span><br></pre></td></tr></table></figure></p><p><code>原型链继承</code><br><img src="https://pic1.zhimg.com/e83bca5f1d1e6bf359d1f75727968c11_r.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">`关系如上图：`</span><br><span class="line"></span><br><span class="line">`范式如下：`</span><br><span class="line">function _a()&#123;</span><br><span class="line">this.name = &apos;a&apos;</span><br><span class="line">this.num = [1,2,3]</span><br><span class="line">&#125;</span><br><span class="line">_a.prototype.getNum = function()&#123;</span><br><span class="line">return this.num</span><br><span class="line">&#125;</span><br><span class="line">_a.prototype.getName = function()&#123;</span><br><span class="line">return this.name</span><br><span class="line">&#125;</span><br><span class="line">function _b()&#123;</span><br><span class="line">this.name = &apos;b&apos;</span><br><span class="line">&#125;</span><br><span class="line">_b.prototype = new _a()</span><br><span class="line">_b.prototype.constructor = _b;</span><br><span class="line">var b = new _b();</span><br><span class="line">b.getNum();//[1,2,3] </span><br><span class="line">b.getName();//&apos;b&apos; 注意：对象读取属性依据继承链向上读取</span><br><span class="line"></span><br><span class="line">`__ptoto__`</span><br><span class="line">1.对象有属性__proto__,指向该对象的构造函数的原型对象。</span><br><span class="line">2.方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。</span><br><span class="line"></span><br><span class="line">`用途`</span><br><span class="line">实现继承的主要方法</span><br><span class="line">常用于以基类、二级类、...方式开发js工具库、游戏。</span><br></pre></td></tr></table></figure></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function addFn()&#123;</span><br><span class="line">var z = 0</span><br><span class="line">return function _()&#123;</span><br><span class="line">console.log(z++)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">var add = addFn();</span><br><span class="line">add()//0</span><br><span class="line">add()//1</span><br><span class="line">add()//2</span><br><span class="line">add()//3</span><br><span class="line"></span><br><span class="line">注解：将‘addFn’执行后赋值给’add‘字面量，‘add’接收到返回的‘_’,&apos;_&apos;内部引用‘addFn’作用域中的变量，由于’add‘未销毁，所以&apos;_&apos;与‘addFn’的上下文关系就未被销毁。add()便是‘addFn’作用域里的‘z’，实现了内部变量外部访问</span><br></pre></td></tr></table></figure><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">transition（过度）（css实现）</span><br><span class="line">animation （动画）（css实现）</span><br><span class="line">setInterval（定时器）（js 定时器）</span><br><span class="line">requestAmationFrame（js帧绘画）实现方式是递归执行</span><br></pre></td></tr></table></figure><h3 id="什么是动画队列？动画队列有哪些方式？"><a href="#什么是动画队列？动画队列有哪些方式？" class="headerlink" title="什么是动画队列？动画队列有哪些方式？"></a>什么是动画队列？动画队列有哪些方式？</h3><p><code>动画题</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">`jquery`</span><br><span class="line">$(&apos;#box&apos;).animate(&#123;&apos;left&apos;:&apos;100px&apos;&#125;,1000).animate(&#123;&apos;width&apos;:&apos;200px&apos;&#125;,1000).animate(&#123;&apos;left&apos;:&apos;0&apos;&#125;,1000).animate(&#123;&apos;width&apos;:&apos;100px&apos;&#125;,1000);</span><br><span class="line">`原生js配合css`</span><br><span class="line">监听transitionEnd、animationEnd事件，在回调中做动画</span><br><span class="line">利用transition的等待时间，或者用animation分步动画</span><br></pre></td></tr></table></figure></p><h3 id="前端存储-数据持久化"><a href="#前端存储-数据持久化" class="headerlink" title="前端存储 数据持久化"></a>前端存储 数据持久化</h3><p><code>Session Storage 会话存储</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage生命周期是永久，这意味着除非用户在浏览器提供的UI上清除或者localStorage.clear()清除，否则这些信息将永远存在。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。</span><br></pre></td></tr></table></figure></p><p><code>Local Storage 本地存储</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除。存放数据大小为一般为5MB,而且它仅在客户端（即浏览器）中保存，不参与和服务器的通信。源生接口可以接受，亦可再次封装来对Object和Array有更好的支持。</span><br></pre></td></tr></table></figure></p><p><code>作用域不同</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不同浏览器无法共享localStorage或sessionStorage中的信息。相同浏览器的不同页面间可以共享相同的localStorage（页面属于相同域名和端口），但是不同页面或标签页间无法共享sessionStorage的信息。这里需要注意的是，页面及标签页仅指顶级窗口，如果一个标签页包含多个iframe标签且他们属于同源页面，那么他们之间是可以共享sessionStorage的。</span><br></pre></td></tr></table></figure></p><p><code>Cookie</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生命期为只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为4K左右 。有个数限制（各浏览器不同），一般不能超过20个。与服务器端通信：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题。但Cookie需要程序员自己封装，源生的Cookie接口不友好(http://www.jb51.net/article/6... </span><br><span class="line">)。</span><br></pre></td></tr></table></figure></p><p><code>DB</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">web sql、indexDB</span><br></pre></td></tr></table></figure></p><h3 id="和服务端的数据交互"><a href="#和服务端的数据交互" class="headerlink" title="和服务端的数据交互"></a>和服务端的数据交互</h3><p><code>http</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">methods : get、post、put、option、delete...</span><br><span class="line">状态码 : 200（正常）、300（重定向）、400（客户端错误）、500（服务端错误）</span><br><span class="line">http是无状态、结合cookie和session描述http会话过程： Session是怎样做到会话身份识别的呢？首先，用户端向服务端发送一个请求，服务端接收到请求后，初始化会话，生成相应的会话信息，核心是会话ID，把会话ID发送给客户端，客户端接收到这个会话ID，把它存储起来，下一次发送请求的时候，附带着这个会话ID一起发送给服务端，服务端只要根据这个会话ID，就知道是谁了。这个会话ID，就像我们的身份证号码，一直伴随终生。核心：服务端如何生成这个会话ID，客户端怎样存储这个会话ID。</span><br></pre></td></tr></table></figure></p><p><code>ajax 上送数据格式</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query String（get请求）；</span><br><span class="line">Request Payload（post请，Content-Type:text/plain;charset=UTF-8 || application/json; charset=utf-8）；</span><br><span class="line">Form Data（Content-Type:application/x-www-form-urlencoded ）</span><br></pre></td></tr></table></figure></p><p><code>跨域</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">`跨域的由来`</span><br><span class="line">跨域是浏览器对不同域名下的站点间脚本数据交互的保护措施，具体表现在ajax脚本对不同域名下的服务发出的数据请求和不同站点间的通信会被跨域拦截。</span><br><span class="line"></span><br><span class="line">`jsonp 解决一级域跨域`：原理，简单实现</span><br><span class="line">原理是客户端创建script标签src请求服务端返回的一个js文件，在这个js文件中上面是要返回的json数据，下面是一个callback函数的执行并将上面的数据作为实参回传，callback函数名在客户端请求时一query string方式上传。客户端在这个js文件加载成功后编写回调具名函数，函数名为上面提到的callback。</span><br><span class="line">`cors 解决一级域跨域`: 原理，实现。</span><br><span class="line">ajax发起后requestHeader设置withCredentials和crossDomain为true，表明ajax要发起跨域请求了，在服务端返回的responseHeader中需要设置ajax脚本执行所在域的域名为信任站点，即设置res.header(&quot;Access-Control-Allow-Origin&quot;,req.headers.origin);</span><br><span class="line">`服务器代理 解决一级域跨域`</span><br><span class="line">由于跨域是浏览器对ajax做的限制，因此服务端请求服务端的数据是不存在跨域的，所以用同域下的服务求代理客户端去请求跨域的服务数据是可以的。</span><br><span class="line"></span><br><span class="line">`二级域名跨域`</span><br><span class="line">开发中时长遇到二级域名跨域的场景，比如：iframe间通信，cookie跨域共享等，这些场景多数可以通过document.domain和服务端设置cookie的cross来解决。</span><br></pre></td></tr></table></figure></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><code>dom 0级时间</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onclick=&quot;alert(1)&quot;&gt;点击&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><code>dom 2级事件</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addEventListener</span><br></pre></td></tr></table></figure></p><p><code>事件流</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">事件捕获、事件元、事件冒泡</span><br></pre></td></tr></table></figure></p><p><code>事件对象的应用</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">e.target 实现事件委派</span><br><span class="line">e.clientX,e.clientY...</span><br></pre></td></tr></table></figure></p><p><code>移动端事件点透原因及处理</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">原因：移动端触屏会发生两类事件，touch和click。当情景为两个非后代继承关系的dom节点重叠，z-index高的节点挂touch事件并当事件执行后将此dom从dom树种擦除（实际便是引起dom树重绘并且此渲染位置被后者占用），另一个挂click事件时会出现点透现象。</span><br><span class="line">原理：移动端click触发会有300 ms的延迟，当上层touch执行完毕后会相继执行上层的click，发现点击的位置上是后者，便把click作用于后者上了。</span><br><span class="line">处理方案：禁止浏览器默认事件，e.preventDefault();</span><br></pre></td></tr></table></figure></p><h3 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a>同步异步</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">js是同步执行，但是有异步机制，定时器、计时器、ajax、promise、async函数、同异步加载等。</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(0)</span><br><span class="line">&#125;,100)</span><br><span class="line">console.log(1)</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">console.log(2)</span><br><span class="line">&#125;,0)</span><br><span class="line">for(var i = 0; i &lt; 10000; i++)&#123;</span><br><span class="line">if(i === 9999)&#123;</span><br><span class="line">console.log(3)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">执行结果 ：</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure><h3 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">`从用户角度`</span><br><span class="line">FEcoder在设计前端优化时首先应从用户角度看，除去UE要考虑的人机交互优化外，coder更应注重软件的稳定性，易用性、好用性、安全性等。</span><br><span class="line">稳定性：不出现操作卡顿等应用不稳定现象；</span><br><span class="line">好用性：节省流量、快速调起、快速响应等直接或间接的表现；</span><br><span class="line">美观性：不出现失真、完美还原设计图、舒适的过度动画、减少页面呈现断层感；</span><br><span class="line">安全性：软件对用户信息的保密、前后端数据交互的加密、反显脱敏、高危操作保护；</span><br><span class="line">`开发者要考虑的`</span><br><span class="line">稳定性的要求决定了开发者在软件开发过程中代码的健壮和精简，软件维护措施的时效。需要coder编写规范，控制页面数据量、减少频繁的dom操作，遵循语言机制（尽量使用最切近目标的实现方式，比如能用css的就不用js），代码要易维护。</span><br><span class="line">减少http请求、静态文件客户端缓存可以节省用户流量。</span><br><span class="line">cdn和缓存服务器可以降低后台服务器压力。</span><br><span class="line">降低首屏加载量、缓存服务支持、图片懒加载、过度的页面交互等能够让应用实现快速调起并减少断层感。</span><br><span class="line">icon矢量化，扁平化的应用可以大幅度避免图片的应用。</span><br><span class="line">事件的处理和loadingUI能提高页面快速响应，比如处理点透、事件委派。</span><br><span class="line">pc端响应式布局能提高应用在多类屏的较完美呈现，移动端dpr，postcss等的结合应用可以实现多终端较完美呈现</span><br><span class="line">前端安全性在金融类应用中较为重要，https可以实现数据安全传输，用户名密码等敏感信息可以散列（md5、sha1）后存储并对比。对前端数据采集（如：表单录入）应当提高安全防护，比如：密码键盘、脱敏录入</span><br></pre></td></tr></table></figure><h3 id="前端可视化"><a href="#前端可视化" class="headerlink" title="前端可视化"></a>前端可视化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">前端可视化包括：计算机图形学（图形交互技术、真实感图形计算与显示算法、科学计算可视化、计算机动画、自然景物仿真、虚拟现实、物理现象计算等）；UE用户体验（易用、友好、美观、品牌）</span><br><span class="line">div+css、svg、webgl(canvas 2D、3D)</span><br></pre></td></tr></table></figure><p><code>试用一种方案描述实现弹性小球落地效果</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">`div+css` or `svg`</span><br><span class="line">描述：利用border-radius + box-shadow等属性绘制小球，animation设置小球多次回弹动画，注意需要适当的贝瑟尔值。</span><br><span class="line">`canvas`</span><br><span class="line">描述：canvas.getContext(&apos;2d&apos;)绘制小球，利用setInterval或者requestAmationFrame函数重绘canvas实现动画，重绘算法如下：设小球质量、重力加速度、小球碰撞耗能，利用动能守恒定律计算小球在每次落地耗能后回弹最高点，再根据加速度和初速度计算出每一秒的位移。</span><br></pre></td></tr></table></figure></p><h3 id="前端开发方案"><a href="#前端开发方案" class="headerlink" title="前端开发方案"></a>前端开发方案</h3><p><code>布局自适应方案</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">响应式布局（栅格化布局）、flex布局、百分比线性布局、移动端rem和组件em + flexable(原理：重设dpr，重设html的font-size)</span><br></pre></td></tr></table></figure></p><p><code>工程管理</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">`脚手架`</span><br><span class="line">开发支持：实现热刷新、数据mock、语言解析、开发目录规范</span><br><span class="line">发布发布：编译、压缩、抽离、整理生成目录、替换cdn</span><br></pre></td></tr></table></figure></p><p><code>本地联调</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地联调解决的是跨域请求问题，如果已经cors的服务端返回则可以直接联调，否则需要架设代理服务进行代理请求。</span><br></pre></td></tr></table></figure></p><blockquote><p>另外多人协作开发、测试支持、上线支持等</p></blockquote><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在日常开发中，时长会遇到相同或相似的场景，然而将相同或相似的代码到处搬运无疑不是一个明智的做法，这时就需要将这些相同或者相似的代码进行抽离封装。</span><br><span class="line">封装的原则是什么？</span><br><span class="line">1、低耦合高内聚，遵循此原则可以让封装的代码降低与上下游环境的耦合，解耦能增加代码的应用场景从而提高复用性。</span><br><span class="line">2、易引用(AMD、CMD、UMD)、易调用（调用方式简单）、易配置（针对封装暴露出来的能力）</span><br><span class="line">3、易维护、易拓展。</span><br></pre></td></tr></table></figure><h3 id="组件动手题"><a href="#组件动手题" class="headerlink" title="组件动手题"></a>组件动手题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> 整理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github Pages + hexo 建博客</title>
      <link href="/2018/05/25/HexoAndGithubPages/"/>
      <url>/2018/05/25/HexoAndGithubPages/</url>
      <content type="html"><![CDATA[<h1 id="GitHub-Pages-Hexo-To-My-Blog"><a href="#GitHub-Pages-Hexo-To-My-Blog" class="headerlink" title="GitHub Pages + Hexo To My Blog"></a>GitHub Pages + Hexo To My Blog</h1><h2 id="xueyibokong-github-io"><a href="#xueyibokong-github-io" class="headerlink" title="xueyibokong.github.io"></a>xueyibokong.github.io</h2><p>我自己的github仓库</p><h2 id="Hexo-remote是Hexo-For-xueyibokong-github-io-Hexo-文档"><a href="#Hexo-remote是Hexo-For-xueyibokong-github-io-Hexo-文档" class="headerlink" title="Hexo [remote是Hexo For xueyibokong.github.io] Hexo 文档"></a>Hexo [remote是Hexo For xueyibokong.github.io] <a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">Hexo 文档</a></h2><p>blog建站工具<br>通过配置 <code>_config.yml</code> 的 <code>Deployment</code> 来关联 <code>xueyibokong.github.io</code></p><h2 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h2><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><code>_config.yml</code></h4><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。这个文件下面会做较为详细的介绍。</p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>scaffolds是“脚手架”的意思，当你新建一篇文章（hexo new ‘title’）的时候，hexo是根据这个目录下的文件进行构建的。基本不用关心。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>这个目录很重要，新建的文章都是在保存在这个目录下的._posts 。需要新建的博文都放在 _posts 目录下。<br>_posts 目录下是一个个 markdown 文件。你应该可以看到一个 hello-world.md 的文件，文章就在这个文件中编辑。<br>_posts 目录下的md文件，会被编译成html文件，放到 public 文件夹下。</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>网站主题目录，hexo有非常好的主题拓展，支持的主题也很丰富。该目录下，每一个子目录就是一个主题。</p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h2 id="文章多点发布-amp-同步"><a href="#文章多点发布-amp-同步" class="headerlink" title="文章多点发布 &amp; 同步"></a>文章多点发布 &amp; 同步</h2><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>文章默认创建在source/_post目录下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &quot;My New Post&quot;</span><br></pre></td></tr></table></figure></p><p>创建文章的<code>.md</code>文件会在头部生成文章基本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test hexo</span><br><span class="line">date: 2018-05-25 10:30:12</span><br><span class="line">tags: </span><br><span class="line">- q</span><br><span class="line">- w</span><br><span class="line">type:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><blockquote><p><code>title</code> 文章标题<br><code>date</code>  时间<br><code>tags</code>  文章标签<br><code>type</code>  文章类型</p></blockquote><h4 id="Run-server-查看效果"><a href="#Run-server-查看效果" class="headerlink" title="Run server [查看效果]"></a>Run server [查看效果]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">or</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h4 id="构建静态文件"><a href="#构建静态文件" class="headerlink" title="构建静态文件"></a>构建静态文件</h4><p>初始化静态文件，也就是将source/_post目录下<code>.md</code>的文章构建到public目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line">or</span><br><span class="line">$ hexo g</span><br><span class="line">or </span><br><span class="line">$ hexo server -p 端口号</span><br></pre></td></tr></table></figure></p><h4 id="推送到-username-github-io"><a href="#推送到-username-github-io" class="headerlink" title="推送到 username.github.io"></a>推送到 username.github.io</h4><p>将public目录下的静态web推送到<code>username.github.io</code>仓库下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><h3 id="换点发布"><a href="#换点发布" class="headerlink" title="换点发布"></a>换点发布</h3><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>换一台电脑发布文章。</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>1、将hexo项目保存到 username.github.io项目的hexo分支上。<br>2、将hexo分支设为default分支，便于clone和提交。</p><h2 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置有主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [主题仓库地址] themes/[主题名]</span><br></pre></td></tr></table></figure><h3 id="启动主题"><a href="#启动主题" class="headerlink" title="启动主题"></a>启动主题</h3><p>修改根目录下的<code>_config.yml</code>的<code>theme</code>配置项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme : [主题名]</span><br></pre></td></tr></table></figure></p><h3 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="推送到线上生效"><a href="#推送到线上生效" class="headerlink" title="推送到线上生效"></a>推送到线上生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Github Pages </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
