<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2019/09/17/%E5%9B%9E%E5%BD%A2%E9%81%8D%E5%8E%86/"/>
      <url>/2019/09/17/%E5%9B%9E%E5%BD%A2%E9%81%8D%E5%8E%86/</url>
      <content type="html"><![CDATA[<h2 id="回形遍历问题"><a href="#回形遍历问题" class="headerlink" title="回形遍历问题"></a>回形遍历问题</h2><p><img src="/Users/zhangjun/Downloads/WechatIMG87.jpg" alt="WechatIMG87"></p><blockquote><p>问：编写 <code>SpreadOutArrs</code> 函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(SpreadOutArrs([</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">]))</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">console</span>.log(SpreadOutArrs([</span><br><span class="line">  [<span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>],</span><br><span class="line">  [<span class="number">11</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line">]))</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]</span></span><br><span class="line"><span class="built_in">console</span>.log(SpreadOutArrs([</span><br><span class="line">  [<span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">  [<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">7</span>],</span><br><span class="line">  [<span class="number">14</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">21</span>,<span class="number">8</span>],</span><br><span class="line">  [<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>]</span><br><span class="line">]))</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]</span></span><br></pre></td></tr></table></figure><blockquote><p>答：找规律</p></blockquote><p>0       1      2       3      4</p><p>5       6      7       8      9</p><p>10    11    12    13    14</p><p>15    16    17    18    19</p><p>20    21    22    23    24</p><blockquote><p>思路：回形遍历，首先要找到回形路线的规则，通过有序的回形递增数值展开找规律，展开后为</p></blockquote><p>0，1，2，3，4，9，14，19，24，23，22，21，20，15，10，5，6，7，8，13，18，17，16，11，12</p><blockquote><p>好下面开始找规律，如图：</p></blockquote><p><img src="/Users/zhangjun/Library/Application Support/typora-user-images/image-20190917194430305.png" alt="image-20190917194430305"></p><blockquote><p>关键点说明：</p></blockquote><p>n: <code>n</code>是指回形的宽高</p><p>l：<code>l</code>是个关键，每一段（环）以<code>l</code>2分，按下标相加得出一个固定值(n² - 1)，【如果是从1开始的则是n²，不过js下标习惯从0开始】；</p><p>n-2: <code>n-2</code>是每一环n的递减规律</p><blockquote><p>解：</p></blockquote><p>1、从图中可以看出，每一段的规律是一样的，只是段长度和起始值不同，可以看出，段长度是以<code>n - 2</code> 的规律递减的，因此，可以以一个递归实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shrink</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> n2 = <span class="built_in">Math</span>.pow(n, <span class="number">2</span>) <span class="comment">// n²</span></span><br><span class="line"><span class="keyword">if</span> (n2 === <span class="number">0</span>) <span class="keyword">return</span><span class="comment">// n = 0</span></span><br><span class="line"><span class="keyword">if</span> (n2 === <span class="number">1</span>) &#123;<span class="comment">// n = 1</span></span><br><span class="line">        <span class="comment">// 直接单独处理就好</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">Shrink(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line">Shrink(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、怎样得出<code>l</code>，每一环的数量为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n² - (n - <span class="number">2</span>)²</span><br><span class="line"><span class="comment">// 换算</span></span><br><span class="line">= n² - (n - <span class="number">2</span>)*(n - <span class="number">2</span>)</span><br><span class="line">= n² - n² + <span class="number">2</span>n + <span class="number">2</span>n - <span class="number">4</span></span><br><span class="line">= <span class="number">4</span>n - <span class="number">4</span></span><br><span class="line">= <span class="number">4</span>(n - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4(n - 1) / 2 就是l的值，2(n - 1)；</span></span><br><span class="line"><span class="comment">// 结果 2(n - 1)</span></span><br></pre></td></tr></table></figure><p>3、根据每一段的规律计算下标</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// l 在上文求出</span></span><br><span class="line"><span class="comment">// n 为当前段回形的宽度</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">let</span> maxN = <span class="built_in">Math</span>.pow(N, <span class="number">2</span>) - <span class="number">1</span> <span class="comment">// 相加固定值，即 n² - 1</span></span><br><span class="line"><span class="keyword">let</span> v = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i ++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i &lt; n) &#123;</span><br><span class="line">    <span class="comment">// &lt;n的值就直接推入</span></span><br><span class="line">    v = i</span><br><span class="line">    arr[i] = v</span><br><span class="line">    <span class="comment">// 推入与 v 相加为 maxN的值到对应位置</span></span><br><span class="line">    arr[l + i] = maxN - v</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// &gt;=n的值按规律加值</span></span><br><span class="line">    v += n</span><br><span class="line">    arr[i] = v</span><br><span class="line">    <span class="comment">// 推入与 v 相加为 maxN的值到对应位置</span></span><br><span class="line">    arr[l + i] = maxN - v</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实现了一段，也就是一个回环的顺时针下标排列，下面将其套入到回环递归中，注意：n的值是在递减，要把n的初始值保存。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = []</span><br><span class="line">  <span class="keyword">const</span> initLen = n</span><br><span class="line">  <span class="keyword">const</span> maxN = <span class="built_in">Math</span>.pow(initLen, <span class="number">2</span>) - <span class="number">1</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Shrink</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> n2 = <span class="built_in">Math</span>.pow(n, <span class="number">2</span>)</span><br><span class="line">    <span class="comment">// ---</span></span><br><span class="line">    <span class="keyword">const</span> rI = (initLen - n) / <span class="number">2</span> <span class="comment">// 环下标</span></span><br><span class="line">    <span class="keyword">const</span> r = rI * (initLen + <span class="number">1</span>) <span class="comment">// 环增长值</span></span><br><span class="line">    <span class="keyword">let</span> v  = <span class="number">0</span><span class="comment">// 循环中前行值</span></span><br><span class="line">    <span class="keyword">let</span> arr = []<span class="comment">// 当前环下标集</span></span><br><span class="line">    <span class="comment">// ===</span></span><br><span class="line">    <span class="keyword">if</span> (n2 === <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> (n2 === <span class="number">1</span>) &#123;</span><br><span class="line">      arr.push(r)</span><br><span class="line">      result = result.concat(arr)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> l = <span class="number">2</span>*(n - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; l; i ++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &lt; n) &#123;</span><br><span class="line">        v = i + r</span><br><span class="line">        arr[i] = v</span><br><span class="line">        arr[l + i] = maxN - v</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        v += initLen</span><br><span class="line">        arr[i] = v</span><br><span class="line">        arr[l + i] = maxN - v</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result = result.concat(arr)</span><br><span class="line">    Shrink(n<span class="number">-2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  Shrink(n)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------- line --------------------------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(order(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(order(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">console</span>.log(order(<span class="number">3</span>))</span><br><span class="line"><span class="built_in">console</span>.log(order(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">console</span>.log(order(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p>如上：其中值得一提的是 <code>r</code> 变量的规律，r = 环下标 <em> 回形原始宽加1，即 r = rI </em> (initLen + 1)，</p><blockquote><p>至此，我们已经得出了回形遍历的函数方法，可以应用到此类案例中，本文题目就是一个这样的案例，如下解：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SpreadOutArrs</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> n = arr.length</span><br><span class="line">  arr = arr.reduce(<span class="function">(<span class="params">a1, a2</span>) =&gt;</span> a1.concat(a2))</span><br><span class="line">  <span class="keyword">const</span> indexArr = order(n)</span><br><span class="line">  <span class="keyword">const</span> result = []</span><br><span class="line">  indexArr.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">    result.push(arr[i])</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'---------------------------- line --------------------------------'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(SpreadOutArrs([</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>]</span><br><span class="line">]))</span><br><span class="line"><span class="built_in">console</span>.log(SpreadOutArrs([</span><br><span class="line">  [<span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  [<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">5</span>],</span><br><span class="line">  [<span class="number">11</span>,<span class="number">16</span>,<span class="number">15</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>,<span class="number">7</span>]</span><br><span class="line">]))</span><br><span class="line"><span class="built_in">console</span>.log(SpreadOutArrs([</span><br><span class="line">  [<span class="number">1</span>,  <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">  [<span class="number">16</span>,<span class="number">17</span>,<span class="number">18</span>,<span class="number">19</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">24</span>,<span class="number">25</span>,<span class="number">20</span>,<span class="number">7</span>],</span><br><span class="line">  [<span class="number">14</span>,<span class="number">23</span>,<span class="number">22</span>,<span class="number">21</span>,<span class="number">8</span>],</span><br><span class="line">  [<span class="number">13</span>,<span class="number">12</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">9</span>]</span><br><span class="line">]))</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]</span></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]</span></span><br></pre></td></tr></table></figure><p>原文=&gt; <a href="http://blog.thephenix.com/2019/09/17/回形遍历/">http://blog.thephenix.com/2019/09/17/回形遍历/</a> 【请尊重版权】</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2019/09/17/%E5%85%94%E5%AD%90%E7%94%9F%E5%85%94%E5%AD%90%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/17/%E5%85%94%E5%AD%90%E7%94%9F%E5%85%94%E5%AD%90%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="兔子生兔子问题"><a href="#兔子生兔子问题" class="headerlink" title="兔子生兔子问题"></a>兔子生兔子问题</h2><blockquote><p>问：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？</p></blockquote><p>这是<code>斐波那契数列</code>经典问题</p><blockquote><p>答：找规律，如图</p></blockquote><p><img src="/Users/zhangjun/Downloads/WechatIMG85.jpeg" alt="WechatIMG85"></p><blockquote><p>得出结论：</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f(n) = f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)</span><br></pre></td></tr></table></figure><blockquote><p>js实现：</p></blockquote><ul><li>eg1:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n === <span class="number">0</span> || n === <span class="number">1</span>) <span class="keyword">return</span></span><br><span class="line"><span class="keyword">return</span> fn(n<span class="number">-1</span>) + fn(n<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">9</span>) <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><ul><li>eg2:</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tArr</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = []</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span> || i ===<span class="number">1</span>) num.push(<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">else</span> num.push(num[i - <span class="number">1</span>] + num[i - <span class="number">2</span>])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tArr(<span class="number">10</span>) <span class="comment">// [1,1,2,3,5,8,13,21,34,55]</span></span><br></pre></td></tr></table></figure><p>原文=&gt; <a href="http://blog.thephenix.com/2019/09/17/兔子生兔子问题/">http://blog.thephenix.com/2019/09/17/兔子生兔子问题/</a> 【请尊重版权】</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>全栈之路-起跑</title>
      <link href="/2018/07/31/FSR-start/"/>
      <url>/2018/07/31/FSR-start/</url>
      <content type="html"><![CDATA[<blockquote><p>从今天开始记录全栈开发经历</p></blockquote><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><blockquote><p><code>Create-react-app</code>脚手架，<code>react</code> + <code>mobx</code> + <code>antd</code>;</p><p>fetch进行数据请求。</p></blockquote><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><blockquote><p><code>koa</code>为http框架；</p><p><code>koa-body</code>为数据解析中间件；</p><p><code>mysql</code>为数据库；</p><p><code>suquelize</code>为ORM（Object-Relational Mapping，数据库对象关系映射）库。</p></blockquote><p>原文=&gt; <a href="http://blog.thephenix.com/2018/07/31/FSR-start/">http://blog.thephenix.com/2018/07/31/FSR-start/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 全栈之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 说明 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react-router踩坑</title>
      <link href="/2018/07/31/FSRreactRouter/"/>
      <url>/2018/07/31/FSRreactRouter/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>react-router</code>经过很多版本更新，目前是v4版本，坑源自于不同版本的api文档不规范，本文记录<code>react-router-dom</code>V4在项目中的使用。</p><p><a href="https://react-guide.github.io/react-router-cn/docs/guides/basics/RouteConfiguration.html" target="_blank" rel="noopener">React Router文档</a>，<a href="https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/migrating.md" target="_blank" rel="noopener">V2/V3到V4的迁移指南</a></p><blockquote><p>Router.jsx</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App"</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">"./pages/home"</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">"./pages/login"</span>;</span><br><span class="line"><span class="keyword">import</span> Registe <span class="keyword">from</span> <span class="string">"./pages/registe"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;BrowserRouter,Switch,Route,Redirect&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line">                &lt;App&gt;</span><br><span class="line">                    &lt;Switch&gt;</span><br><span class="line">                        &lt;Route exact path='/' component=&#123;Home&#125;/&gt;</span><br><span class="line">                        &lt;Route path='/registe' component=&#123;Registe&#125;/&gt;</span><br><span class="line">                        &lt;Route path='/login' component=&#123;Login&#125;/&gt;</span><br><span class="line">                    &lt;/Switch&gt;</span><br><span class="line">                &lt;/App&gt;</span><br><span class="line">            &lt;/BrowserRouter&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>App.js</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &#123;<span class="comment">/* 路由外的部分 */</span>&#125;  </span><br><span class="line">          &lt;header&gt;</span><br><span class="line">              公共头部</span><br><span class="line">          &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">          &#123;/</span>* 路由嵌套 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">          &#123;this.props.children&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><blockquote><p>脚本跳转</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.props.history.push(PATH)</span><br></pre></td></tr></table></figure><blockquote></blockquote><p>原文=&gt; <a href="http://blog.thephenix.com/2018/07/31/FSRreactRouter/">http://blog.thephenix.com/2018/07/31/FSRreactRouter/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 全栈之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>全栈之路-前后端交互数据格式分析及选用</title>
      <link href="/2018/07/31/FSR-httpdata/"/>
      <url>/2018/07/31/FSR-httpdata/</url>
      <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="http向服务端携带数据的方式"><a href="#http向服务端携带数据的方式" class="headerlink" title="http向服务端携带数据的方式"></a>http向服务端携带数据的方式</h2><blockquote><p>http数据主要是依靠于实体承载的，实体的媒体类型和压缩方式需要前后端有协商。</p></blockquote><h2 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h2><blockquote><p>MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求或响应中实体主体的媒体类型信息。</p></blockquote><p>分析：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">application/x-www-form-urlencoded;charset=UTF-8</span><br><span class="line">[主类型]    /      [子类型]        ;     参数</span><br></pre></td></tr></table></figure><p>eg:</p><ul><li>​    text/html ： HTML格式</li><li>​    text/plain ：纯文本格式      </li><li>​    text/xml ：  XML格式</li><li>​    image/gif ：gif图片格式    </li><li>​    image/jpeg ：jpg图片格式 </li><li><p>​    image/png：png图片格式</p></li><li><p>application/xhtml+xml ：XHTML格式</p></li><li><p>application/xml     ： XML数据格式</p></li><li><p>application/atom+xml  ：Atom XML聚合格式    </p></li><li><p>application/json    ： JSON数据格式</p></li><li><p>application/pdf       ：pdf格式  </p></li><li><p>application/msword  ： Word文档格式</p></li><li><p>application/octet-stream ： 二进制流数据（如常见的文件下载）</p><p><code>键值对form data</code></p></li><li><p>application/x-www-form-urlencoded ： <form enctype="””">中默认的encType，form表单数据被编码为         key/value格式发送到服务器（表单默认的提交数据的格式）</form></p><p><code>上传文件时用到</code></p></li><li><p>multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式</p><p><code>服务端设置下载</code></p></li><li><p>application/force-download</p></li></ul><p><a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">Content-type对照表</a></p><h2 id="fetch、ajax选择"><a href="#fetch、ajax选择" class="headerlink" title="fetch、ajax选择"></a>fetch、ajax选择</h2><blockquote><p>fetch是ajax的替代品，其本身为promise，支持链式调用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://localhost:5757/register1'</span>,&#123;</span><br><span class="line">    method : <span class="string">'post'</span>,</span><br><span class="line">    body : <span class="keyword">new</span> URLSearchParams(&#123;</span><br><span class="line">        a : <span class="string">'aa'</span></span><br><span class="line">    &#125;) || <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        l : [&#123;</span><br><span class="line">            a : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">        &#125;,&#123;</span><br><span class="line">            s : [&#123;</span><br><span class="line">                a : <span class="string">'a'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                b : <span class="string">'b'</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(); <span class="comment">//期望返回数据的格式</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="前后端数据格式分析"><a href="#前后端数据格式分析" class="headerlink" title="前后端数据格式分析"></a>前后端数据格式分析</h2><blockquote><p>通常情况下客户端请求时上送的参数会以以下3中方式传输到服务端。</p></blockquote><h2 id="Query-String-Parameters"><a href="#Query-String-Parameters" class="headerlink" title="Query String Parameters"></a>Query String Parameters</h2><blockquote><p>这种数据传输方式就是在url后面以 <code>?q=qq&amp;w=ww</code> 的方式向服务端发送数据。</p><p>优点：数据传输方便、服务端获取方便。</p><p>缺点：明文、键值对不能表达多维数据</p></blockquote><h2 id="Form-Data"><a href="#Form-Data" class="headerlink" title="Form Data"></a>Form Data</h2><blockquote><p>是传统的也是应用最广的数据编码方式，在网页还是form表单拼凑的年代，这种数据类型作为承载form数据的载体被应用于向服务端上送数据。当然在如今，这种数据类型也应用于很多场景下。</p><p>优点：ajax库和服务端框架支持度高，对于文件传输可以比较方便的利用<code>multipart/form-data</code>的<code>mime</code>类型。</p><p>缺点：键值对不能表达多维数据。</p></blockquote><h3 id="application-x-www-form-urlencoded-默认值"><a href="#application-x-www-form-urlencoded-默认值" class="headerlink" title="application/x-www-form-urlencoded(默认值)"></a>application/x-www-form-urlencoded(默认值)</h3><blockquote><p>from表单数据的默认值，不支持文件上传。</p></blockquote><h2 id="Request-Payload"><a href="#Request-Payload" class="headerlink" title="Request Payload"></a>Request Payload</h2><blockquote><p>数据流传输。</p></blockquote><h3 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h3><blockquote><p>此值，对urlencoded的拓展，表示预期多文件传输，通过参数boundary作为边界盐值。数据为2进制。</p></blockquote><h3 id="text-plain-charset-UTF-8"><a href="#text-plain-charset-UTF-8" class="headerlink" title="text/plain;charset=UTF-8"></a>text/plain;charset=UTF-8</h3><blockquote><p>此值，可以将json字符串作为实体进行传输。</p></blockquote><h1 id="有什么不同？"><a href="#有什么不同？" class="headerlink" title="有什么不同？"></a>有什么不同？</h1><blockquote><p>下面是一个实验流程。服务端选用koa-body转码请求实体。</p></blockquote><p><strong><code>场景1</code> urlencoded方式、一维数据。【可行】</strong></p><p>客户端请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://localhost:5757/register1'</span>,&#123;</span><br><span class="line">    method : <span class="string">'post'</span>,</span><br><span class="line">    body : <span class="keyword">new</span> URLSearchParams(&#123;</span><br><span class="line">        a : <span class="string">'aa'</span>,</span><br><span class="line">        b : <span class="string">'bb'</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(); <span class="comment">//响应主体的期望解析</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/1.jpeg" alt=""></p><p>服务端解析：</p><p><img src="/Users/zhangjun/blog/BlogImages/res/全栈之路/httpdata/2.png" alt=""></p><p><strong><code>场景2</code>urlencoded方式、多维数据。【不可行】</strong></p><p>客户端请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://localhost:5757/register1'</span>,&#123;</span><br><span class="line">    method : <span class="string">'post'</span>,</span><br><span class="line">    body : <span class="keyword">new</span> URLSearchParams(&#123;</span><br><span class="line">        l : [&#123;</span><br><span class="line">                a : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">            s : [&#123;</span><br><span class="line">                a : <span class="string">'a'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                b : <span class="string">'b'</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json(); <span class="comment">//响应主体的期望解析</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/4.png" alt=""></p><p>服务端解析：</p><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/5.png" alt=""></p><p><strong><code>场景3</code>multipart/form-data方式，一维数据上送，本质也是数据流的传输，以键值对解析。【推荐】</strong><br>客户端请求：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'file'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">'file2'</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">'text'</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/7.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> files = <span class="keyword">new</span> FormData();</span><br><span class="line">files.append(<span class="string">'file'</span>,<span class="built_in">document</span>.getElementsByName(<span class="string">'file'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span><br><span class="line">files.append(<span class="string">'file2'</span>,<span class="built_in">document</span>.getElementsByName(<span class="string">'file2'</span>)[<span class="number">0</span>].files[<span class="number">0</span>]);</span><br><span class="line">files.append(<span class="string">'text'</span>,<span class="built_in">document</span>.getElementsByName(<span class="string">'text'</span>)[<span class="number">0</span>].value);</span><br><span class="line"></span><br><span class="line">fetch(<span class="string">'http://localhost:5757/register1'</span>,&#123;</span><br><span class="line">    method : <span class="string">'post'</span>,</span><br><span class="line">    body : files </span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/6.png" alt=""><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//响应实体处理</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line">app.use(body(&#123;</span><br><span class="line">    multipart : <span class="literal">true</span>, <span class="comment">//支持multipart-formdate表单数据解析</span></span><br><span class="line">    formidable : &#123;</span><br><span class="line">        uploadDir : path.join(__dirname,<span class="string">'./public/imgs'</span>), <span class="comment">//指定上传后的目录</span></span><br><span class="line">        keepExtensions : <span class="literal">true</span>,<span class="comment">//保留原来的文件后缀</span></span><br><span class="line">        maxFieldsSize : <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><p>服务端解析：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">res files====&gt; &#123; file: </span><br><span class="line">   File &#123;</span><br><span class="line">     domain: null,</span><br><span class="line">     _events: &#123;&#125;,</span><br><span class="line">     _eventsCount: 0,</span><br><span class="line">     _maxListeners: undefined,</span><br><span class="line">     size: 1284749,</span><br><span class="line">     path: <span class="string">'/Users/zhangjun/workspace/test_website/public/imgs/upload_8b07b9ab83bb834e8548c2f890768909.png'</span>,</span><br><span class="line">     name: <span class="string">'icon.png'</span>,</span><br><span class="line">     <span class="built_in">type</span>: <span class="string">'image/png'</span>,</span><br><span class="line">     <span class="built_in">hash</span>: null,</span><br><span class="line">     lastModifiedDate: 2018-08-01T09:31:34.139Z,</span><br><span class="line">     _writeStream: </span><br><span class="line">      WriteStream &#123;</span><br><span class="line">        _writableState: [Object],</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        domain: null,</span><br><span class="line">        _events: &#123;&#125;,</span><br><span class="line">        _eventsCount: 0,</span><br><span class="line">        _maxListeners: undefined,</span><br><span class="line">        path: <span class="string">'/Users/zhangjun/workspace/test_website/public/imgs/upload_8b07b9ab83bb834e8548c2f890768909.png'</span>,</span><br><span class="line">        fd: null,</span><br><span class="line">        flags: <span class="string">'w'</span>,</span><br><span class="line">        mode: 438,</span><br><span class="line">        start: undefined,</span><br><span class="line">        autoClose: <span class="literal">true</span>,</span><br><span class="line">        pos: undefined,</span><br><span class="line">        bytesWritten: 1284749,</span><br><span class="line">        closed: <span class="literal">true</span> &#125; &#125;,</span><br><span class="line">  file2: </span><br><span class="line">   File &#123;</span><br><span class="line">     domain: null,</span><br><span class="line">     _events: &#123;&#125;,</span><br><span class="line">     _eventsCount: 0,</span><br><span class="line">     _maxListeners: undefined,</span><br><span class="line">     size: 698984,</span><br><span class="line">     path: <span class="string">'/Users/zhangjun/workspace/test_website/public/imgs/upload_8d96d91e701b17ed10a725851f926d21.png'</span>,</span><br><span class="line">     name: <span class="string">'e90a32e832ae79a5ab6aabd6a7c18a4a5c3ccca5625ecf-qDCGgU_fw658.png'</span>,</span><br><span class="line">     <span class="built_in">type</span>: <span class="string">'image/png'</span>,</span><br><span class="line">     <span class="built_in">hash</span>: null,</span><br><span class="line">     lastModifiedDate: 2018-08-01T09:31:34.161Z,</span><br><span class="line">     _writeStream: </span><br><span class="line">      WriteStream &#123;</span><br><span class="line">        _writableState: [Object],</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        domain: null,</span><br><span class="line">        _events: &#123;&#125;,</span><br><span class="line">        _eventsCount: 0,</span><br><span class="line">        _maxListeners: undefined,</span><br><span class="line">        path: <span class="string">'/Users/zhangjun/workspace/test_website/public/imgs/upload_8d96d91e701b17ed10a725851f926d21.png'</span>,</span><br><span class="line">        fd: null,</span><br><span class="line">        flags: <span class="string">'w'</span>,</span><br><span class="line">        mode: 438,</span><br><span class="line">        start: undefined,</span><br><span class="line">        autoClose: <span class="literal">true</span>,</span><br><span class="line">        pos: undefined,</span><br><span class="line">        bytesWritten: 698984,</span><br><span class="line">        closed: <span class="literal">true</span> &#125; &#125; &#125;</span><br><span class="line">res body=====&gt; &#123; text: <span class="string">'adsfasdf'</span> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看出文件会被<code>koa-body</code>注入到<code>ctx.request.files</code>中,其他form数据被<code>koa-body</code>注入到<code>ctx.request.body</code>中。</p></blockquote><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/12.png" alt=""></p><blockquote><p>可以看出文件已经被上传到指定目录下。</p></blockquote><p><strong><code>场景4</code>multipart/form-data方式，多维数据。【不可行】</strong></p><blockquote><p>因为此方式只适用于表单媒体数据的键值关系，所以不能表达多维数据。</p></blockquote><p><strong><code>场景5</code>text/plain;charset=UTF-8方式，纯文本方式。【可行】</strong><br>客户端请求：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://localhost:5757/register1'</span>,&#123;</span><br><span class="line">    method : <span class="string">'post'</span>,</span><br><span class="line">    body : <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;h3&gt;静夜思&lt;/h3&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;床前明月光，疑是地上霜。&lt;/p&gt;</span></span><br><span class="line"><span class="string">            &lt;p&gt;举头望明月，低头思故乡。&lt;/p&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/8.png" alt=""><br>服务端解析：<br><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/9.png" alt=""></p><p><strong><code>场景6</code>text/plain;charset=UTF-8方式，json字符串方式（包括多维数据）。【可行】</strong></p><p>客户端请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'http://localhost:5757/register1'</span>,&#123;</span><br><span class="line">    method : <span class="string">'post'</span>,</span><br><span class="line">    body : <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        l : [&#123;</span><br><span class="line">                a : [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">            &#125;,&#123;</span><br><span class="line">            s : [&#123;</span><br><span class="line">                a : <span class="string">'a'</span></span><br><span class="line">            &#125;,&#123;</span><br><span class="line">                b : <span class="string">'b'</span></span><br><span class="line">            &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.json();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    message.error(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/10.png" alt=""></p><p>服务端解析：</p><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/%E5%85%A8%E6%A0%88%E4%B9%8B%E8%B7%AF/httpdata/11.png" alt=""></p><h1 id="选什么？"><a href="#选什么？" class="headerlink" title="选什么？"></a>选什么？</h1><blockquote><p>1、通常站点内不会采用<code>query string</code>的方式前后端交互，除非一些特殊情况，如果是那样，只需要在特定的Controler中支持就行。</p><p>2、【推荐】选用<code>Request Payload</code>方式进行前后端数据交互，需要上传文件时可以选用<code>multipart/form-data</code>方式.</p><p>3、上传文件也可以通过json字符串携带文件的base64值的方式，这样就可以实现json单一格式的交互方式，只不过<code>koa-body</code>没有针对json中base64的读写操作，需要服务端自己开发读写逻辑。</p></blockquote><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><blockquote><p>针对于现有选型，定位为：</p><p>json字符串做基本数据交互格式；</p><p><code>multipart/form-data</code>做文件上传交互方式；</p><p>服务端从rtx.request.body / rtx.request.files中获取这些数据。</p></blockquote><p>原文=&gt; <a href="http://blog.thephenix.com/2018/07/31/FSR-httpdata/">http://blog.thephenix.com/2018/07/31/FSR-httpdata/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 全栈之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>全栈之路-koa + sequelize=&gt;ORM</title>
      <link href="/2018/07/31/FSRconnectDB/"/>
      <url>/2018/07/31/FSRconnectDB/</url>
      <content type="html"><![CDATA[<h1 id="koa链接mysql数据库"><a href="#koa链接mysql数据库" class="headerlink" title="koa链接mysql数据库"></a>koa链接mysql数据库</h1><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add sequelize mysql2</span><br></pre></td></tr></table></figure><p><code>sequelize</code>是一个ORM(Object-Relational Mapping)库，其依赖<code>mysql2</code>，所以需要安装<code>mysql2</code>。</p><blockquote><p>目录</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── controllers</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── login.js</span><br><span class="line">│   ├── register.js</span><br><span class="line">│   └── test.js</span><br><span class="line">├── middlewares</span><br><span class="line">│   └── response.js</span><br><span class="line">├── public</span><br><span class="line">│   └── imgs</span><br><span class="line">│       ├── upload_00f9bdb7aa75dfd455794547b138aebc.png</span><br><span class="line">│       └── upload_ec0497887318dc78a69503de737570da.png</span><br><span class="line">├── routes</span><br><span class="line">│   └── index.js</span><br><span class="line">├── service</span><br><span class="line">├── tablemodules----------------------------------sequelize维护的modules，是与表对应的。</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── user_info.js</span><br><span class="line">│   └── users.js</span><br><span class="line">├── app.js</span><br><span class="line">├── config.js</span><br><span class="line">├── sequelize.js</span><br><span class="line">├── ws.js</span><br><span class="line">├── nodemon.json</span><br><span class="line">├── package.json</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><blockquote><p>config.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    port: <span class="string">'5757'</span>,</span><br><span class="line">    rootPathname: <span class="string">''</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MySQL 配置，用来存储 session 和用户信息</span></span><br><span class="line"><span class="comment">     * 若使用了腾讯云微信小游戏解决方案</span></span><br><span class="line"><span class="comment">     * 开发环境下，MySQL 的初始密码为您的微信小游戏 appid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    mysql: &#123;</span><br><span class="line">        host: <span class="string">'140.143.230.121'</span>,</span><br><span class="line">        port: <span class="number">3306</span>, <span class="comment">//mysql默认端口</span></span><br><span class="line">        database: <span class="string">'test'</span>,</span><br><span class="line">        username: <span class="string">'root'</span>,</span><br><span class="line">        password: <span class="string">'zhangjun..'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>suquelize链接数据库</p><p>借鉴<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001471955049232be7492e76f514d45a2180e2c224eb7a6000" target="_blank" rel="noopener">廖雪峰系列</a>，<a href="https://github.com/demopark/sequelize-docs-Zh-CN" target="_blank" rel="noopener">sequelize中文文档</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化链接数据库，并创建ORM(Object-Relational Mapping)实例</span></span><br><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config'</span>).mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sequelize = <span class="keyword">new</span> Sequelize(config.database, config.username, config.password, &#123;</span><br><span class="line">    host: config.host,</span><br><span class="line">    dialect: <span class="string">'mysql'</span>,</span><br><span class="line">    pool: &#123;</span><br><span class="line">        max: <span class="number">5</span>,</span><br><span class="line">        min: <span class="number">0</span>,</span><br><span class="line">        idle: <span class="number">30000</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = sequelize;</span><br></pre></td></tr></table></figure><blockquote><p>表模型</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Sequelize = <span class="built_in">require</span>(<span class="string">'sequelize'</span>)</span><br><span class="line"><span class="keyword">const</span> sequelize = <span class="built_in">require</span>(<span class="string">'../sequelize'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = sequelize.define(<span class="string">'users'</span>,&#123;</span><br><span class="line">    id : &#123;</span><br><span class="line">        type: Sequelize.STRING(<span class="number">50</span>),</span><br><span class="line">        primaryKey: <span class="literal">true</span>        <span class="comment">//如果是主键，需要此项描述。</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'user_id'</span> : Sequelize.STRING,</span><br><span class="line">    <span class="string">'user_name'</span> : Sequelize.STRING,</span><br><span class="line">    <span class="string">'sex'</span> : Sequelize.STRING</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    timestamps: <span class="literal">false</span> <span class="comment">//&#123; timestamps: false &#125;是为了关闭Sequelize的自动添加timestamp的功能。</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a>未完待续…</h3><p>原文=&gt; <a href="http://blog.thephenix.com/2018/07/31/FSRconnectDB/">http://blog.thephenix.com/2018/07/31/FSRconnectDB/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 全栈之路 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于create-react-app的文档</title>
      <link href="/2018/07/23/CRA-md/"/>
      <url>/2018/07/23/CRA-md/</url>
      <content type="html"><![CDATA[<p>This project was bootstrapped with <a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">Create React App</a>.</p><p>Below you will find some information on how to perform common tasks.<br><br>You can find the most recent version of this guide <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md" target="_blank" rel="noopener">here</a>.</p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul><li><a href="#updating-to-new-releases">Updating to New Releases</a></li><li><a href="#sending-feedback">Sending Feedback</a></li><li><a href="#folder-structure">Folder Structure</a></li><li><a href="#available-scripts">Available Scripts</a><ul><li><a href="#npm-start">npm start</a></li><li><a href="#npm-test">npm test</a></li><li><a href="#npm-run-build">npm run build</a></li><li><a href="#npm-run-eject">npm run eject</a></li></ul></li><li><a href="#supported-browsers">Supported Browsers</a></li><li><a href="#supported-language-features-and-polyfills">Supported Language Features and Polyfills</a></li><li><a href="#syntax-highlighting-in-the-editor">Syntax Highlighting in the Editor</a></li><li><a href="#displaying-lint-output-in-the-editor">Displaying Lint Output in the Editor</a></li><li><a href="#debugging-in-the-editor">Debugging in the Editor</a></li><li><a href="#formatting-code-automatically">Formatting Code Automatically</a></li><li><a href="#changing-the-page-title">Changing the Page <code>&lt;title&gt;</code></a></li><li><a href="#installing-a-dependency">Installing a Dependency</a></li><li><a href="#importing-a-component">Importing a Component</a></li><li><a href="#code-splitting">Code Splitting</a></li><li><a href="#adding-a-stylesheet">Adding a Stylesheet</a></li><li><a href="#post-processing-css">Post-Processing CSS</a></li><li><a href="#adding-a-css-preprocessor-sass-less-etc">Adding a CSS Preprocessor (Sass, Less etc.)</a></li><li><a href="#adding-images-fonts-and-files">Adding Images, Fonts, and Files</a></li><li><a href="#using-the-public-folder">Using the <code>public</code> Folder</a><ul><li><a href="#changing-the-html">Changing the HTML</a></li><li><a href="#adding-assets-outside-of-the-module-system">Adding Assets Outside of the Module System</a></li><li><a href="#when-to-use-the-public-folder">When to Use the <code>public</code> Folder</a></li></ul></li><li><a href="#using-global-variables">Using Global Variables</a></li><li><a href="#adding-bootstrap">Adding Bootstrap</a><ul><li><a href="#using-a-custom-theme">Using a Custom Theme</a></li></ul></li><li><a href="#adding-flow">Adding Flow</a></li><li><a href="#adding-a-router">Adding a Router</a></li><li><a href="#adding-custom-environment-variables">Adding Custom Environment Variables</a><ul><li><a href="#referencing-environment-variables-in-the-html">Referencing Environment Variables in the HTML</a></li><li><a href="#adding-temporary-environment-variables-in-your-shell">Adding Temporary Environment Variables In Your Shell</a></li><li><a href="#adding-development-environment-variables-in-env">Adding Development Environment Variables In <code>.env</code></a></li></ul></li><li><a href="#can-i-use-decorators">Can I Use Decorators?</a></li><li><a href="#fetching-data-with-ajax-requests">Fetching Data with AJAX Requests</a></li><li><a href="#integrating-with-an-api-backend">Integrating with an API Backend</a><ul><li><a href="#node">Node</a></li><li><a href="#ruby-on-rails">Ruby on Rails</a></li></ul></li><li><a href="#proxying-api-requests-in-development">Proxying API Requests in Development</a><ul><li><a href="#invalid-host-header-errors-after-configuring-proxy">“Invalid Host Header” Errors After Configuring Proxy</a></li><li><a href="#configuring-the-proxy-manually">Configuring the Proxy Manually</a></li><li><a href="#configuring-a-websocket-proxy">Configuring a WebSocket Proxy</a></li></ul></li><li><a href="#using-https-in-development">Using HTTPS in Development</a></li><li><a href="#generating-dynamic-meta-tags-on-the-server">Generating Dynamic <code>&lt;meta&gt;</code> Tags on the Server</a></li><li><a href="#pre-rendering-into-static-html-files">Pre-Rendering into Static HTML Files</a></li><li><a href="#injecting-data-from-the-server-into-the-page">Injecting Data from the Server into the Page</a></li><li><a href="#running-tests">Running Tests</a><ul><li><a href="#filename-conventions">Filename Conventions</a></li><li><a href="#command-line-interface">Command Line Interface</a></li><li><a href="#version-control-integration">Version Control Integration</a></li><li><a href="#writing-tests">Writing Tests</a></li><li><a href="#testing-components">Testing Components</a></li><li><a href="#using-third-party-assertion-libraries">Using Third Party Assertion Libraries</a></li><li><a href="#initializing-test-environment">Initializing Test Environment</a></li><li><a href="#focusing-and-excluding-tests">Focusing and Excluding Tests</a></li><li><a href="#coverage-reporting">Coverage Reporting</a></li><li><a href="#continuous-integration">Continuous Integration</a></li><li><a href="#disabling-jsdom">Disabling jsdom</a></li><li><a href="#snapshot-testing">Snapshot Testing</a></li><li><a href="#editor-integration">Editor Integration</a></li></ul></li><li><a href="#debugging-tests">Debugging Tests</a><ul><li><a href="#debugging-tests-in-chrome">Debugging Tests in Chrome</a></li><li><a href="#debugging-tests-in-visual-studio-code">Debugging Tests in Visual Studio Code</a></li></ul></li><li><a href="#developing-components-in-isolation">Developing Components in Isolation</a><ul><li><a href="#getting-started-with-storybook">Getting Started with Storybook</a></li><li><a href="#getting-started-with-styleguidist">Getting Started with Styleguidist</a></li></ul></li><li><a href="#publishing-components-to-npm">Publishing Components to npm</a></li><li><a href="#making-a-progressive-web-app">Making a Progressive Web App</a><ul><li><a href="#opting-out-of-caching">Opting Out of Caching</a></li><li><a href="#offline-first-considerations">Offline-First Considerations</a></li><li><a href="#progressive-web-app-metadata">Progressive Web App Metadata</a></li></ul></li><li><a href="#analyzing-the-bundle-size">Analyzing the Bundle Size</a></li><li><a href="#deployment">Deployment</a><ul><li><a href="#static-server">Static Server</a></li><li><a href="#other-solutions">Other Solutions</a></li><li><a href="#serving-apps-with-client-side-routing">Serving Apps with Client-Side Routing</a></li><li><a href="#building-for-relative-paths">Building for Relative Paths</a></li><li><a href="#azure">Azure</a></li><li><a href="#firebase">Firebase</a></li><li><a href="#github-pages">GitHub Pages</a></li><li><a href="#heroku">Heroku</a></li><li><a href="#netlify">Netlify</a></li><li><a href="#now">Now</a></li><li><a href="#s3-and-cloudfront">S3 and CloudFront</a></li><li><a href="#surge">Surge</a></li></ul></li><li><a href="#advanced-configuration">Advanced Configuration</a></li><li><a href="#troubleshooting">Troubleshooting</a><ul><li><a href="#npm-start-doesnt-detect-changes"><code>npm start</code> doesn’t detect changes</a></li><li><a href="#npm-test-hangs-on-macos-sierra"><code>npm test</code> hangs on macOS Sierra</a></li><li><a href="#npm-run-build-exits-too-early"><code>npm run build</code> exits too early</a></li><li><a href="#npm-run-build-fails-on-heroku"><code>npm run build</code> fails on Heroku</a></li><li><a href="#npm-run-build-fails-to-minify"><code>npm run build</code> fails to minify</a></li><li><a href="#momentjs-locales-are-missing">Moment.js locales are missing</a></li></ul></li><li><a href="#alternatives-to-ejecting">Alternatives to Ejecting</a></li><li><a href="#something-missing">Something Missing?</a></li></ul><h2 id="Updating-to-New-Releases"><a href="#Updating-to-New-Releases" class="headerlink" title="Updating to New Releases"></a>Updating to New Releases</h2><p>Create React App is divided into two packages:</p><ul><li><code>create-react-app</code> is a global command-line utility that you use to create new projects.</li><li><code>react-scripts</code> is a development dependency in the generated projects (including this one).</li></ul><p>You almost never need to update <code>create-react-app</code> itself: it delegates all the setup to <code>react-scripts</code>.</p><p>When you run <code>create-react-app</code>, it always creates the project with the latest version of <code>react-scripts</code> so you’ll get all the new features and improvements in newly created apps automatically.</p><p>To update an existing project to a new version of <code>react-scripts</code>, <a href="https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md" target="_blank" rel="noopener">open the changelog</a>, find the version you’re currently on (check <code>package.json</code> in this folder if you’re not sure), and apply the migration instructions for the newer versions.</p><p>In most cases bumping the <code>react-scripts</code> version in <code>package.json</code> and running <code>npm install</code> in this folder should be enough, but it’s good to consult the <a href="https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md" target="_blank" rel="noopener">changelog</a> for potential breaking changes.</p><p>We commit to keeping the breaking changes minimal so you can upgrade <code>react-scripts</code> painlessly.</p><h2 id="Sending-Feedback"><a href="#Sending-Feedback" class="headerlink" title="Sending Feedback"></a>Sending Feedback</h2><p>We are always open to <a href="https://github.com/facebookincubator/create-react-app/issues" target="_blank" rel="noopener">your feedback</a>.</p><h2 id="Folder-Structure"><a href="#Folder-Structure" class="headerlink" title="Folder Structure"></a>Folder Structure</h2><p>After creation, your project should look like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">my-app/</span><br><span class="line">  README.md</span><br><span class="line">  node_modules/</span><br><span class="line">  package.json</span><br><span class="line">  public/</span><br><span class="line">    index.html</span><br><span class="line">    favicon.ico</span><br><span class="line">  src/</span><br><span class="line">    App.css</span><br><span class="line">    App.js</span><br><span class="line">    App.test.js</span><br><span class="line">    index.css</span><br><span class="line">    index.js</span><br><span class="line">    logo.svg</span><br></pre></td></tr></table></figure><p>For the project to build, <strong>these files must exist with exact filenames</strong>:</p><ul><li><code>public/index.html</code> is the page template;</li><li><code>src/index.js</code> is the JavaScript entry point.</li></ul><p>You can delete or rename the other files.</p><p>You may create subdirectories inside <code>src</code>. For faster rebuilds, only files inside <code>src</code> are processed by Webpack.<br><br>You need to <strong>put any JS and CSS files inside <code>src</code></strong>, otherwise Webpack won’t see them.</p><p>Only files inside <code>public</code> can be used from <code>public/index.html</code>.<br><br>Read instructions below for using assets from JavaScript and HTML.</p><p>You can, however, create more top-level directories.<br><br>They will not be included in the production build so you can use them for things like documentation.</p><h2 id="Available-Scripts"><a href="#Available-Scripts" class="headerlink" title="Available Scripts"></a>Available Scripts</h2><p>In the project directory, you can run:</p><h3 id="npm-start"><a href="#npm-start" class="headerlink" title="npm start"></a><code>npm start</code></h3><p>Runs the app in the development mode.<br><br>Open <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> to view it in the browser.</p><p>The page will reload if you make edits.<br><br>You will also see any lint errors in the console.</p><h3 id="npm-test"><a href="#npm-test" class="headerlink" title="npm test"></a><code>npm test</code></h3><p>Launches the test runner in the interactive watch mode.<br><br>See the section about <a href="#running-tests">running tests</a> for more information.</p><h3 id="npm-run-build"><a href="#npm-run-build" class="headerlink" title="npm run build"></a><code>npm run build</code></h3><p>Builds the app for production to the <code>build</code> folder.<br><br>It correctly bundles React in production mode and optimizes the build for the best performance.</p><p>The build is minified and the filenames include the hashes.<br><br>Your app is ready to be deployed!</p><p>See the section about <a href="#deployment">deployment</a> for more information.</p><h3 id="npm-run-eject"><a href="#npm-run-eject" class="headerlink" title="npm run eject"></a><code>npm run eject</code></h3><p><strong>Note: this is a one-way operation. Once you <code>eject</code>, you can’t go back!</strong></p><p>If you aren’t satisfied with the build tool and configuration choices, you can <code>eject</code> at any time. This command will remove the single build dependency from your project.</p><p>Instead, it will copy all the configuration files and the transitive dependencies (Webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except <code>eject</code> will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.</p><p>You don’t have to ever use <code>eject</code>. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.</p><h2 id="Supported-Browsers"><a href="#Supported-Browsers" class="headerlink" title="Supported Browsers"></a>Supported Browsers</h2><p>By default, the generated project uses the latest version of React.</p><p>You can refer <a href="https://reactjs.org/docs/react-dom.html#browser-support" target="_blank" rel="noopener">to the React documentation</a> for more information about supported browsers.</p><h2 id="Supported-Language-Features-and-Polyfills"><a href="#Supported-Language-Features-and-Polyfills" class="headerlink" title="Supported Language Features and Polyfills"></a>Supported Language Features and Polyfills</h2><p>This project supports a superset of the latest JavaScript standard.<br><br>In addition to <a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">ES6</a> syntax features, it also supports:</p><ul><li><a href="https://github.com/rwaldron/exponentiation-operator" target="_blank" rel="noopener">Exponentiation Operator</a> (ES2016).</li><li><a href="https://github.com/tc39/ecmascript-asyncawait" target="_blank" rel="noopener">Async/await</a> (ES2017).</li><li><a href="https://github.com/sebmarkbage/ecmascript-rest-spread" target="_blank" rel="noopener">Object Rest/Spread Properties</a> (stage 3 proposal).</li><li><a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">Dynamic import()</a> (stage 3 proposal)</li><li><a href="https://github.com/tc39/proposal-class-public-fields" target="_blank" rel="noopener">Class Fields and Static Properties</a> (part of stage 3 proposal).</li><li><a href="https://facebook.github.io/react/docs/introducing-jsx.html" target="_blank" rel="noopener">JSX</a> and <a href="https://flowtype.org/" target="_blank" rel="noopener">Flow</a> syntax.</li></ul><p>Learn more about <a href="https://babeljs.io/docs/plugins/#presets-stage-x-experimental-presets-" target="_blank" rel="noopener">different proposal stages</a>.</p><p>While we recommend using experimental proposals with some caution, Facebook heavily uses these features in the product code, so we intend to provide <a href="https://medium.com/@cpojer/effective-javascript-codemods-5a6686bb46fb" target="_blank" rel="noopener">codemods</a> if any of these proposals change in the future.</p><p>Note that <strong>the project only includes a few ES6 <a href="https://en.wikipedia.org/wiki/Polyfill" target="_blank" rel="noopener">polyfills</a></strong>:</p><ul><li><a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener"><code>Object.assign()</code></a> via <a href="https://github.com/sindresorhus/object-assign" target="_blank" rel="noopener"><code>object-assign</code></a>.</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> via <a href="https://github.com/then/promise" target="_blank" rel="noopener"><code>promise</code></a>.</li><li><a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API" target="_blank" rel="noopener"><code>fetch()</code></a> via <a href="https://github.com/github/fetch" target="_blank" rel="noopener"><code>whatwg-fetch</code></a>.</li></ul><p>If you use any other ES6+ features that need <strong>runtime support</strong> (such as <code>Array.from()</code> or <code>Symbol</code>), make sure you are including the appropriate polyfills manually, or that the browsers you are targeting already support them.</p><p>Also note that using some newer syntax features like <code>for...of</code> or <code>[...nonArrayValue]</code> causes Babel to emit code that depends on ES6 runtime features and might not work without a polyfill. When in doubt, use <a href="https://babeljs.io/repl/" target="_blank" rel="noopener">Babel REPL</a> to see what any specific syntax compiles down to.</p><h2 id="Syntax-Highlighting-in-the-Editor"><a href="#Syntax-Highlighting-in-the-Editor" class="headerlink" title="Syntax Highlighting in the Editor"></a>Syntax Highlighting in the Editor</h2><p>To configure the syntax highlighting in your favorite text editor, head to the <a href="https://babeljs.io/docs/editors" target="_blank" rel="noopener">relevant Babel documentation page</a> and follow the instructions. Some of the most popular editors are covered.</p><h2 id="Displaying-Lint-Output-in-the-Editor"><a href="#Displaying-Lint-Output-in-the-Editor" class="headerlink" title="Displaying Lint Output in the Editor"></a>Displaying Lint Output in the Editor</h2><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.2.0" target="_blank" rel="noopener">`react-scripts@0.2.0</a>` and higher.<br><br>It also only works with npm 3 or higher.</p></blockquote><p>Some editors, including Sublime Text, Atom, and Visual Studio Code, provide plugins for ESLint.</p><p>They are not required for linting. You should see the linter output right in your terminal as well as the browser console. However, if you prefer the lint results to appear right in your editor, there are some extra steps you can do.</p><p>You would need to install an ESLint plugin for your editor first. Then, add a file called <code>.eslintrc</code> to the project root:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"extends"</span>: <span class="string">"react-app"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now your editor should report the linting warnings.</p><p>Note that even if you edit your <code>.eslintrc</code> file further, these changes will <strong>only affect the editor integration</strong>. They won’t affect the terminal and in-browser lint output. This is because Create React App intentionally provides a minimal set of rules that find common mistakes.</p><p>If you want to enforce a coding style for your project, consider using <a href="https://github.com/jlongster/prettier" target="_blank" rel="noopener">Prettier</a> instead of ESLint style rules.</p><h2 id="Debugging-in-the-Editor"><a href="#Debugging-in-the-Editor" class="headerlink" title="Debugging in the Editor"></a>Debugging in the Editor</h2><p><strong>This feature is currently only supported by <a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a> and <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a>.</strong></p><p>Visual Studio Code and WebStorm support debugging out of the box with Create React App. This enables you as a developer to write and debug your React code without leaving the editor, and most importantly it enables you to have a continuous development workflow, where context switching is minimal, as you don’t have to switch between tools.</p><h3 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h3><p>You would need to have the latest version of <a href="https://code.visualstudio.com" target="_blank" rel="noopener">VS Code</a> and VS Code <a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome" target="_blank" rel="noopener">Chrome Debugger Extension</a> installed.</p><p>Then add the block below to your <code>launch.json</code> file and put it inside the <code>.vscode</code> folder in your app’s root directory.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">  <span class="attr">"configurations"</span>: [&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Chrome"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"chrome"</span>,</span><br><span class="line">    <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://localhost:3000"</span>,</span><br><span class="line">    <span class="attr">"webRoot"</span>: <span class="string">"$&#123;workspaceRoot&#125;/src"</span>,</span><br><span class="line">    <span class="attr">"sourceMapPathOverrides"</span>: &#123;</span><br><span class="line">      <span class="attr">"webpack:///src/*"</span>: <span class="string">"$&#123;webRoot&#125;/*"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Note: the URL may be different if you’ve made adjustments via the <a href="#advanced-configuration">HOST or PORT environment variables</a>.</p></blockquote><p>Start your app by running <code>npm start</code>, and start debugging in VS Code by pressing <code>F5</code> or by clicking the green debug icon. You can now write code, set breakpoints, make changes to the code, and debug your newly modified code—all from your editor.</p><p>Having problems with VS Code Debugging? Please see their <a href="https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#troubleshooting" target="_blank" rel="noopener">troubleshooting guide</a>.</p><h3 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h3><p>You would need to have <a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="noopener">WebStorm</a> and <a href="https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji" target="_blank" rel="noopener">JetBrains IDE Support</a> Chrome extension installed.</p><p>In the WebStorm menu <code>Run</code> select <code>Edit Configurations...</code>. Then click <code>+</code> and select <code>JavaScript Debug</code>. Paste <code>http://localhost:3000</code> into the URL field and save the configuration.</p><blockquote><p>Note: the URL may be different if you’ve made adjustments via the <a href="#advanced-configuration">HOST or PORT environment variables</a>.</p></blockquote><p>Start your app by running <code>npm start</code>, then press <code>^D</code> on macOS or <code>F9</code> on Windows and Linux or click the green debug icon to start debugging in WebStorm.</p><p>The same way you can debug your application in IntelliJ IDEA Ultimate, PhpStorm, PyCharm Pro, and RubyMine. </p><h2 id="Formatting-Code-Automatically"><a href="#Formatting-Code-Automatically" class="headerlink" title="Formatting Code Automatically"></a>Formatting Code Automatically</h2><p>Prettier is an opinionated code formatter with support for JavaScript, CSS and JSON. With Prettier you can format the code you write automatically to ensure a code style within your project. See the <a href="https://github.com/prettier/prettier" target="_blank" rel="noopener">Prettier’s GitHub page</a> for more information, and look at this <a href="https://prettier.github.io/prettier/" target="_blank" rel="noopener">page to see it in action</a>.</p><p>To format our code whenever we make a commit in git, we need to install the following dependencies:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save husky lint-staged prettier</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add husky lint-staged prettier</span><br></pre></td></tr></table></figure><ul><li><code>husky</code> makes it easy to use githooks as if they are npm scripts.</li><li><code>lint-staged</code> allows us to run scripts on staged files in git. See this <a href="https://medium.com/@okonetchnikov/make-linting-great-again-f3890e1ad6b8" target="_blank" rel="noopener">blog post about lint-staged to learn more about it</a>.</li><li><code>prettier</code> is the JavaScript formatter we will run before commits.</li></ul><p>Now we can make sure every file is formatted correctly by adding a few lines to the <code>package.json</code> in the project root.</p><p>Add the following line to <code>scripts</code> section:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+   "precommit": "lint-staged",</span></span><br><span class="line">    "start": "react-scripts start",</span><br><span class="line">    "build": "react-scripts build",</span><br></pre></td></tr></table></figure><p>Next we add a ‘lint-staged’ field to the <code>package.json</code>, for example:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  "dependencies": &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+ "lint-staged": &#123;</span></span><br><span class="line"><span class="addition">+   "src/**/*.&#123;js,jsx,json,css&#125;": [</span></span><br><span class="line"><span class="addition">+     "prettier --single-quote --write",</span></span><br><span class="line"><span class="addition">+     "git add"</span></span><br><span class="line"><span class="addition">+   ]</span></span><br><span class="line"><span class="addition">+ &#125;,</span></span><br><span class="line">  "scripts": &#123;</span><br></pre></td></tr></table></figure><p>Now, whenever you make a commit, Prettier will format the changed files automatically. You can also run <code>./node_modules/.bin/prettier --single-quote --write &quot;src/**/*.{js,jsx,json,css}&quot;</code> to format your entire project for the first time.</p><p>Next you might want to integrate Prettier in your favorite editor. Read the section on <a href="https://prettier.io/docs/en/editors.html" target="_blank" rel="noopener">Editor Integration</a> on the Prettier GitHub page.</p><h2 id="Changing-the-Page-lt-title-gt"><a href="#Changing-the-Page-lt-title-gt" class="headerlink" title="Changing the Page &lt;title&gt;"></a>Changing the Page <code>&lt;title&gt;</code></h2><p>You can find the source HTML file in the <code>public</code> folder of the generated project. You may edit the <code>&lt;title&gt;</code> tag in it to change the title from “React App” to anything else.</p><p>Note that normally you wouldn’t edit files in the <code>public</code> folder very often. For example, <a href="#adding-a-stylesheet">adding a stylesheet</a> is done without touching the HTML.</p><p>If you need to dynamically update the page title based on the content, you can use the browser <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/title" target="_blank" rel="noopener"><code>document.title</code></a> API. For more complex scenarios when you want to change the title from React components, you can use <a href="https://github.com/nfl/react-helmet" target="_blank" rel="noopener">React Helmet</a>, a third party library.</p><p>If you use a custom server for your app in production and want to modify the title before it gets sent to the browser, you can follow advice in <a href="#generating-dynamic-meta-tags-on-the-server">this section</a>. Alternatively, you can pre-build each page as a static HTML file which then loads the JavaScript bundle, which is covered <a href="#pre-rendering-into-static-html-files">here</a>.</p><h2 id="Installing-a-Dependency"><a href="#Installing-a-Dependency" class="headerlink" title="Installing a Dependency"></a>Installing a Dependency</h2><p>The generated project includes React and ReactDOM as dependencies. It also includes a set of scripts used by Create React App as a development dependency. You may install other dependencies (for example, React Router) with <code>npm</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router</span><br></pre></td></tr></table></figure><p>This works for any library, not just <code>react-router</code>.</p><h2 id="Importing-a-Component"><a href="#Importing-a-Component" class="headerlink" title="Importing a Component"></a>Importing a Component</h2><p>This project setup supports ES6 modules thanks to Babel.<br><br>While you can still use <code>require()</code> and <code>module.exports</code>, we encourage you to use <a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener"><code>import</code> and <code>export</code></a> instead.</p><p>For example:</p><h3 id="Button-js"><a href="#Button-js" class="headerlink" title="Button.js"></a><code>Button.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Button; <span class="comment">// Don’t forget to use export default!</span></span><br></pre></td></tr></table></figure><h3 id="DangerButton-js"><a href="#DangerButton-js" class="headerlink" title="DangerButton.js"></a><code>DangerButton.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./Button'</span>; <span class="comment">// Import a component from another file</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DangerButton</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">color</span>=<span class="string">"red"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default DangerButton;</span></span><br></pre></td></tr></table></figure><p>Be aware of the <a href="http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281" target="_blank" rel="noopener">difference between default and named exports</a>. It is a common source of mistakes.</p><p>We suggest that you stick to using default imports and exports when a module only exports a single thing (for example, a component). That’s what you get when you use <code>export default Button</code> and <code>import Button from &#39;./Button&#39;</code>.</p><p>Named exports are useful for utility modules that export several functions. A module may have at most one default export and as many named exports as you like.</p><p>Learn more about ES6 modules:</p><ul><li><a href="http://stackoverflow.com/questions/36795819/react-native-es-6-when-should-i-use-curly-braces-for-import/36796281#36796281" target="_blank" rel="noopener">When to use the curly braces?</a></li><li><a href="http://exploringjs.com/es6/ch_modules.html" target="_blank" rel="noopener">Exploring ES6: Modules</a></li><li><a href="https://leanpub.com/understandinges6/read#leanpub-auto-encapsulating-code-with-modules" target="_blank" rel="noopener">Understanding ES6: Modules</a></li></ul><h2 id="Code-Splitting"><a href="#Code-Splitting" class="headerlink" title="Code Splitting"></a>Code Splitting</h2><p>Instead of downloading the entire app before users can use it, code splitting allows you to split your code into small chunks which you can then load on demand.</p><p>This project setup supports code splitting via <a href="http://2ality.com/2017/01/import-operator.html#loading-code-on-demand" target="_blank" rel="noopener">dynamic <code>import()</code></a>. Its <a href="https://github.com/tc39/proposal-dynamic-import" target="_blank" rel="noopener">proposal</a> is in stage 3. The <code>import()</code> function-like form takes the module name as an argument and returns a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener"><code>Promise</code></a> which always resolves to the namespace object of the module.</p><p>Here is an example:</p><h3 id="moduleA-js"><a href="#moduleA-js" class="headerlink" title="moduleA.js"></a><code>moduleA.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = <span class="string">'Hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; moduleA &#125;;</span><br></pre></td></tr></table></figure><h3 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a><code>App.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">'./moduleA'</span>)</span><br><span class="line">      .then(<span class="function">(<span class="params">&#123; moduleA &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Use moduleA</span></span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Handle failure</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.handleClick&#125;&gt;Load&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>This will make <code>moduleA.js</code> and all its unique dependencies as a separate chunk that only loads after the user clicks the ‘Load’ button.</p><p>You can also use it with <code>async</code> / <code>await</code> syntax if you prefer it.</p><h3 id="With-React-Router"><a href="#With-React-Router" class="headerlink" title="With React Router"></a>With React Router</h3><p>If you are using React Router check out <a href="http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html" target="_blank" rel="noopener">this tutorial</a> on how to use code splitting with it. You can find the companion GitHub repository <a href="https://github.com/AnomalyInnovations/serverless-stack-demo-client/tree/code-splitting-in-create-react-app" target="_blank" rel="noopener">here</a>.</p><p>Also check out the <a href="https://reactjs.org/docs/code-splitting.html" target="_blank" rel="noopener">Code Splitting</a> section in React documentation.</p><h2 id="Adding-a-Stylesheet"><a href="#Adding-a-Stylesheet" class="headerlink" title="Adding a Stylesheet"></a>Adding a Stylesheet</h2><p>This project setup uses <a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a> for handling all assets. Webpack offers a custom way of “extending” the concept of <code>import</code> beyond JavaScript. To express that a JavaScript file depends on a CSS file, you need to <strong>import the CSS from the JavaScript file</strong>:</p><h3 id="Button-css"><a href="#Button-css" class="headerlink" title="Button.css"></a><code>Button.css</code></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Button</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Button-js-1"><a href="#Button-js-1" class="headerlink" title="Button.js"></a><code>Button.js</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./Button.css'</span>; <span class="comment">// Tell Webpack that Button.js uses these styles</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// You can use them as regular CSS styles</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"Button"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>This is not required for React</strong> but many people find this feature convenient. You can read about the benefits of this approach <a href="https://medium.com/seek-ui-engineering/block-element-modifying-your-javascript-components-d7f99fcab52b" target="_blank" rel="noopener">here</a>. However you should be aware that this makes your code less portable to other build tools and environments than Webpack.</p><p>In development, expressing dependencies this way allows your styles to be reloaded on the fly as you edit them. In production, all CSS files will be concatenated into a single minified <code>.css</code> file in the build output.</p><p>If you are concerned about using Webpack-specific semantics, you can put all your CSS right into <code>src/index.css</code>. It would still be imported from <code>src/index.js</code>, but you could always remove that import if you later migrate to a different build tool.</p><h2 id="Post-Processing-CSS"><a href="#Post-Processing-CSS" class="headerlink" title="Post-Processing CSS"></a>Post-Processing CSS</h2><p>This project setup minifies your CSS and adds vendor prefixes to it automatically through <a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer</a> so you don’t need to worry about it.</p><p>For example, this:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>becomes this:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">display</span>: -ms-flexbox;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: horizontal;</span><br><span class="line">  <span class="attribute">-webkit-box-direction</span>: normal;</span><br><span class="line">      <span class="attribute">-ms-flex-direction</span>: row;</span><br><span class="line">          <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">-webkit-box-align</span>: center;</span><br><span class="line">      <span class="attribute">-ms-flex-align</span>: center;</span><br><span class="line">          <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If you need to disable autoprefixing for some reason, <a href="https://github.com/postcss/autoprefixer#disabling" target="_blank" rel="noopener">follow this section</a>.</p><h2 id="Adding-a-CSS-Preprocessor-Sass-Less-etc"><a href="#Adding-a-CSS-Preprocessor-Sass-Less-etc" class="headerlink" title="Adding a CSS Preprocessor (Sass, Less etc.)"></a>Adding a CSS Preprocessor (Sass, Less etc.)</h2><p>Generally, we recommend that you don’t reuse the same CSS classes across different components. For example, instead of using a <code>.Button</code> CSS class in <code>&lt;AcceptButton&gt;</code> and <code>&lt;RejectButton&gt;</code> components, we recommend creating a <code>&lt;Button&gt;</code> component with its own <code>.Button</code> styles, that both <code>&lt;AcceptButton&gt;</code> and <code>&lt;RejectButton&gt;</code> can render (but <a href="https://facebook.github.io/react/docs/composition-vs-inheritance.html" target="_blank" rel="noopener">not inherit</a>).</p><p>Following this rule often makes CSS preprocessors less useful, as features like mixins and nesting are replaced by component composition. You can, however, integrate a CSS preprocessor if you find it valuable. In this walkthrough, we will be using Sass, but you can also use Less, or another alternative.</p><p>First, let’s install the command-line interface for Sass:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save node-sass-chokidar</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add node-sass-chokidar</span><br></pre></td></tr></table></figure><p>Then in <code>package.json</code>, add the following lines to <code>scripts</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   "scripts": &#123;</span><br><span class="line"><span class="addition">+    "build-css": "node-sass-chokidar src/ -o src/",</span></span><br><span class="line"><span class="addition">+    "watch-css": "npm run build-css &amp;&amp; node-sass-chokidar src/ -o src/ --watch --recursive",</span></span><br><span class="line">     "start": "react-scripts start",</span><br><span class="line">     "build": "react-scripts build",</span><br><span class="line">     "test": "react-scripts test --env=jsdom",</span><br></pre></td></tr></table></figure><blockquote><p>Note: To use a different preprocessor, replace <code>build-css</code> and <code>watch-css</code> commands according to your preprocessor’s documentation.</p></blockquote><p>Now you can rename <code>src/App.css</code> to <code>src/App.scss</code> and run <code>npm run watch-css</code>. The watcher will find every Sass file in <code>src</code> subdirectories, and create a corresponding CSS file next to it, in our case overwriting <code>src/App.css</code>. Since <code>src/App.js</code> still imports <code>src/App.css</code>, the styles become a part of your application. You can now edit <code>src/App.scss</code>, and <code>src/App.css</code> will be regenerated.</p><p>To share variables between Sass files, you can use Sass imports. For example, <code>src/App.scss</code> and other component style files could include <code>@import &quot;./shared.scss&quot;;</code> with variable definitions.</p><p>To enable importing files without using relative paths, you can add the  <code>--include-path</code> option to the command in <code>package.json</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;build-css&quot;: &quot;node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/&quot;,</span><br><span class="line">&quot;watch-css&quot;: &quot;npm run build-css &amp;&amp; node-sass-chokidar --include-path ./src --include-path ./node_modules src/ -o src/ --watch --recursive&quot;,</span><br></pre></td></tr></table></figure><p>This will allow you to do imports like</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'styles/_colors.scss'</span>; <span class="comment">// assuming a styles directory under src/</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">'nprogress/nprogress'</span>; <span class="comment">// importing a css file from the nprogress node module</span></span><br></pre></td></tr></table></figure><p>At this point you might want to remove all CSS files from the source control, and add <code>src/**/*.css</code> to your <code>.gitignore</code> file. It is generally a good practice to keep the build products outside of the source control.</p><p>As a final step, you may find it convenient to run <code>watch-css</code> automatically with <code>npm start</code>, and run <code>build-css</code> as a part of <code>npm run build</code>. You can use the <code>&amp;&amp;</code> operator to execute two scripts sequentially. However, there is no cross-platform way to run two scripts in parallel, so we will install a package for this:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save npm-run-all</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add npm-run-all</span><br></pre></td></tr></table></figure><p>Then we can change <code>start</code> and <code>build</code> scripts to include the CSS preprocessor commands:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   "scripts": &#123;</span><br><span class="line">     "build-css": "node-sass-chokidar src/ -o src/",</span><br><span class="line">     "watch-css": "npm run build-css &amp;&amp; node-sass-chokidar src/ -o src/ --watch --recursive",</span><br><span class="line"><span class="deletion">-    "start": "react-scripts start",</span></span><br><span class="line"><span class="deletion">-    "build": "react-scripts build",</span></span><br><span class="line"><span class="addition">+    "start-js": "react-scripts start",</span></span><br><span class="line"><span class="addition">+    "start": "npm-run-all -p watch-css start-js",</span></span><br><span class="line"><span class="addition">+    "build-js": "react-scripts build",</span></span><br><span class="line"><span class="addition">+    "build": "npm-run-all build-css build-js",</span></span><br><span class="line">     "test": "react-scripts test --env=jsdom",</span><br><span class="line">     "eject": "react-scripts eject"</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>Now running <code>npm start</code> and <code>npm run build</code> also builds Sass files.</p><p><strong>Why <code>node-sass-chokidar</code>?</strong></p><p><code>node-sass</code> has been reported as having the following issues:</p><ul><li><p><code>node-sass --watch</code> has been reported to have <em>performance issues</em> in certain conditions when used in a virtual machine or with docker.</p></li><li><p>Infinite styles compiling <a href="https://github.com/facebookincubator/create-react-app/issues/1939" target="_blank" rel="noopener">#1939</a></p></li><li><p><code>node-sass</code> has been reported as having issues with detecting new files in a directory <a href="https://github.com/sass/node-sass/issues/1891" target="_blank" rel="noopener">#1891</a></p><p><code>node-sass-chokidar</code> is used here as it addresses these issues.</p></li></ul><h2 id="Adding-Images-Fonts-and-Files"><a href="#Adding-Images-Fonts-and-Files" class="headerlink" title="Adding Images, Fonts, and Files"></a>Adding Images, Fonts, and Files</h2><p>With Webpack, using static assets like images and fonts works similarly to CSS.</p><p>You can <strong><code>import</code> a file right in a JavaScript module</strong>. This tells Webpack to include that file in the bundle. Unlike CSS imports, importing a file gives you a string value. This value is the final path you can reference in your code, e.g. as the <code>src</code> attribute of an image or the <code>href</code> of a link to a PDF.</p><p>To reduce the number of requests to the server, importing images that are less than 10,000 bytes returns a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="noopener">data URI</a> instead of a path. This applies to the following file extensions: bmp, gif, jpg, jpeg, and png. SVG files are excluded due to <a href="https://github.com/facebookincubator/create-react-app/issues/1153" target="_blank" rel="noopener">#1153</a>.</p><p>Here is an example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.png'</span>; <span class="comment">// Tell Webpack this JS file uses this image</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(logo); <span class="comment">// /logo.84287d09.png</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Header</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Import result is the URL of your image</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;logo&#125;</span> <span class="attr">alt</span>=<span class="string">"Logo"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default Header;</span></span><br></pre></td></tr></table></figure><p>This ensures that when the project is built, Webpack will correctly move the images into the build folder, and provide us with correct paths.</p><p>This works in CSS too:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(./logo.png);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Webpack finds all relative module references in CSS (they start with <code>./</code>) and replaces them with the final paths from the compiled bundle. If you make a typo or accidentally delete an important file, you will see a compilation error, just like when you import a non-existent JavaScript module. The final filenames in the compiled bundle are generated by Webpack from content hashes. If the file content changes in the future, Webpack will give it a different name in production so you don’t need to worry about long-term caching of assets.</p><p>Please be advised that this is also a custom feature of Webpack.</p><p><strong>It is not required for React</strong> but many people enjoy it (and React Native uses a similar mechanism for images).<br><br>An alternative way of handling static assets is described in the next section.</p><h2 id="Using-the-public-Folder"><a href="#Using-the-public-Folder" class="headerlink" title="Using the public Folder"></a>Using the <code>public</code> Folder</h2><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.5.0" target="_blank" rel="noopener">`react-scripts@0.5.0</a>` and higher.</p></blockquote><h3 id="Changing-the-HTML"><a href="#Changing-the-HTML" class="headerlink" title="Changing the HTML"></a>Changing the HTML</h3><p>The <code>public</code> folder contains the HTML file so you can tweak it, for example, to <a href="#changing-the-page-title">set the page title</a>.<br>The <code>&lt;script&gt;</code> tag with the compiled code will be added to it automatically during the build process.</p><h3 id="Adding-Assets-Outside-of-the-Module-System"><a href="#Adding-Assets-Outside-of-the-Module-System" class="headerlink" title="Adding Assets Outside of the Module System"></a>Adding Assets Outside of the Module System</h3><p>You can also add other assets to the <code>public</code> folder.</p><p>Note that we normally encourage you to <code>import</code> assets in JavaScript files instead.<br>For example, see the sections on <a href="#adding-a-stylesheet">adding a stylesheet</a> and <a href="#adding-images-fonts-and-files">adding images and fonts</a>.<br>This mechanism provides a number of benefits:</p><ul><li>Scripts and stylesheets get minified and bundled together to avoid extra network requests.</li><li>Missing files cause compilation errors instead of 404 errors for your users.</li><li>Result filenames include content hashes so you don’t need to worry about browsers caching their old versions.</li></ul><p>However there is an <strong>escape hatch</strong> that you can use to add an asset outside of the module system.</p><p>If you put a file into the <code>public</code> folder, it will <strong>not</strong> be processed by Webpack. Instead it will be copied into the build folder untouched.   To reference assets in the <code>public</code> folder, you need to use a special variable called <code>PUBLIC_URL</code>.</p><p>Inside <code>index.html</code>, you can use it like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"%PUBLIC_URL%/favicon.ico"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Only files inside the <code>public</code> folder will be accessible by <code>%PUBLIC_URL%</code> prefix. If you need to use a file from <code>src</code> or <code>node_modules</code>, you’ll have to copy it there to explicitly specify your intention to make this file a part of the build.</p><p>When you run <code>npm run build</code>, Create React App will substitute <code>%PUBLIC_URL%</code> with a correct absolute path so your project works even if you use client-side routing or host it at a non-root URL.</p><p>In JavaScript code, you can use <code>process.env.PUBLIC_URL</code> for similar purposes:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="comment">// Note: this is an escape hatch and should be used sparingly!</span></span><br><span class="line">  <span class="comment">// Normally we recommend using `import` for getting asset URLs</span></span><br><span class="line">  <span class="comment">// as described in “Adding Images and Fonts” above this section.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;process.env.PUBLIC_URL</span> + '/<span class="attr">img</span>/<span class="attr">logo.png</span>'&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>Keep in mind the downsides of this approach:</p><ul><li>None of the files in <code>public</code> folder get post-processed or minified.</li><li>Missing files will not be called at compilation time, and will cause 404 errors for your users.</li><li>Result filenames won’t include content hashes so you’ll need to add query arguments or rename them every time they change.</li></ul><h3 id="When-to-Use-the-public-Folder"><a href="#When-to-Use-the-public-Folder" class="headerlink" title="When to Use the public Folder"></a>When to Use the <code>public</code> Folder</h3><p>Normally we recommend importing <a href="#adding-a-stylesheet">stylesheets</a>, <a href="#adding-images-fonts-and-files">images, and fonts</a> from JavaScript.<br>The <code>public</code> folder is useful as a workaround for a number of less common cases:</p><ul><li>You need a file with a specific name in the build output, such as <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="noopener"><code>manifest.webmanifest</code></a>.</li><li>You have thousands of images and need to dynamically reference their paths.</li><li>You want to include a small script like <a href="http://github.hubspot.com/pace/docs/welcome/" target="_blank" rel="noopener"><code>pace.js</code></a> outside of the bundled code.</li><li>Some library may be incompatible with Webpack and you have no other option but to include it as a <code>&lt;script&gt;</code> tag.</li></ul><p>Note that if you add a <code>&lt;script&gt;</code> that declares global variables, you also need to read the next section on using them.</p><h2 id="Using-Global-Variables"><a href="#Using-Global-Variables" class="headerlink" title="Using Global Variables"></a>Using Global Variables</h2><p>When you include a script in the HTML file that defines global variables and try to use one of these variables in the code, the linter will complain because it cannot see the definition of the variable.</p><p>You can avoid this by reading the global variable explicitly from the <code>window</code> object, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $ = <span class="built_in">window</span>.$;</span><br></pre></td></tr></table></figure><p>This makes it obvious you are using a global variable intentionally rather than because of a typo.</p><p>Alternatively, you can force the linter to ignore any line by adding <code>// eslint-disable-line</code> after it.</p><h2 id="Adding-Bootstrap"><a href="#Adding-Bootstrap" class="headerlink" title="Adding Bootstrap"></a>Adding Bootstrap</h2><p>You don’t have to use <a href="https://react-bootstrap.github.io" target="_blank" rel="noopener">React Bootstrap</a> together with React but it is a popular library for integrating Bootstrap with React apps. If you need it, you can integrate it with Create React App by following these steps:</p><p>Install React Bootstrap and Bootstrap from npm. React Bootstrap does not include Bootstrap CSS so this needs to be installed as well:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-bootstrap bootstrap@3</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-bootstrap bootstrap@3</span><br></pre></td></tr></table></figure><p>Import Bootstrap CSS and optionally Bootstrap theme CSS in the beginning of your <figure class="highlight plain"><figcaption><span>file:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">import &apos;bootstrap/dist/css/bootstrap.css&apos;;</span><br><span class="line">import &apos;bootstrap/dist/css/bootstrap-theme.css&apos;;</span><br><span class="line">// Put any other imports below so that CSS from your</span><br><span class="line">// components takes precedence over default styles.</span><br></pre></td></tr></table></figure></p><p>Import required React Bootstrap components within <figure class="highlight plain"><figcaption><span>file or your custom component files:</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">import &#123; Navbar, Jumbotron, Button &#125; from &apos;react-bootstrap&apos;;</span><br></pre></td></tr></table></figure></p><p>Now you are ready to use the imported React Bootstrap components within your component hierarchy defined in the render method. Here is an example <a href="https://gist.githubusercontent.com/gaearon/85d8c067f6af1e56277c82d19fd4da7b/raw/6158dd991b67284e9fc8d70b9d973efe87659d72/App.js" target="_blank" rel="noopener"><code>App.js</code></a> redone using React Bootstrap.</p><h3 id="Using-a-Custom-Theme"><a href="#Using-a-Custom-Theme" class="headerlink" title="Using a Custom Theme"></a>Using a Custom Theme</h3><p>Sometimes you might need to tweak the visual styles of Bootstrap (or equivalent package).<br><br>We suggest the following approach:</p><ul><li>Create a new package that depends on the package you wish to customize, e.g. Bootstrap.</li><li>Add the necessary build steps to tweak the theme, and publish your package on npm.</li><li>Install your own theme npm package as a dependency of your app.</li></ul><p>Here is an example of adding a <a href="https://medium.com/@tacomanator/customizing-create-react-app-aa9ffb88165" target="_blank" rel="noopener">customized Bootstrap</a> that follows these steps.</p><h2 id="Adding-Flow"><a href="#Adding-Flow" class="headerlink" title="Adding Flow"></a>Adding Flow</h2><p>Flow is a static type checker that helps you write code with fewer bugs. Check out this <a href="https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb" target="_blank" rel="noopener">introduction to using static types in JavaScript</a> if you are new to this concept.</p><p>Recent versions of <a href="http://flowtype.org/" target="_blank" rel="noopener">Flow</a> work with Create React App projects out of the box.</p><p>To add Flow to a Create React App project, follow these steps:</p><ol><li>Run <code>npm install --save flow-bin</code> (or <code>yarn add flow-bin</code>).</li><li>Add <code>&quot;flow&quot;: &quot;flow&quot;</code> to the <code>scripts</code> section of your <code>package.json</code>.</li><li>Run <code>npm run flow init</code> (or <code>yarn flow init</code>) to create a <a href="https://flowtype.org/docs/advanced-configuration.html" target="_blank" rel="noopener"><code>.flowconfig</code> file</a> in the root directory.</li><li>Add <code>// @flow</code> to any files you want to type check (for example, to <code>src/App.js</code>).</li></ol><p>Now you can run <code>npm run flow</code> (or <code>yarn flow</code>) to check the files for type errors.<br>You can optionally use an IDE like <a href="https://nuclide.io/docs/languages/flow/" target="_blank" rel="noopener">Nuclide</a> for a better integrated experience.<br>In the future we plan to integrate it into Create React App even more closely.</p><p>To learn more about Flow, check out <a href="https://flowtype.org/" target="_blank" rel="noopener">its documentation</a>.</p><h2 id="Adding-a-Router"><a href="#Adding-a-Router" class="headerlink" title="Adding a Router"></a>Adding a Router</h2><p>Create React App doesn’t prescribe a specific routing solution, but <a href="https://reacttraining.com/react-router/" target="_blank" rel="noopener">React Router</a> is the most popular one.</p><p>To add it, run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>To try it, delete all the code in <code>src/App.js</code> and replace it with any of the examples on its website. The <a href="https://reacttraining.com/react-router/web/example/basic" target="_blank" rel="noopener">Basic Example</a> is a good place to get started.</p><p>Note that <a href="#serving-apps-with-client-side-routing">you may need to configure your production server to support client-side routing</a> before deploying your app.</p><h2 id="Adding-Custom-Environment-Variables"><a href="#Adding-Custom-Environment-Variables" class="headerlink" title="Adding Custom Environment Variables"></a>Adding Custom Environment Variables</h2><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.2.3" target="_blank" rel="noopener">`react-scripts@0.2.3</a>` and higher.</p></blockquote><p>Your project can consume variables declared in your environment as if they were declared locally in your JS files. By<br>default you will have <code>NODE_ENV</code> defined for you, and any other environment variables starting with<br><code>REACT_APP_</code>.</p><p><strong>The environment variables are embedded during the build time</strong>. Since Create React App produces a static HTML/CSS/JS bundle, it can’t possibly read them at runtime. To read them at runtime, you would need to load HTML into memory on the server and replace placeholders in runtime, just like <a href="#injecting-data-from-the-server-into-the-page">described here</a>. Alternatively you can rebuild the app on the server anytime you change them.</p><blockquote><p>Note: You must create custom environment variables beginning with <code>REACT_APP_</code>. Any other variables except <code>NODE_ENV</code> will be ignored to avoid accidentally <a href="https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527" target="_blank" rel="noopener">exposing a private key on the machine that could have the same name</a>. Changing any environment variables will require you to restart the development server if it is running.</p></blockquote><p>These environment variables will be defined for you on <code>process.env</code>. For example, having an environment<br>variable named <code>REACT_APP_SECRET_CODE</code> will be exposed in your JS as <code>process.env.REACT_APP_SECRET_CODE</code>.</p><p>There is also a special built-in environment variable called <code>NODE_ENV</code>. You can read it from <code>process.env.NODE_ENV</code>. When you run <code>npm start</code>, it is always equal to <code>&#39;development&#39;</code>, when you run <code>npm test</code> it is always equal to <code>&#39;test&#39;</code>, and when you run <code>npm run build</code> to make a production bundle, it is always equal to <code>&#39;production&#39;</code>. <strong>You cannot override <code>NODE_ENV</code> manually.</strong> This prevents developers from accidentally deploying a slow development build to production.</p><p>These environment variables can be useful for displaying information conditionally based on where the project is<br>deployed or consuming sensitive data that lives outside of version control.</p><p>First, you need to have environment variables defined. For example, let’s say you wanted to consume a secret defined<br>in the environment inside a <code>&lt;form&gt;</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;small&gt;You are running <span class="keyword">this</span> application <span class="keyword">in</span> &lt;b&gt;&#123;process.env.NODE_ENV&#125;&lt;<span class="regexp">/b&gt; mode.&lt;/</span>small&gt;</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;input type=<span class="string">"hidden"</span> defaultValue=&#123;process.env.REACT_APP_SECRET_CODE&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>During the build, <code>process.env.REACT_APP_SECRET_CODE</code> will be replaced with the current value of the <code>REACT_APP_SECRET_CODE</code> environment variable. Remember that the <code>NODE_ENV</code> variable will be set for you automatically.</p><p>When you load the app in the browser and inspect the <code>&lt;input&gt;</code>, you will see its value set to <code>abcdef</code>, and the bold text will show the environment provided when using <code>npm start</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>You are running this application in <span class="tag">&lt;<span class="name">b</span>&gt;</span>development<span class="tag">&lt;/<span class="name">b</span>&gt;</span> mode.<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">value</span>=<span class="string">"abcdef"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>The above form is looking for a variable called <code>REACT_APP_SECRET_CODE</code> from the environment. In order to consume this<br>value, we need to have it defined in the environment. This can be done using two ways: either in your shell or in<br>a <code>.env</code> file. Both of these ways are described in the next few sections.</p><p>Having access to the <code>NODE_ENV</code> is also useful for performing actions conditionally:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">  analytics.disable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When you compile the app with <code>npm run build</code>, the minification step will strip out this condition, and the resulting bundle will be smaller.</p><h3 id="Referencing-Environment-Variables-in-the-HTML"><a href="#Referencing-Environment-Variables-in-the-HTML" class="headerlink" title="Referencing Environment Variables in the HTML"></a>Referencing Environment Variables in the HTML</h3><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.9.0" target="_blank" rel="noopener">`react-scripts@0.9.0</a>` and higher.</p></blockquote><p>You can also access the environment variables starting with <code>REACT_APP_</code> in the <code>public/index.html</code>. For example:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>%REACT_APP_WEBSITE_NAME%<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Note that the caveats from the above section apply:</p><ul><li>Apart from a few built-in variables (<code>NODE_ENV</code> and <code>PUBLIC_URL</code>), variable names must start with <code>REACT_APP_</code> to work.</li><li>The environment variables are injected at build time. If you need to inject them at runtime, <a href="#generating-dynamic-meta-tags-on-the-server">follow this approach instead</a>.</li></ul><h3 id="Adding-Temporary-Environment-Variables-In-Your-Shell"><a href="#Adding-Temporary-Environment-Variables-In-Your-Shell" class="headerlink" title="Adding Temporary Environment Variables In Your Shell"></a>Adding Temporary Environment Variables In Your Shell</h3><p>Defining environment variables can vary between OSes. It’s also important to know that this manner is temporary for the<br>life of the shell session.</p><h4 id="Windows-cmd-exe"><a href="#Windows-cmd-exe" class="headerlink" title="Windows (cmd.exe)"></a>Windows (cmd.exe)</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> "REACT_APP_SECRET_CODE=abcdef" &amp;&amp; npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p>(Note: Quotes around the variable assignment are required to avoid a trailing whitespace.)</p><h4 id="Windows-Powershell"><a href="#Windows-Powershell" class="headerlink" title="Windows (Powershell)"></a>Windows (Powershell)</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable">$env:REACT_APP_SECRET_CODE</span> = <span class="string">"abcdef"</span>) -and (npm start)</span><br></pre></td></tr></table></figure><h4 id="Linux-macOS-Bash"><a href="#Linux-macOS-Bash" class="headerlink" title="Linux, macOS (Bash)"></a>Linux, macOS (Bash)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_SECRET_CODE=abcdef npm start</span><br></pre></td></tr></table></figure><h3 id="Adding-Development-Environment-Variables-In-env"><a href="#Adding-Development-Environment-Variables-In-env" class="headerlink" title="Adding Development Environment Variables In .env"></a>Adding Development Environment Variables In <code>.env</code></h3><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.5.0" target="_blank" rel="noopener">`react-scripts@0.5.0</a>` and higher.</p></blockquote><p>To define permanent environment variables, create a file called <code>.env</code> in the root of your project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_SECRET_CODE=abcdef</span><br></pre></td></tr></table></figure><blockquote><p>Note: You must create custom environment variables beginning with <code>REACT_APP_</code>. Any other variables except <code>NODE_ENV</code> will be ignored to avoid <a href="https://github.com/facebookincubator/create-react-app/issues/865#issuecomment-252199527" target="_blank" rel="noopener">accidentally exposing a private key on the machine that could have the same name</a>. Changing any environment variables will require you to restart the development server if it is running.</p></blockquote><p><code>.env</code> files <strong>should be</strong> checked into source control (with the exclusion of <code>.env*.local</code>).</p><h4 id="What-other-env-files-can-be-used"><a href="#What-other-env-files-can-be-used" class="headerlink" title="What other .env files can be used?"></a>What other <code>.env</code> files can be used?</h4><blockquote><p>Note: this feature is <strong>available with <a href="mailto:`react-scripts@1.0.0" target="_blank" rel="noopener">`react-scripts@1.0.0</a>` and higher</strong>.</p></blockquote><ul><li><code>.env</code>: Default.</li><li><code>.env.local</code>: Local overrides. <strong>This file is loaded for all environments except test.</strong></li><li><code>.env.development</code>, <code>.env.test</code>, <code>.env.production</code>: Environment-specific settings.</li><li><code>.env.development.local</code>, <code>.env.test.local</code>, <code>.env.production.local</code>: Local overrides of environment-specific settings.</li></ul><p>Files on the left have more priority than files on the right:</p><ul><li><code>npm start</code>: <code>.env.development.local</code>, <code>.env.development</code>, <code>.env.local</code>, <code>.env</code></li><li><code>npm run build</code>: <code>.env.production.local</code>, <code>.env.production</code>, <code>.env.local</code>, <code>.env</code></li><li><code>npm test</code>: <code>.env.test.local</code>, <code>.env.test</code>, <code>.env</code> (note <code>.env.local</code> is missing)</li></ul><p>These variables will act as the defaults if the machine does not explicitly set them.<br><br>Please refer to the <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener">dotenv documentation</a> for more details.</p><blockquote><p>Note: If you are defining environment variables for development, your CI and/or hosting platform will most likely need<br>these defined as well. Consult their documentation how to do this. For example, see the documentation for <a href="https://docs.travis-ci.com/user/environment-variables/" target="_blank" rel="noopener">Travis CI</a> or <a href="https://devcenter.heroku.com/articles/config-vars" target="_blank" rel="noopener">Heroku</a>.</p></blockquote><h4 id="Expanding-Environment-Variables-In-env"><a href="#Expanding-Environment-Variables-In-env" class="headerlink" title="Expanding Environment Variables In .env"></a>Expanding Environment Variables In <code>.env</code></h4><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@1.1.0" target="_blank" rel="noopener">`react-scripts@1.1.0</a>` and higher.</p></blockquote><p>Expand variables already on your machine for use in your <code>.env</code> file (using <a href="https://github.com/motdotla/dotenv-expand" target="_blank" rel="noopener">dotenv-expand</a>).</p><p>For example, to get the environment variable <code>npm_package_version</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">REACT_APP_VERSION=$npm_package_version</span><br><span class="line"># also works:</span><br><span class="line"># REACT_APP_VERSION=$&#123;npm_package_version&#125;</span><br></pre></td></tr></table></figure><p>Or expand variables local to the current <code>.env</code> file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DOMAIN=www.example.com</span><br><span class="line">REACT_APP_FOO=$DOMAIN/foo</span><br><span class="line">REACT_APP_BAR=$DOMAIN/bar</span><br></pre></td></tr></table></figure><h2 id="Can-I-Use-Decorators"><a href="#Can-I-Use-Decorators" class="headerlink" title="Can I Use Decorators?"></a>Can I Use Decorators?</h2><p>Many popular libraries use <a href="https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841" target="_blank" rel="noopener">decorators</a> in their documentation.<br><br>Create React App doesn’t support decorator syntax at the moment because:</p><ul><li>It is an experimental proposal and is subject to change.</li><li>The current specification version is not officially supported by Babel.</li><li>If the specification changes, we won’t be able to write a codemod because we don’t use them internally at Facebook.</li></ul><p>However in many cases you can rewrite decorator-based code without decorators just as fine.<br><br>Please refer to these two threads for reference:</p><ul><li><a href="https://github.com/facebookincubator/create-react-app/issues/214" target="_blank" rel="noopener">#214</a></li><li><a href="https://github.com/facebookincubator/create-react-app/issues/411" target="_blank" rel="noopener">#411</a></li></ul><p>Create React App will add decorator support when the specification advances to a stable stage.</p><h2 id="Fetching-Data-with-AJAX-Requests"><a href="#Fetching-Data-with-AJAX-Requests" class="headerlink" title="Fetching Data with AJAX Requests"></a>Fetching Data with AJAX Requests</h2><p>React doesn’t prescribe a specific approach to data fetching, but people commonly use either a library like <a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> or the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener"><code>fetch()</code> API</a> provided by the browser. Conveniently, Create React App includes a polyfill for <code>fetch()</code> so you can use it without worrying about the browser support.</p><p>The global <code>fetch</code> function allows to easily makes AJAX requests. It takes in a URL as an input and returns a <code>Promise</code> that resolves to a <code>Response</code> object. You can find more information about <code>fetch</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">here</a>.</p><p>This project also includes a <a href="https://github.com/then/promise" target="_blank" rel="noopener">Promise polyfill</a> which provides a full implementation of Promises/A+. A Promise represents the eventual result of an asynchronous operation, you can find more information about Promises <a href="https://www.promisejs.org/" target="_blank" rel="noopener">here</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">here</a>. Both axios and <code>fetch()</code> use Promises under the hood. You can also use the <a href="https://davidwalsh.name/async-await" target="_blank" rel="noopener"><code>async / await</code></a> syntax to reduce the callback nesting.</p><p>You can learn more about making AJAX requests from React components in <a href="https://reactjs.org/docs/faq-ajax.html" target="_blank" rel="noopener">the FAQ entry on the React website</a>.</p><h2 id="Integrating-with-an-API-Backend"><a href="#Integrating-with-an-API-Backend" class="headerlink" title="Integrating with an API Backend"></a>Integrating with an API Backend</h2><p>These tutorials will help you to integrate your app with an API backend running on another port,<br>using <code>fetch()</code> to access it.</p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Check out <a href="https://www.fullstackreact.com/articles/using-create-react-app-with-a-server/" target="_blank" rel="noopener">this tutorial</a>.<br>You can find the companion GitHub repository <a href="https://github.com/fullstackreact/food-lookup-demo" target="_blank" rel="noopener">here</a>.</p><h3 id="Ruby-on-Rails"><a href="#Ruby-on-Rails" class="headerlink" title="Ruby on Rails"></a>Ruby on Rails</h3><p>Check out <a href="https://www.fullstackreact.com/articles/how-to-get-create-react-app-to-work-with-your-rails-api/" target="_blank" rel="noopener">this tutorial</a>.<br>You can find the companion GitHub repository <a href="https://github.com/fullstackreact/food-lookup-demo-rails" target="_blank" rel="noopener">here</a>.</p><h2 id="Proxying-API-Requests-in-Development"><a href="#Proxying-API-Requests-in-Development" class="headerlink" title="Proxying API Requests in Development"></a>Proxying API Requests in Development</h2><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.2.3" target="_blank" rel="noopener">`react-scripts@0.2.3</a>` and higher.</p></blockquote><p>People often serve the front-end React app from the same host and port as their backend implementation.<br><br>For example, a production setup might look like this after the app is deployed:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/             - static server returns index.html with React app</span><br><span class="line">/todos        - static server returns index.html with React app</span><br><span class="line">/api/todos    - server handles any /api/* requests using the backend implementation</span><br></pre></td></tr></table></figure><p>Such setup is <strong>not</strong> required. However, if you <strong>do</strong> have a setup like this, it is convenient to write requests like <code>fetch(&#39;/api/todos&#39;)</code> without worrying about redirecting them to another host or port during development.</p><p>To tell the development server to proxy any unknown requests to your API server in development, add a <code>proxy</code> field to your <code>package.json</code>, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: <span class="string">"http://localhost:4000"</span>,</span><br></pre></td></tr></table></figure><p>This way, when you <code>fetch(&#39;/api/todos&#39;)</code> in development, the development server will recognize that it’s not a static asset, and will proxy your request to <code>http://localhost:4000/api/todos</code> as a fallback. The development server will <strong>only</strong> attempt to send requests without <code>text/html</code> in its <code>Accept</code> header to the proxy.</p><p>Conveniently, this avoids <a href="http://stackoverflow.com/questions/21854516/understanding-ajax-cors-and-security-considerations" target="_blank" rel="noopener">CORS issues</a> and error messages like this in development:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fetch API cannot load http://localhost:4000/api/todos. No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource. Origin &apos;http://localhost:3000&apos; is therefore not allowed access. If an opaque response serves your needs, set the request&apos;s mode to &apos;no-cors&apos; to fetch the resource with CORS disabled.</span><br></pre></td></tr></table></figure><p>Keep in mind that <code>proxy</code> only has effect in development (with <code>npm start</code>), and it is up to you to ensure that URLs like <code>/api/todos</code> point to the right thing in production. You don’t have to use the <code>/api</code> prefix. Any unrecognized request without a <code>text/html</code> accept header will be redirected to the specified <code>proxy</code>.</p><p>The <code>proxy</code> option supports HTTP, HTTPS and WebSocket connections.<br><br>If the <code>proxy</code> option is <strong>not</strong> flexible enough for you, alternatively you can:</p><ul><li><a href="#configuring-the-proxy-manually">Configure the proxy yourself</a></li><li>Enable CORS on your server (<a href="http://enable-cors.org/server_expressjs.html" target="_blank" rel="noopener">here’s how to do it for Express</a>).</li><li>Use <a href="#adding-custom-environment-variables">environment variables</a> to inject the right server host and port into your app.</li></ul><h3 id="“Invalid-Host-Header”-Errors-After-Configuring-Proxy"><a href="#“Invalid-Host-Header”-Errors-After-Configuring-Proxy" class="headerlink" title="“Invalid Host Header” Errors After Configuring Proxy"></a>“Invalid Host Header” Errors After Configuring Proxy</h3><p>When you enable the <code>proxy</code> option, you opt into a more strict set of host checks. This is necessary because leaving the backend open to remote hosts makes your computer vulnerable to DNS rebinding attacks. The issue is explained in <a href="https://medium.com/webpack/webpack-dev-server-middleware-security-issues-1489d950874a" target="_blank" rel="noopener">this article</a> and <a href="https://github.com/webpack/webpack-dev-server/issues/887" target="_blank" rel="noopener">this issue</a>.</p><p>This shouldn’t affect you when developing on <code>localhost</code>, but if you develop remotely like <a href="https://github.com/facebookincubator/create-react-app/issues/2271" target="_blank" rel="noopener">described here</a>, you will see this error in the browser after enabling the <code>proxy</code> option:</p><blockquote><p>Invalid Host header</p></blockquote><p>To work around it, you can specify your public development host in a file called <code>.env.development</code> in the root of your project:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOST=mypublicdevhost.com</span><br></pre></td></tr></table></figure><p>If you restart the development server now and load the app from the specified host, it should work.</p><p>If you are still having issues or if you’re using a more exotic environment like a cloud editor, you can bypass the host check completely by adding a line to <code>.env.development.local</code>. <strong>Note that this is dangerous and exposes your machine to remote code execution from malicious websites:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># NOTE: THIS IS DANGEROUS!</span><br><span class="line"># It exposes your machine to attacks from the websites you visit.</span><br><span class="line">DANGEROUSLY_DISABLE_HOST_CHECK=true</span><br></pre></td></tr></table></figure><p>We don’t recommend this approach.</p><h3 id="Configuring-the-Proxy-Manually"><a href="#Configuring-the-Proxy-Manually" class="headerlink" title="Configuring the Proxy Manually"></a>Configuring the Proxy Manually</h3><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@1.0.0" target="_blank" rel="noopener">`react-scripts@1.0.0</a>` and higher.</p></blockquote><p>If the <code>proxy</code> option is <strong>not</strong> flexible enough for you, you can specify an object in the following form (in <code>package.json</code>).<br><br>You may also specify any configuration value <a href="https://github.com/chimurai/http-proxy-middleware#options" target="_blank" rel="noopener"><code>http-proxy-middleware</code></a> or <a href="https://github.com/nodejitsu/node-http-proxy#options" target="_blank" rel="noopener"><code>http-proxy</code></a> supports.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"proxy"</span>: &#123;</span><br><span class="line">    <span class="string">"/api"</span>: &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"&lt;url&gt;"</span>,</span><br><span class="line">      <span class="string">"ws"</span>: <span class="literal">true</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>All requests matching this path will be proxies, no exceptions. This includes requests for <code>text/html</code>, which the standard <code>proxy</code> option does not proxy.</p><p>If you need to specify multiple proxies, you may do so by specifying additional entries.<br>Matches are regular expressions, so that you can use a regexp to match multiple paths.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"proxy"</span>: &#123;</span><br><span class="line">    <span class="comment">// Matches any request starting with /api</span></span><br><span class="line">    <span class="string">"/api"</span>: &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"&lt;url_1&gt;"</span>,</span><br><span class="line">      <span class="string">"ws"</span>: <span class="literal">true</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Matches any request starting with /foo</span></span><br><span class="line">    <span class="string">"/foo"</span>: &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"&lt;url_2&gt;"</span>,</span><br><span class="line">      <span class="string">"ssl"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"pathRewrite"</span>: &#123;</span><br><span class="line">        <span class="string">"^/foo"</span>: <span class="string">"/foo/beta"</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Matches /bar/abc.html but not /bar/sub/def.html</span></span><br><span class="line">    <span class="string">"/bar/[^/]*[.]html"</span>: &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"&lt;url_3&gt;"</span>,</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Matches /baz/abc.html and /baz/sub/def.html</span></span><br><span class="line">    <span class="string">"/baz/.*/.*[.]html"</span>: &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"&lt;url_4&gt;"</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Configuring-a-WebSocket-Proxy"><a href="#Configuring-a-WebSocket-Proxy" class="headerlink" title="Configuring a WebSocket Proxy"></a>Configuring a WebSocket Proxy</h3><p>When setting up a WebSocket proxy, there are a some extra considerations to be aware of.</p><p>If you’re using a WebSocket engine like <a href="https://socket.io/" target="_blank" rel="noopener">Socket.io</a>, you must have a Socket.io server running that you can use as the proxy target. Socket.io will not work with a standard WebSocket server. Specifically, don’t expect Socket.io to work with <a href="http://websocket.org/echo.html" target="_blank" rel="noopener">the websocket.org echo test</a>.</p><p>There’s some good documentation available for <a href="https://socket.io/docs/" target="_blank" rel="noopener">setting up a Socket.io server</a>.</p><p>Standard WebSockets <strong>will</strong> work with a standard WebSocket server as well as the websocket.org echo test. You can use libraries like <a href="https://github.com/websockets/ws" target="_blank" rel="noopener">ws</a> for the server, with <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSocket" target="_blank" rel="noopener">native WebSockets in the browser</a>.</p><p>Either way, you can proxy WebSocket requests manually in <code>package.json</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="string">"proxy"</span>: &#123;</span><br><span class="line">    <span class="string">"/socket"</span>: &#123;</span><br><span class="line">      <span class="comment">// Your compatible WebSocket server</span></span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"ws://&lt;socket_url&gt;"</span>,</span><br><span class="line">      <span class="comment">// Tell http-proxy-middleware that this is a WebSocket proxy.</span></span><br><span class="line">      <span class="comment">// Also allows you to proxy WebSocket requests without an additional HTTP request</span></span><br><span class="line">      <span class="comment">// https://github.com/chimurai/http-proxy-middleware#external-websocket-upgrade</span></span><br><span class="line">      <span class="string">"ws"</span>: <span class="literal">true</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Using-HTTPS-in-Development"><a href="#Using-HTTPS-in-Development" class="headerlink" title="Using HTTPS in Development"></a>Using HTTPS in Development</h2><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.4.0" target="_blank" rel="noopener">`react-scripts@0.4.0</a>` and higher.</p></blockquote><p>You may require the dev server to serve pages over HTTPS. One particular case where this could be useful is when using <a href="#proxying-api-requests-in-development">the “proxy” feature</a> to proxy requests to an API server when that API server is itself serving HTTPS.</p><p>To do this, set the <code>HTTPS</code> environment variable to <code>true</code>, then start the dev server as usual with <code>npm start</code>:</p><h4 id="Windows-cmd-exe-1"><a href="#Windows-cmd-exe-1" class="headerlink" title="Windows (cmd.exe)"></a>Windows (cmd.exe)</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> HTTPS=true&amp;&amp;npm <span class="built_in">start</span></span><br></pre></td></tr></table></figure><h4 id="Windows-Powershell-1"><a href="#Windows-Powershell-1" class="headerlink" title="Windows (Powershell)"></a>Windows (Powershell)</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable">$env:HTTPS</span> = <span class="literal">$true</span>) -and (npm start)</span><br></pre></td></tr></table></figure><p>(Note: the lack of whitespace is intentional.)</p><h4 id="Linux-macOS-Bash-1"><a href="#Linux-macOS-Bash-1" class="headerlink" title="Linux, macOS (Bash)"></a>Linux, macOS (Bash)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HTTPS=<span class="literal">true</span> npm start</span><br></pre></td></tr></table></figure><p>Note that the server will use a self-signed certificate, so your web browser will almost definitely display a warning upon accessing the page.</p><h2 id="Generating-Dynamic-lt-meta-gt-Tags-on-the-Server"><a href="#Generating-Dynamic-lt-meta-gt-Tags-on-the-Server" class="headerlink" title="Generating Dynamic &lt;meta&gt; Tags on the Server"></a>Generating Dynamic <code>&lt;meta&gt;</code> Tags on the Server</h2><p>Since Create React App doesn’t support server rendering, you might be wondering how to make <code>&lt;meta&gt;</code> tags dynamic and reflect the current URL. To solve this, we recommend to add placeholders into the HTML, like this:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"__OG_TITLE__"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"__OG_DESCRIPTION__"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Then, on the server, regardless of the backend you use, you can read <code>index.html</code> into memory and replace <code>__OG_TITLE__</code>, <code>__OG_DESCRIPTION__</code>, and any other placeholders with values depending on the current URL. Just make sure to sanitize and escape the interpolated values so that they are safe to embed into HTML!</p><p>If you use a Node server, you can even share the route matching logic between the client and the server. However duplicating it also works fine in simple cases.</p><h2 id="Pre-Rendering-into-Static-HTML-Files"><a href="#Pre-Rendering-into-Static-HTML-Files" class="headerlink" title="Pre-Rendering into Static HTML Files"></a>Pre-Rendering into Static HTML Files</h2><p>If you’re hosting your <code>build</code> with a static hosting provider you can use <a href="https://www.npmjs.com/package/react-snapshot" target="_blank" rel="noopener">react-snapshot</a> or <a href="https://github.com/stereobooster/react-snap" target="_blank" rel="noopener">react-snap</a> to generate HTML pages for each route, or relative link, in your application. These pages will then seamlessly become active, or “hydrated”, when the JavaScript bundle has loaded.</p><p>There are also opportunities to use this outside of static hosting, to take the pressure off the server when generating and caching routes.</p><p>The primary benefit of pre-rendering is that you get the core content of each page <em>with</em> the HTML payload—regardless of whether or not your JavaScript bundle successfully downloads. It also increases the likelihood that each route of your application will be picked up by search engines.</p><p>You can read more about <a href="https://medium.com/superhighfives/an-almost-static-stack-6df0a2791319" target="_blank" rel="noopener">zero-configuration pre-rendering (also called snapshotting) here</a>.</p><h2 id="Injecting-Data-from-the-Server-into-the-Page"><a href="#Injecting-Data-from-the-Server-into-the-Page" class="headerlink" title="Injecting Data from the Server into the Page"></a>Injecting Data from the Server into the Page</h2><p>Similarly to the previous section, you can leave some placeholders in the HTML that inject global variables, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      <span class="built_in">window</span>.SERVER_DATA = __SERVER_DATA__;</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>Then, on the server, you can replace <code>__SERVER_DATA__</code> with a JSON of real data right before sending the response. The client code can then read <code>window.SERVER_DATA</code> to use it. <strong>Make sure to <a href="https://medium.com/node-security/the-most-common-xss-vulnerability-in-react-js-applications-2bdffbcc1fa0" target="_blank" rel="noopener">sanitize the JSON before sending it to the client</a> as it makes your app vulnerable to XSS attacks.</strong></p><h2 id="Running-Tests"><a href="#Running-Tests" class="headerlink" title="Running Tests"></a>Running Tests</h2><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.3.0" target="_blank" rel="noopener">`react-scripts@0.3.0</a>` and higher.<br><br><a href="https://github.com/facebookincubator/create-react-app/blob/master/CHANGELOG.md#migrating-from-023-to-030" target="_blank" rel="noopener">Read the migration guide to learn how to enable it in older projects!</a></p></blockquote><p>Create React App uses <a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">Jest</a> as its test runner. To prepare for this integration, we did a <a href="https://facebook.github.io/jest/blog/2016/09/01/jest-15.html" target="_blank" rel="noopener">major revamp</a> of Jest so if you heard bad things about it years ago, give it another try.</p><p>Jest is a Node-based runner. This means that the tests always run in a Node environment and not in a real browser. This lets us enable fast iteration speed and prevent flakiness.</p><p>While Jest provides browser globals such as <code>window</code> thanks to <a href="https://github.com/tmpvar/jsdom" target="_blank" rel="noopener">jsdom</a>, they are only approximations of the real browser behavior. Jest is intended to be used for unit tests of your logic and your components rather than the DOM quirks.</p><p>We recommend that you use a separate tool for browser end-to-end tests if you need them. They are beyond the scope of Create React App.</p><h3 id="Filename-Conventions"><a href="#Filename-Conventions" class="headerlink" title="Filename Conventions"></a>Filename Conventions</h3><p>Jest will look for test files with any of the following popular naming conventions:</p><ul><li>Files with <code>.js</code> suffix in <code>__tests__</code> folders.</li><li>Files with <code>.test.js</code> suffix.</li><li>Files with <code>.spec.js</code> suffix.</li></ul><p>The <code>.test.js</code> / <code>.spec.js</code> files (or the <code>__tests__</code> folders) can be located at any depth under the <code>src</code> top level folder.</p><p>We recommend to put the test files (or <code>__tests__</code> folders) next to the code they are testing so that relative imports appear shorter. For example, if <code>App.test.js</code> and <code>App.js</code> are in the same folder, the test just needs to <code>import App from &#39;./App&#39;</code> instead of a long relative path. Colocation also helps find tests more quickly in larger projects.</p><h3 id="Command-Line-Interface"><a href="#Command-Line-Interface" class="headerlink" title="Command Line Interface"></a>Command Line Interface</h3><p>When you run <code>npm test</code>, Jest will launch in the watch mode. Every time you save a file, it will re-run the tests, just like <code>npm start</code> recompiles the code.</p><p>The watcher includes an interactive command-line interface with the ability to run all tests, or focus on a search pattern. It is designed this way so that you can keep it open and enjoy fast re-runs. You can learn the commands from the “Watch Usage” note that the watcher prints after every run:</p><p><img src="http://facebook.github.io/jest/img/blog/15-watch.gif" alt="Jest watch mode"></p><h3 id="Version-Control-Integration"><a href="#Version-Control-Integration" class="headerlink" title="Version Control Integration"></a>Version Control Integration</h3><p>By default, when you run <code>npm test</code>, Jest will only run the tests related to files changed since the last commit. This is an optimization designed to make your tests run fast regardless of how many tests you have. However it assumes that you don’t often commit the code that doesn’t pass the tests.</p><p>Jest will always explicitly mention that it only ran tests related to the files changed since the last commit. You can also press <code>a</code> in the watch mode to force Jest to run all tests.</p><p>Jest will always run all tests on a <a href="#continuous-integration">continuous integration</a> server or if the project is not inside a Git or Mercurial repository.</p><h3 id="Writing-Tests"><a href="#Writing-Tests" class="headerlink" title="Writing Tests"></a>Writing Tests</h3><p>To create tests, add <code>it()</code> (or <code>test()</code>) blocks with the name of the test and its code. You may optionally wrap them in <code>describe()</code> blocks for logical grouping but this is neither required nor recommended.</p><p>Jest provides a built-in <code>expect()</code> global function for making assertions. A basic test could look like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'./sum'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'sums numbers'</span>, () =&gt; &#123;</span><br><span class="line">  expect(sum(<span class="number">1</span>, <span class="number">2</span>)).toEqual(<span class="number">3</span>);</span><br><span class="line">  expect(sum(<span class="number">2</span>, <span class="number">2</span>)).toEqual(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>All <code>expect()</code> matchers supported by Jest are <a href="https://facebook.github.io/jest/docs/en/expect.html#content" target="_blank" rel="noopener">extensively documented here</a>.<br><br>You can also use <a href="https://facebook.github.io/jest/docs/en/expect.html#tohavebeencalled" target="_blank" rel="noopener"><code>jest.fn()</code> and <code>expect(fn).toBeCalled()</code></a> to create “spies” or mock functions.</p><h3 id="Testing-Components"><a href="#Testing-Components" class="headerlink" title="Testing Components"></a>Testing Components</h3><p>There is a broad spectrum of component testing techniques. They range from a “smoke test” verifying that a component renders without throwing, to shallow rendering and testing some of the output, to full rendering and testing component lifecycle and state changes.</p><p>Different projects choose different testing tradeoffs based on how often components change, and how much logic they contain. If you haven’t decided on a testing strategy yet, we recommend that you start with creating simple smoke tests for your components:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders without crashing'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">  ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, div);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>This test mounts a component and makes sure that it didn’t throw during rendering. Tests like this provide a lot of value with very little effort so they are great as a starting point, and this is the test you will find in <code>src/App.test.js</code>.</p><p>When you encounter bugs caused by changing components, you will gain a deeper insight into which parts of them are worth testing in your application. This might be a good time to introduce more specific tests asserting specific expected output or behavior.</p><p>If you’d like to test components in isolation from the child components they render, we recommend using <a href="http://airbnb.io/enzyme/docs/api/shallow.html" target="_blank" rel="noopener"><code>shallow()</code> rendering API</a> from <a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme</a>. To install it, run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save enzyme enzyme-adapter-react-16 react-test-renderer</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add enzyme enzyme-adapter-react-16 react-test-renderer</span><br></pre></td></tr></table></figure><p>As of Enzyme 3, you will need to install Enzyme along with an Adapter corresponding to the version of React you are using. (The examples above use the adapter for React 16.)</p><p>The adapter will also need to be configured in your <a href="#initializing-test-environment">global setup file</a>:</p><h4 id="src-setupTests-js"><a href="#src-setupTests-js" class="headerlink" title="src/setupTests.js"></a><code>src/setupTests.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span>;</span><br><span class="line"></span><br><span class="line">configure(&#123; <span class="attr">adapter</span>: <span class="keyword">new</span> Adapter() &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>Note: Keep in mind that if you decide to “eject” before creating <code>src/setupTests.js</code>, the resulting <code>package.json</code> file won’t contain any reference to it. <a href="#initializing-test-environment">Read here</a> to learn how to add this after ejecting.</p></blockquote><p>Now you can write a smoke test with it:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders without crashing'</span>, () =&gt; &#123;</span><br><span class="line">  shallow(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>Unlike the previous smoke test using <code>ReactDOM.render()</code>, this test only renders <code>&lt;App&gt;</code> and doesn’t go deeper. For example, even if <code>&lt;App&gt;</code> itself renders a <code>&lt;Button&gt;</code> that throws, this test will pass. Shallow rendering is great for isolated unit tests, but you may still want to create some full rendering tests to ensure the components integrate correctly. Enzyme supports <a href="http://airbnb.io/enzyme/docs/api/mount.html" target="_blank" rel="noopener">full rendering with <code>mount()</code></a>, and you can also use it for testing state changes and component lifecycle.</p><p>You can read the <a href="http://airbnb.io/enzyme/" target="_blank" rel="noopener">Enzyme documentation</a> for more testing techniques. Enzyme documentation uses Chai and Sinon for assertions but you don’t have to use them because Jest provides built-in <code>expect()</code> and <code>jest.fn()</code> for spies.</p><p>Here is an example from Enzyme documentation that asserts specific output, rewritten to use Jest matchers:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; shallow &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders welcome message'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = shallow(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">  const welcome = <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome to React<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  // expect(wrapper.contains(welcome)).to.equal(true);</span></span><br><span class="line"><span class="xml">  expect(wrapper.contains(welcome)).toEqual(true);</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>All Jest matchers are <a href="http://facebook.github.io/jest/docs/en/expect.html" target="_blank" rel="noopener">extensively documented here</a>.<br><br>Nevertheless you can use a third-party assertion library like <a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a> if you want to, as described below.</p><p>Additionally, you might find <a href="https://github.com/blainekasten/enzyme-matchers" target="_blank" rel="noopener">jest-enzyme</a> helpful to simplify your tests with readable matchers. The above <code>contains</code> code can be written more simply with jest-enzyme.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expect(wrapper).toContainReact(welcome)</span><br></pre></td></tr></table></figure><p>To enable this, install <code>jest-enzyme</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save jest-enzyme</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add jest-enzyme</span><br></pre></td></tr></table></figure><p>Import it in <a href="#initializing-test-environment"><code>src/setupTests.js</code></a> to make its matchers available in every test:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'jest-enzyme'</span>;</span><br></pre></td></tr></table></figure><h4 id="Use-react-testing-library"><a href="#Use-react-testing-library" class="headerlink" title="Use react-testing-library"></a>Use <code>react-testing-library</code></h4><p>As an alternative or companion to <code>enzyme</code>, you may consider using <code>react-testing-library</code>. <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener"><code>react-testing-library</code></a> is a library for testing React components in a way that resembles the way the components are used by end users. It is well suited for unit, integration, and end-to-end testing of React components and applications. It works more directly with DOM nodes, and therefore it’s recommended to use with <a href="https://github.com/gnapse/jest-dom" target="_blank" rel="noopener"><code>jest-dom</code></a> for improved assertions.</p><p>To install <code>react-testing-library</code> and <code>jest-dom</code>, you can run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-testing-library jest-dom</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-testing-library jest-dom</span><br></pre></td></tr></table></figure><p>Similar to <code>enzyme</code> you can create a <code>src/setupTests.js</code> file to avoid boilerplate in your test files:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// react-testing-library renders your components to document.body,</span></span><br><span class="line"><span class="comment">// this will ensure they're removed after each test.</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'react-testing-library/cleanup-after-each'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// this adds jest-dom's custom assertions</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'jest-dom/extend-expect'</span>;</span><br></pre></td></tr></table></figure><p>Here’s an example of using <code>react-testing-library</code> and <code>jest-dom</code> for testing that the <code>&lt;App /&gt;</code> component renders “Welcome to React”.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">'react-testing-library'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'renders welcome message'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>);</span></span><br><span class="line"><span class="xml">  expect(getByText('Welcome to React')).toBeInTheDOM();</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>Learn more about the utilities provided by <code>react-testing-library</code> to facilitate testing asynchronous interactions as well as selecting form elements from <a href="https://github.com/kentcdodds/react-testing-library" target="_blank" rel="noopener">the <code>react-testing-library</code> documentation</a> and <a href="https://codesandbox.io/s/github/kentcdodds/react-testing-library-examples" target="_blank" rel="noopener">examples</a>.</p><h3 id="Using-Third-Party-Assertion-Libraries"><a href="#Using-Third-Party-Assertion-Libraries" class="headerlink" title="Using Third Party Assertion Libraries"></a>Using Third Party Assertion Libraries</h3><p>We recommend that you use <code>expect()</code> for assertions and <code>jest.fn()</code> for spies. If you are having issues with them please <a href="https://github.com/facebook/jest/issues/new" target="_blank" rel="noopener">file those against Jest</a>, and we’ll fix them. We intend to keep making them better for React, supporting, for example, <a href="https://github.com/facebook/jest/pull/1566" target="_blank" rel="noopener">pretty-printing React elements as JSX</a>.</p><p>However, if you are used to other libraries, such as <a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a> and <a href="http://sinonjs.org/" target="_blank" rel="noopener">Sinon</a>, or if you have existing code using them that you’d like to port over, you can import them normally like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">'chai'</span>;</span><br></pre></td></tr></table></figure><p>and then use them in your tests like you normally do.</p><h3 id="Initializing-Test-Environment"><a href="#Initializing-Test-Environment" class="headerlink" title="Initializing Test Environment"></a>Initializing Test Environment</h3><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.4.0" target="_blank" rel="noopener">`react-scripts@0.4.0</a>` and higher.</p></blockquote><p>If your app uses a browser API that you need to mock in your tests or if you just need a global setup before running your tests, add a <code>src/setupTests.js</code> to your project. It will be automatically executed before running your tests.</p><p>For example:</p><h4 id="src-setupTests-js-1"><a href="#src-setupTests-js-1" class="headerlink" title="src/setupTests.js"></a><code>src/setupTests.js</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> localStorageMock = &#123;</span><br><span class="line">  getItem: jest.fn(),</span><br><span class="line">  setItem: jest.fn(),</span><br><span class="line">  clear: jest.fn()</span><br><span class="line">&#125;;</span><br><span class="line">global.localStorage = localStorageMock</span><br></pre></td></tr></table></figure><blockquote><p>Note: Keep in mind that if you decide to “eject” before creating <code>src/setupTests.js</code>, the resulting <code>package.json</code> file won’t contain any reference to it, so you should manually create the property <code>setupTestFrameworkScriptFile</code> in the configuration for Jest, something like the following:</p></blockquote><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="string">"jest"</span>: &#123;</span><br><span class="line">&gt;   <span class="comment">// ...</span></span><br><span class="line">&gt;   <span class="string">"setupTestFrameworkScriptFile"</span>: <span class="string">"&lt;rootDir&gt;/src/setupTests.js"</span></span><br><span class="line">&gt;  &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h3 id="Focusing-and-Excluding-Tests"><a href="#Focusing-and-Excluding-Tests" class="headerlink" title="Focusing and Excluding Tests"></a>Focusing and Excluding Tests</h3><p>You can replace <code>it()</code> with <code>xit()</code> to temporarily exclude a test from being executed.<br><br>Similarly, <code>fit()</code> lets you focus on a specific test without running any other tests.</p><h3 id="Coverage-Reporting"><a href="#Coverage-Reporting" class="headerlink" title="Coverage Reporting"></a>Coverage Reporting</h3><p>Jest has an integrated coverage reporter that works well with ES6 and requires no configuration.<br><br>Run <code>npm test -- --coverage</code> (note extra <code>--</code> in the middle) to include a coverage report like this:</p><p><img src="http://i.imgur.com/5bFhnTS.png" alt="coverage report"></p><p>Note that tests run much slower with coverage so it is recommended to run it separately from your normal workflow.</p><h4 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h4><p>The default Jest coverage configuration can be overriden by adding any of the following supported keys to a Jest config in your package.json.</p><p>Supported overrides:</p><ul><li><a href="https://facebook.github.io/jest/docs/en/configuration.html#collectcoveragefrom-array" target="_blank" rel="noopener"><code>collectCoverageFrom</code></a></li><li><a href="https://facebook.github.io/jest/docs/en/configuration.html#coveragereporters-array-string" target="_blank" rel="noopener"><code>coverageReporters</code></a></li><li><a href="https://facebook.github.io/jest/docs/en/configuration.html#coveragethreshold-object" target="_blank" rel="noopener"><code>coverageThreshold</code></a></li><li><a href="https://facebook.github.io/jest/docs/en/configuration.html#snapshotserializers-array-string" target="_blank" rel="noopener"><code>snapshotSerializers</code></a></li></ul><p>Example package.json:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"your-package"</span>,</span><br><span class="line">  <span class="attr">"jest"</span>: &#123;</span><br><span class="line">    <span class="attr">"collectCoverageFrom"</span> : [</span><br><span class="line">      <span class="string">"src/**/*.&#123;js,jsx&#125;"</span>,</span><br><span class="line">      <span class="string">"!&lt;rootDir&gt;/node_modules/"</span>,</span><br><span class="line">      <span class="string">"!&lt;rootDir&gt;/path/to/dir/"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"coverageThreshold"</span>: &#123;</span><br><span class="line">      <span class="attr">"global"</span>: &#123;</span><br><span class="line">        <span class="attr">"branches"</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="attr">"functions"</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="attr">"lines"</span>: <span class="number">90</span>,</span><br><span class="line">        <span class="attr">"statements"</span>: <span class="number">90</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"coverageReporters"</span>: [<span class="string">"text"</span>],</span><br><span class="line">    <span class="attr">"snapshotSerializers"</span>: [<span class="string">"my-serializer-module"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Continuous-Integration"><a href="#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h3><p>By default <code>npm test</code> runs the watcher with interactive CLI. However, you can force it to run tests once and finish the process by setting an environment variable called <code>CI</code>.</p><p>When creating a build of your application with <code>npm run build</code> linter warnings are not checked by default. Like <code>npm test</code>, you can force the build to perform a linter warning check by setting the environment variable <code>CI</code>. If any warnings are encountered then the build fails.</p><p>Popular CI servers already set the environment variable <code>CI</code> by default but you can do this yourself too:</p><h3 id="On-CI-servers"><a href="#On-CI-servers" class="headerlink" title="On CI servers"></a>On CI servers</h3><h4 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h4><ol><li>Following the <a href="https://docs.travis-ci.com/user/getting-started/" target="_blank" rel="noopener">Travis Getting started</a> guide for syncing your GitHub repository with Travis.  You may need to initialize some settings manually in your <a href="https://travis-ci.org/profile" target="_blank" rel="noopener">profile</a> page.</li><li><p>Add a <code>.travis.yml</code> file to your git repository.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 6</span><br><span class="line">cache:</span><br><span class="line">  directories:</span><br><span class="line">    - node_modules</span><br><span class="line">script:</span><br><span class="line">  - npm run build</span><br><span class="line">  - npm test</span><br></pre></td></tr></table></figure></li><li><p>Trigger your first build with a git push.</p></li><li><a href="https://docs.travis-ci.com/user/customizing-the-build/" target="_blank" rel="noopener">Customize your Travis CI Build</a> if needed.</li></ol><h4 id="CircleCI"><a href="#CircleCI" class="headerlink" title="CircleCI"></a>CircleCI</h4><p>Follow <a href="https://medium.com/@knowbody/circleci-and-zeits-now-sh-c9b7eebcd3c1" target="_blank" rel="noopener">this article</a> to set up CircleCI with a Create React App project.</p><h3 id="On-your-own-environment"><a href="#On-your-own-environment" class="headerlink" title="On your own environment"></a>On your own environment</h3><h5 id="Windows-cmd-exe-2"><a href="#Windows-cmd-exe-2" class="headerlink" title="Windows (cmd.exe)"></a>Windows (cmd.exe)</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> CI=true&amp;&amp;npm test</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> CI=true&amp;&amp;npm run build</span><br></pre></td></tr></table></figure><p>(Note: the lack of whitespace is intentional.)</p><h5 id="Windows-Powershell-2"><a href="#Windows-Powershell-2" class="headerlink" title="Windows (Powershell)"></a>Windows (Powershell)</h5><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable">$env:CI</span> = <span class="literal">$true</span>) -and (npm test)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable">$env:CI</span> = <span class="literal">$true</span>) -and (npm run build)</span><br></pre></td></tr></table></figure><h5 id="Linux-macOS-Bash-2"><a href="#Linux-macOS-Bash-2" class="headerlink" title="Linux, macOS (Bash)"></a>Linux, macOS (Bash)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CI=<span class="literal">true</span> npm <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CI=<span class="literal">true</span> npm run build</span><br></pre></td></tr></table></figure><p>The test command will force Jest to run tests once instead of launching the watcher.</p><blockquote><p> If you find yourself doing this often in development, please <a href="https://github.com/facebookincubator/create-react-app/issues/new" target="_blank" rel="noopener">file an issue</a> to tell us about your use case because we want to make watcher the best experience and are open to changing how it works to accommodate more workflows.</p></blockquote><p>The build command will check for linter warnings and fail if any are found.</p><h3 id="Disabling-jsdom"><a href="#Disabling-jsdom" class="headerlink" title="Disabling jsdom"></a>Disabling jsdom</h3><p>By default, the <code>package.json</code> of the generated project looks like this:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"react-scripts start"</span>,</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"react-scripts build"</span>,</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"react-scripts test --env=jsdom"</span></span><br></pre></td></tr></table></figure><p>If you know that none of your tests depend on <a href="https://github.com/tmpvar/jsdom" target="_blank" rel="noopener">jsdom</a>, you can safely remove <code>--env=jsdom</code>, and your tests will run faster:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "react-scripts start",</span><br><span class="line">    "build": "react-scripts build",</span><br><span class="line"><span class="deletion">-   "test": "react-scripts test --env=jsdom"</span></span><br><span class="line"><span class="addition">+   "test": "react-scripts test"</span></span><br></pre></td></tr></table></figure><p>To help you make up your mind, here is a list of APIs that <strong>need jsdom</strong>:</p><ul><li>Any browser globals like <code>window</code> and <code>document</code></li><li><a href="https://facebook.github.io/react/docs/top-level-api.html#reactdom.render" target="_blank" rel="noopener"><code>ReactDOM.render()</code></a></li><li><a href="https://facebook.github.io/react/docs/test-utils.html#renderintodocument" target="_blank" rel="noopener"><code>TestUtils.renderIntoDocument()</code></a> (<a href="https://github.com/facebook/react/blob/34761cf9a252964abfaab6faf74d473ad95d1f21/src/test/ReactTestUtils.js#L83-L91" target="_blank" rel="noopener">a shortcut</a> for the above)</li><li><a href="http://airbnb.io/enzyme/docs/api/mount.html" target="_blank" rel="noopener"><code>mount()</code></a> in <a href="http://airbnb.io/enzyme/index.html" target="_blank" rel="noopener">Enzyme</a></li></ul><p>In contrast, <strong>jsdom is not needed</strong> for the following APIs:</p><ul><li><a href="https://facebook.github.io/react/docs/test-utils.html#shallow-rendering" target="_blank" rel="noopener"><code>TestUtils.createRenderer()</code></a> (shallow rendering)</li><li><a href="http://airbnb.io/enzyme/docs/api/shallow.html" target="_blank" rel="noopener"><code>shallow()</code></a> in <a href="http://airbnb.io/enzyme/index.html" target="_blank" rel="noopener">Enzyme</a></li></ul><p>Finally, jsdom is also not needed for <a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html" target="_blank" rel="noopener">snapshot testing</a>.</p><h3 id="Snapshot-Testing"><a href="#Snapshot-Testing" class="headerlink" title="Snapshot Testing"></a>Snapshot Testing</h3><p>Snapshot testing is a feature of Jest that automatically generates text snapshots of your components and saves them on the disk so if the UI output changes, you get notified without manually writing any assertions on the component output. <a href="http://facebook.github.io/jest/blog/2016/07/27/jest-14.html" target="_blank" rel="noopener">Read more about snapshot testing.</a></p><h3 id="Editor-Integration"><a href="#Editor-Integration" class="headerlink" title="Editor Integration"></a>Editor Integration</h3><p>If you use <a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a>, there is a <a href="https://github.com/orta/vscode-jest" target="_blank" rel="noopener">Jest extension</a> which works with Create React App out of the box. This provides a lot of IDE-like features while using a text editor: showing the status of a test run with potential fail messages inline, starting and stopping the watcher automatically, and offering one-click snapshot updates.</p><p><img src="https://cloud.githubusercontent.com/assets/49038/20795349/a032308a-b7c8-11e6-9b34-7eeac781003f.png" alt="VS Code Jest Preview"></p><h2 id="Debugging-Tests"><a href="#Debugging-Tests" class="headerlink" title="Debugging Tests"></a>Debugging Tests</h2><p>There are various ways to setup a debugger for your Jest tests. We cover debugging in Chrome and <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>.</p><blockquote><p>Note: debugging tests requires Node 8 or higher.</p></blockquote><h3 id="Debugging-Tests-in-Chrome"><a href="#Debugging-Tests-in-Chrome" class="headerlink" title="Debugging Tests in Chrome"></a>Debugging Tests in Chrome</h3><p>Add the following to the <code>scripts</code> section in your project’s <code>package.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "test:debug": "react-scripts --inspect-brk test --runInBand --env=jsdom"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>Place <code>debugger;</code> statements in any test and run:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run <span class="built_in">test</span>:debug</span><br></pre></td></tr></table></figure></p><p>This will start running your Jest tests, but pause before executing to allow a debugger to attach to the process.</p><p>Open the following in Chrome<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">about:inspect</span><br></pre></td></tr></table></figure></p><p>After opening that link, the Chrome Developer Tools will be displayed. Select <code>inspect</code> on your process and a breakpoint will be set at the first line of the react script (this is done simply to give you time to open the developer tools and to prevent Jest from executing before you have time to do so). Click the button that looks like a “play” button in the upper right hand side of the screen to continue execution. When Jest executes the test that contains the debugger statement, execution will pause and you can examine the current scope and call stack.</p><blockquote><p>Note: the –runInBand cli option makes sure Jest runs test in the same process rather than spawning processes for individual tests. Normally Jest parallelizes test runs across processes but it is hard to debug many processes at the same time.</p></blockquote><h3 id="Debugging-Tests-in-Visual-Studio-Code"><a href="#Debugging-Tests-in-Visual-Studio-Code" class="headerlink" title="Debugging Tests in Visual Studio Code"></a>Debugging Tests in Visual Studio Code</h3><p>Debugging Jest tests is supported out of the box for <a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a>.</p><p>Use the following <a href="https://code.visualstudio.com/docs/editor/debugging#_launch-configurations" target="_blank" rel="noopener"><code>launch.json</code></a> configuration file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">  &quot;configurations&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;name&quot;: &quot;Debug CRA Tests&quot;,</span><br><span class="line">      &quot;type&quot;: &quot;node&quot;,</span><br><span class="line">      &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">      &quot;runtimeExecutable&quot;: &quot;$&#123;workspaceRoot&#125;/node_modules/.bin/react-scripts&quot;,      </span><br><span class="line">      &quot;args&quot;: [</span><br><span class="line">        &quot;test&quot;,</span><br><span class="line">        &quot;--runInBand&quot;,</span><br><span class="line">        &quot;--no-cache&quot;,</span><br><span class="line">        &quot;--env=jsdom&quot;</span><br><span class="line">      ],</span><br><span class="line">      &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class="line">      &quot;protocol&quot;: &quot;inspector&quot;,</span><br><span class="line">      &quot;console&quot;: &quot;integratedTerminal&quot;,</span><br><span class="line">      &quot;internalConsoleOptions&quot;: &quot;neverOpen&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Developing-Components-in-Isolation"><a href="#Developing-Components-in-Isolation" class="headerlink" title="Developing Components in Isolation"></a>Developing Components in Isolation</h2><p>Usually, in an app, you have a lot of UI components, and each of them has many different states.<br>For an example, a simple button component could have following states:</p><ul><li>In a regular state, with a text label.</li><li>In the disabled mode.</li><li>In a loading state.</li></ul><p>Usually, it’s hard to see these states without running a sample app or some examples.</p><p>Create React App doesn’t include any tools for this by default, but you can easily add <a href="https://storybook.js.org" target="_blank" rel="noopener">Storybook for React</a> (<a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">source</a>) or <a href="https://react-styleguidist.js.org/" target="_blank" rel="noopener">React Styleguidist</a> (<a href="https://github.com/styleguidist/react-styleguidist" target="_blank" rel="noopener">source</a>) to your project. <strong>These are third-party tools that let you develop components and see all their states in isolation from your app</strong>.</p><p><img src="http://i.imgur.com/7CIAWpB.gif" alt="Storybook for React Demo"></p><p>You can also deploy your Storybook or style guide as a static app. This way, everyone in your team can view and review different states of UI components without starting a backend server or creating an account in your app.</p><h3 id="Getting-Started-with-Storybook"><a href="#Getting-Started-with-Storybook" class="headerlink" title="Getting Started with Storybook"></a>Getting Started with Storybook</h3><p>Storybook is a development environment for React UI components. It allows you to browse a component library, view the different states of each component, and interactively develop and test components.</p><p>First, install the following npm package globally:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @storybook/cli</span><br></pre></td></tr></table></figure><p>Then, run the following command inside your app’s directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getstorybook</span><br></pre></td></tr></table></figure><p>After that, follow the instructions on the screen.</p><p>Learn more about React Storybook:</p><ul><li>Screencast: <a href="https://egghead.io/lessons/react-getting-started-with-react-storybook" target="_blank" rel="noopener">Getting Started with React Storybook</a></li><li><a href="https://github.com/storybooks/storybook" target="_blank" rel="noopener">GitHub Repo</a></li><li><a href="https://storybook.js.org/basics/introduction/" target="_blank" rel="noopener">Documentation</a></li><li><a href="https://github.com/storybooks/storybook/tree/master/addons/storyshots" target="_blank" rel="noopener">Snapshot Testing UI</a> with Storybook + addon/storyshot</li></ul><h3 id="Getting-Started-with-Styleguidist"><a href="#Getting-Started-with-Styleguidist" class="headerlink" title="Getting Started with Styleguidist"></a>Getting Started with Styleguidist</h3><p>Styleguidist combines a style guide, where all your components are presented on a single page with their props documentation and usage examples, with an environment for developing components in isolation, similar to Storybook. In Styleguidist you write examples in Markdown, where each code snippet is rendered as a live editable playground.</p><p>First, install Styleguidist:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-styleguidist</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-styleguidist</span><br></pre></td></tr></table></figure><p>Then, add these scripts to your <code>package.json</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   "scripts": &#123;</span><br><span class="line"><span class="addition">+    "styleguide": "styleguidist server",</span></span><br><span class="line"><span class="addition">+    "styleguide:build": "styleguidist build",</span></span><br><span class="line">     "start": "react-scripts start",</span><br></pre></td></tr></table></figure><p>Then, run the following command inside your app’s directory:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run styleguide</span><br></pre></td></tr></table></figure><p>After that, follow the instructions on the screen.</p><p>Learn more about React Styleguidist:</p><ul><li><a href="https://github.com/styleguidist/react-styleguidist" target="_blank" rel="noopener">GitHub Repo</a></li><li><a href="https://react-styleguidist.js.org/docs/getting-started.html" target="_blank" rel="noopener">Documentation</a></li></ul><h2 id="Publishing-Components-to-npm"><a href="#Publishing-Components-to-npm" class="headerlink" title="Publishing Components to npm"></a>Publishing Components to npm</h2><p>Create React App doesn’t provide any built-in functionality to publish a component to npm. If you’re ready to extract a component from your project so other people can use it, we recommend moving it to a separate directory outside of your project and then using a tool like <a href="https://github.com/insin/nwb#react-components-and-libraries" target="_blank" rel="noopener">nwb</a> to prepare it for publishing.</p><h2 id="Making-a-Progressive-Web-App"><a href="#Making-a-Progressive-Web-App" class="headerlink" title="Making a Progressive Web App"></a>Making a Progressive Web App</h2><p>By default, the production build is a fully functional, offline-first<br><a href="https://developers.google.com/web/progressive-web-apps/" target="_blank" rel="noopener">Progressive Web App</a>.</p><p>Progressive Web Apps are faster and more reliable than traditional web pages, and provide an engaging mobile experience:</p><ul><li>All static site assets are cached so that your page loads fast on subsequent visits, regardless of network connectivity (such as 2G or 3G). Updates are downloaded in the background.</li><li>Your app will work regardless of network state, even if offline. This means your users will be able to use your app at 10,000 feet and on the subway.</li><li>On mobile devices, your app can be added directly to the user’s home screen, app icon and all. You can also re-engage users using web <strong>push notifications</strong>. This eliminates the need for the app store.</li></ul><p>The <a href="https://github.com/goldhand/sw-precache-webpack-plugin" target="_blank" rel="noopener"><code>sw-precache-webpack-plugin</code></a><br>is integrated into production configuration,<br>and it will take care of generating a service worker file that will automatically<br>precache all of your local assets and keep them up to date as you deploy updates.<br>The service worker will use a <a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network" target="_blank" rel="noopener">cache-first strategy</a><br>for handling all requests for local assets, including the initial HTML, ensuring<br>that your web app is reliably fast, even on a slow or unreliable network.</p><h3 id="Opting-Out-of-Caching"><a href="#Opting-Out-of-Caching" class="headerlink" title="Opting Out of Caching"></a>Opting Out of Caching</h3><p>If you would prefer not to enable service workers prior to your initial<br>production deployment, then remove the call to <code>registerServiceWorker()</code><br>from <a href="src/index.js"><code>src/index.js</code></a>.</p><p>If you had previously enabled service workers in your production deployment and<br>have decided that you would like to disable them for all your existing users,<br>you can swap out the call to <code>registerServiceWorker()</code> in<br><a href="src/index.js"><code>src/index.js</code></a> first by modifying the service worker import:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; unregister &#125; <span class="keyword">from</span> <span class="string">'./registerServiceWorker'</span>;</span><br></pre></td></tr></table></figure></p><p>and then call <code>unregister()</code> instead.<br>After the user visits a page that has <code>unregister()</code>,<br>the service worker will be uninstalled. Note that depending on how <code>/service-worker.js</code> is served,<br>it may take up to 24 hours for the cache to be invalidated.</p><h3 id="Offline-First-Considerations"><a href="#Offline-First-Considerations" class="headerlink" title="Offline-First Considerations"></a>Offline-First Considerations</h3><ol><li><p>Service workers <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers#you_need_https" target="_blank" rel="noopener">require HTTPS</a>,<br>although to facilitate local testing, that policy<br><a href="http://stackoverflow.com/questions/34160509/options-for-testing-service-workers-via-http/34161385#34161385" target="_blank" rel="noopener">does not apply to <code>localhost</code></a>.<br>If your production web server does not support HTTPS, then the service worker<br>registration will fail, but the rest of your web app will remain functional.</p></li><li><p>Service workers are <a href="https://jakearchibald.github.io/isserviceworkerready/" target="_blank" rel="noopener">not currently supported</a><br>in all web browsers. Service worker registration <a href="src/registerServiceWorker.js">won’t be attempted</a><br>on browsers that lack support.</p></li><li><p>The service worker is only enabled in the <a href="#deployment">production environment</a>,<br>e.g. the output of <code>npm run build</code>. It’s recommended that you do not enable an<br>offline-first service worker in a development environment, as it can lead to<br>frustration when previously cached assets are used and do not include the latest<br>changes you’ve made locally.</p></li><li><p>If you <em>need</em> to test your offline-first service worker locally, build<br>the application (using <code>npm run build</code>) and run a simple http server from your<br>build directory. After running the build script, <code>create-react-app</code> will give<br>instructions for one way to test your production build locally and the <a href="#deployment">deployment instructions</a> have<br>instructions for using other methods. <em>Be sure to always use an<br>incognito window to avoid complications with your browser cache.</em></p></li><li><p>If possible, configure your production environment to serve the generated<br><code>service-worker.js</code> <a href="http://stackoverflow.com/questions/38843970/service-worker-javascript-update-frequency-every-24-hours" target="_blank" rel="noopener">with HTTP caching disabled</a>.<br>If that’s not possible—<a href="#github-pages">GitHub Pages</a>, for instance, does not<br>allow you to change the default 10 minute HTTP cache lifetime—then be aware<br>that if you visit your production site, and then revisit again before<br><code>service-worker.js</code> has expired from your HTTP cache, you’ll continue to get<br>the previously cached assets from the service worker. If you have an immediate<br>need to view your updated production deployment, performing a shift-refresh<br>will temporarily disable the service worker and retrieve all assets from the<br>network.</p></li><li><p>Users aren’t always familiar with offline-first web apps. It can be useful to<br><a href="https://developers.google.com/web/fundamentals/instant-and-offline/offline-ux#inform_the_user_when_the_app_is_ready_for_offline_consumption" target="_blank" rel="noopener">let the user know</a><br>when the service worker has finished populating your caches (showing a “This web<br>app works offline!” message) and also let them know when the service worker has<br>fetched the latest updates that will be available the next time they load the<br>page (showing a “New content is available; please refresh.” message). Showing<br>this messages is currently left as an exercise to the developer, but as a<br>starting point, you can make use of the logic included in <a href="src/registerServiceWorker.js"><code>src/registerServiceWorker.js</code></a>, which<br>demonstrates which service worker lifecycle events to listen for to detect each<br>scenario, and which as a default, just logs appropriate messages to the<br>JavaScript console.</p></li><li><p>By default, the generated service worker file will not intercept or cache any<br>cross-origin traffic, like HTTP <a href="#integrating-with-an-api-backend">API requests</a>,<br>images, or embeds loaded from a different domain. If you would like to use a<br>runtime caching strategy for those requests, you can <a href="#npm-run-eject"><code>eject</code></a><br>and then configure the<br><a href="https://github.com/GoogleChrome/sw-precache#runtimecaching-arrayobject" target="_blank" rel="noopener"><code>runtimeCaching</code></a><br>option in the <code>SWPrecacheWebpackPlugin</code> section of<br><a href="../config/webpack.config.prod.js"><code>webpack.config.prod.js</code></a>.</p></li></ol><h3 id="Progressive-Web-App-Metadata"><a href="#Progressive-Web-App-Metadata" class="headerlink" title="Progressive Web App Metadata"></a>Progressive Web App Metadata</h3><p>The default configuration includes a web app manifest located at<br><a href="public/manifest.json"><code>public/manifest.json</code></a>, that you can customize with<br>details specific to your web application.</p><p>When a user adds a web app to their homescreen using Chrome or Firefox on<br>Android, the metadata in <a href="public/manifest.json"><code>manifest.json</code></a> determines what<br>icons, names, and branding colors to use when the web app is displayed.<br><a href="https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/" target="_blank" rel="noopener">The Web App Manifest guide</a><br>provides more context about what each field means, and how your customizations<br>will affect your users’ experience.</p><h2 id="Analyzing-the-Bundle-Size"><a href="#Analyzing-the-Bundle-Size" class="headerlink" title="Analyzing the Bundle Size"></a>Analyzing the Bundle Size</h2><p><a href="https://www.npmjs.com/package/source-map-explorer" target="_blank" rel="noopener">Source map explorer</a> analyzes<br>JavaScript bundles using the source maps. This helps you understand where code<br>bloat is coming from.</p><p>To add Source map explorer to a Create React App project, follow these steps:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save <span class="built_in">source</span>-map-explorer</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add <span class="built_in">source</span>-map-explorer</span><br></pre></td></tr></table></figure><p>Then in <code>package.json</code>, add the following line to <code>scripts</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   "scripts": &#123;</span><br><span class="line"><span class="addition">+    "analyze": "source-map-explorer build/static/js/main.*",</span></span><br><span class="line">     "start": "react-scripts start",</span><br><span class="line">     "build": "react-scripts build",</span><br><span class="line">     "test": "react-scripts test --env=jsdom",</span><br></pre></td></tr></table></figure><p>Then to analyze the bundle run the production build then run the analyze<br>script.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run analyze</span><br></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p><code>npm run build</code> creates a <code>build</code> directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served <code>index.html</code>, and requests to static paths like <code>/static/js/main.&lt;hash&gt;.js</code> are served with the contents of the <code>/static/js/main.&lt;hash&gt;.js</code> file.</p><h3 id="Static-Server"><a href="#Static-Server" class="headerlink" title="Static Server"></a>Static Server</h3><p>For environments using <a href="https://nodejs.org/" target="_blank" rel="noopener">Node</a>, the easiest way to handle this would be to install <a href="https://github.com/zeit/serve" target="_blank" rel="noopener">serve</a> and let it handle the rest:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g serve</span><br><span class="line">serve -s build</span><br></pre></td></tr></table></figure><p>The last command shown above will serve your static site on the port <strong>5000</strong>. Like many of <a href="https://github.com/zeit/serve" target="_blank" rel="noopener">serve</a>’s internal settings, the port can be adjusted using the <code>-p</code> or <code>--port</code> flags.</p><p>Run this command to get a full list of the options available:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve -h</span><br></pre></td></tr></table></figure><h3 id="Other-Solutions"><a href="#Other-Solutions" class="headerlink" title="Other Solutions"></a>Other Solutions</h3><p>You don’t necessarily need a static server in order to run a Create React App project in production. It works just as fine integrated into an existing dynamic one.</p><p>Here’s a programmatic example using <a href="https://nodejs.org/" target="_blank" rel="noopener">Node</a> and <a href="http://expressjs.com/" target="_blank" rel="noopener">Express</a>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'build'</span>)));</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.sendFile(path.join(__dirname, <span class="string">'build'</span>, <span class="string">'index.html'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">9000</span>);</span><br></pre></td></tr></table></figure><p>The choice of your server software isn’t important either. Since Create React App is completely platform-agnostic, there’s no need to explicitly use Node.</p><p>The <code>build</code> folder with static assets is the only output produced by Create React App.</p><p>However this is not quite enough if you use client-side routing. Read the next section if you want to support URLs like <code>/todos/42</code> in your single-page app.</p><h3 id="Serving-Apps-with-Client-Side-Routing"><a href="#Serving-Apps-with-Client-Side-Routing" class="headerlink" title="Serving Apps with Client-Side Routing"></a>Serving Apps with Client-Side Routing</h3><p>If you use routers that use the HTML5 <a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" target="_blank" rel="noopener"><code>pushState</code> history API</a> under the hood (for example, <a href="https://github.com/ReactTraining/react-router" target="_blank" rel="noopener">React Router</a> with <code>browserHistory</code>), many static file servers will fail. For example, if you used React Router with a route for <code>/todos/42</code>, the development server will respond to <code>localhost:3000/todos/42</code> properly, but an Express serving a production build as above will not.</p><p>This is because when there is a fresh page load for a <code>/todos/42</code>, the server looks for the file <code>build/todos/42</code> and does not find it. The server needs to be configured to respond to a request to <code>/todos/42</code> by serving <code>index.html</code>. For example, we can amend our Express example above to serve <code>index.html</code> for any unknown paths:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> app.use(express.static(path.join(__dirname, 'build')));</span><br><span class="line"></span><br><span class="line"><span class="deletion">-app.get('/', function (req, res) &#123;</span></span><br><span class="line"><span class="addition">+app.get('/*', function (req, res) &#123;</span></span><br><span class="line">   res.sendFile(path.join(__dirname, 'build', 'index.html'));</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>If you’re using <a href="https://httpd.apache.org/" target="_blank" rel="noopener">Apache HTTP Server</a>, you need to create a <code>.htaccess</code> file in the <code>public</code> folder that looks like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Options -MultiViews</span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">RewriteRule ^ index.html [QSA,L]</span><br></pre></td></tr></table></figure><p>It will get copied to the <code>build</code> folder when you run <code>npm run build</code>. </p><p>If you’re using <a href="http://tomcat.apache.org/" target="_blank" rel="noopener">Apache Tomcat</a>, you need to follow <a href="https://stackoverflow.com/a/41249464/4878474" target="_blank" rel="noopener">this Stack Overflow answer</a>.</p><p>Now requests to <code>/todos/42</code> will be handled correctly both in development and in production.</p><p>On a production build, and in a browser that supports <a href="https://developers.google.com/web/fundamentals/getting-started/primers/service-workers" target="_blank" rel="noopener">service workers</a>,<br>the service worker will automatically handle all navigation requests, like for<br><code>/todos/42</code>, by serving the cached copy of your <code>index.html</code>. This<br>service worker navigation routing can be configured or disabled by<br><a href="#npm-run-eject"><code>eject</code>ing</a> and then modifying the<br><a href="https://github.com/GoogleChrome/sw-precache#navigatefallback-string" target="_blank" rel="noopener"><code>navigateFallback</code></a><br>and <a href="https://github.com/GoogleChrome/sw-precache#navigatefallbackwhitelist-arrayregexp" target="_blank" rel="noopener"><code>navigateFallbackWhitelist</code></a><br>options of the <code>SWPreachePlugin</code> <a href="../config/webpack.config.prod.js">configuration</a>.</p><p>When users install your app to the homescreen of their device the default configuration will make a shortcut to <code>/index.html</code>. This may not work for client-side routers which expect the app to be served from <code>/</code>. Edit the web app manifest at <a href="public/manifest.json"><code>public/manifest.json</code></a> and change <code>start_url</code> to match the required URL scheme, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start_url"</span>: <span class="string">"."</span>,</span><br></pre></td></tr></table></figure><h3 id="Building-for-Relative-Paths"><a href="#Building-for-Relative-Paths" class="headerlink" title="Building for Relative Paths"></a>Building for Relative Paths</h3><p>By default, Create React App produces a build assuming your app is hosted at the server root.<br><br>To override this, specify the <code>homepage</code> in your <code>package.json</code>, for example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"http://mywebsite.com/relativepath"</span>,</span><br></pre></td></tr></table></figure><p>This will let Create React App correctly infer the root path to use in the generated HTML file.</p><p><strong>Note</strong>: If you are using <code>react-router@^4</code>, you can root <code>&lt;Link&gt;</code>s using the <code>basename</code> prop on any <code>&lt;Router&gt;</code>.<br><br>More information <a href="https://reacttraining.com/react-router/web/api/BrowserRouter/basename-string" target="_blank" rel="noopener">here</a>.<br><br><br><br>For example:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;BrowserRouter basename=<span class="string">"/calendar"</span>/&gt;</span><br><span class="line">&lt;Link to=<span class="string">"/today"</span>/&gt; <span class="comment">// renders &lt;a href="/calendar/today"&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="Serving-the-Same-Build-from-Different-Paths"><a href="#Serving-the-Same-Build-from-Different-Paths" class="headerlink" title="Serving the Same Build from Different Paths"></a>Serving the Same Build from Different Paths</h4><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.9.0" target="_blank" rel="noopener">`react-scripts@0.9.0</a>` and higher.</p></blockquote><p>If you are not using the HTML5 <code>pushState</code> history API or not using client-side routing at all, it is unnecessary to specify the URL from which your app will be served. Instead, you can put this in your <code>package.json</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"."</span>,</span><br></pre></td></tr></table></figure><p>This will make sure that all the asset paths are relative to <code>index.html</code>. You will then be able to move your app from <code>http://mywebsite.com</code> to <code>http://mywebsite.com/relativepath</code> or even <code>http://mywebsite.com/relative/path</code> without having to rebuild it.</p><h3 id="Azure"><a href="#Azure" class="headerlink" title="Azure"></a><a href="https://azure.microsoft.com/" target="_blank" rel="noopener">Azure</a></h3><p>See <a href="https://medium.com/@to_pe/deploying-create-react-app-on-microsoft-azure-c0f6686a4321" target="_blank" rel="noopener">this</a> blog post on how to deploy your React app to Microsoft Azure.</p><p>See <a href="https://medium.com/@strid/host-create-react-app-on-azure-986bc40d5bf2#.pycfnafbg" target="_blank" rel="noopener">this</a> blog post or <a href="https://github.com/ulrikaugustsson/azure-appservice-static" target="_blank" rel="noopener">this</a> repo for a way to use automatic deployment to Azure App Service.</p><h3 id="Firebase"><a href="#Firebase" class="headerlink" title="Firebase"></a><a href="https://firebase.google.com/" target="_blank" rel="noopener">Firebase</a></h3><p>Install the Firebase CLI if you haven’t already by running <code>npm install -g firebase-tools</code>. Sign up for a <a href="https://console.firebase.google.com/" target="_blank" rel="noopener">Firebase account</a> and create a new project. Run <code>firebase login</code> and login with your previous created Firebase account.</p><p>Then run the <code>firebase init</code> command from your project’s root. You need to choose the <strong>Hosting: Configure and deploy Firebase Hosting sites</strong> and choose the Firebase project you created in the previous step. You will need to agree with <code>database.rules.json</code> being created, choose <code>build</code> as the public directory, and also agree to <strong>Configure as a single-page app</strong> by replying with <code>y</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">=== Project Setup</span><br><span class="line"></span><br><span class="line">First, <span class="built_in">let</span><span class="string">'s associate this project directory with a Firebase project.</span></span><br><span class="line"><span class="string">You can create multiple project aliases by running firebase use --add,</span></span><br><span class="line"><span class="string">but for now we'</span>ll just <span class="built_in">set</span> up a default project.</span><br><span class="line"></span><br><span class="line">? What Firebase project <span class="keyword">do</span> you want to associate as default? Example app (example-app-fd690)</span><br><span class="line"></span><br><span class="line">=== Database Setup</span><br><span class="line"></span><br><span class="line">Firebase Realtime Database Rules allow you to define how your data should be</span><br><span class="line">structured and when your data can be <span class="built_in">read</span> from and written to.</span><br><span class="line"></span><br><span class="line">? What file should be used <span class="keyword">for</span> Database Rules? database.rules.json</span><br><span class="line">✔  Database Rules <span class="keyword">for</span> example-app-fd690 have been downloaded to database.rules.json.</span><br><span class="line">Future modifications to database.rules.json will update Database Rules when you run</span><br><span class="line">firebase deploy.</span><br><span class="line"></span><br><span class="line">=== Hosting Setup</span><br><span class="line"></span><br><span class="line">Your public directory is the folder (relative to your project directory) that</span><br><span class="line">will contain Hosting assets to uploaded with firebase deploy. If you</span><br><span class="line">have a build process <span class="keyword">for</span> your assets, use your build<span class="string">'s output directory.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">? What do you want to use as your public directory? build</span></span><br><span class="line"><span class="string">? Configure as a single-page app (rewrite all urls to /index.html)? Yes</span></span><br><span class="line"><span class="string">✔  Wrote build/index.html</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">i  Writing configuration info to firebase.json...</span></span><br><span class="line"><span class="string">i  Writing project information to .firebaserc...</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">✔  Firebase initialization complete!</span></span><br></pre></td></tr></table></figure><p>IMPORTANT: you need to set proper HTTP caching headers for <code>service-worker.js</code> file in <code>firebase.json</code> file or you will not be able to see changes after first deployment (<a href="https://github.com/facebookincubator/create-react-app/issues/2440" target="_blank" rel="noopener">issue #2440</a>). It should be added inside <code>&quot;hosting&quot;</code> key like next:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;hosting&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">    &quot;headers&quot;: [</span><br><span class="line">      &#123;&quot;source&quot;: &quot;/service-worker.js&quot;, &quot;headers&quot;: [&#123;&quot;key&quot;: &quot;Cache-Control&quot;, &quot;value&quot;: &quot;no-cache&quot;&#125;]&#125;</span><br><span class="line">    ]</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>Now, after you create a production build with <code>npm run build</code>, you can deploy it by running <code>firebase deploy</code>.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">=== Deploying to <span class="string">'example-app-fd690'</span>...</span><br><span class="line"></span><br><span class="line">i  deploying database, hosting</span><br><span class="line">✔  database: rules ready to deploy.</span><br><span class="line">i  hosting: preparing build directory <span class="keyword">for</span> upload...</span><br><span class="line">Uploading: [==============================          ] 75%✔  hosting: build folder uploaded successfully</span><br><span class="line">✔  hosting: 8 files uploaded successfully</span><br><span class="line">i  starting release process (may take several minutes)...</span><br><span class="line"></span><br><span class="line">✔  Deploy complete!</span><br><span class="line"></span><br><span class="line">Project Console: https://console.firebase.google.com/project/example-app-fd690/overview</span><br><span class="line">Hosting URL: https://example-app-fd690.firebaseapp.com</span><br></pre></td></tr></table></figure><p>For more information see <a href="https://firebase.google.com/docs/web/setup" target="_blank" rel="noopener">Add Firebase to your JavaScript Project</a>.</p><h3 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></h3><blockquote><p>Note: this feature is available with <a href="mailto:`react-scripts@0.2.0" target="_blank" rel="noopener">`react-scripts@0.2.0</a>` and higher.</p></blockquote><h4 id="Step-1-Add-homepage-to-package-json"><a href="#Step-1-Add-homepage-to-package-json" class="headerlink" title="Step 1: Add homepage to package.json"></a>Step 1: Add <code>homepage</code> to <code>package.json</code></h4><p><strong>The step below is important!</strong><br><br><strong>If you skip it, your app will not deploy correctly.</strong></p><p>Open your <code>package.json</code> and add a <code>homepage</code> field for your project:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"homepage": "https://myusername.github.io/my-app",</span><br></pre></td></tr></table></figure><p>or for a GitHub user page:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"homepage": "https://myusername.github.io",</span><br></pre></td></tr></table></figure><p>Create React App uses the <code>homepage</code> field to determine the root URL in the built HTML file.</p><h4 id="Step-2-Install-gh-pages-and-add-deploy-to-scripts-in-package-json"><a href="#Step-2-Install-gh-pages-and-add-deploy-to-scripts-in-package-json" class="headerlink" title="Step 2: Install gh-pages and add deploy to scripts in package.json"></a>Step 2: Install <code>gh-pages</code> and add <code>deploy</code> to <code>scripts</code> in <code>package.json</code></h4><p>Now, whenever you run <code>npm run build</code>, you will see a cheat sheet with instructions on how to deploy to GitHub Pages.</p><p>To publish it at <a href="https://myusername.github.io/my-app" target="_blank" rel="noopener">https://myusername.github.io/my-app</a>, run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save gh-pages</span><br></pre></td></tr></table></figure><p>Alternatively you may use <code>yarn</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add gh-pages</span><br></pre></td></tr></table></figure><p>Add the following scripts in your <code>package.json</code>:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line"><span class="addition">+   "predeploy": "npm run build",</span></span><br><span class="line"><span class="addition">+   "deploy": "gh-pages -d build",</span></span><br><span class="line">    "start": "react-scripts start",</span><br><span class="line">    "build": "react-scripts build",</span><br></pre></td></tr></table></figure><p>The <code>predeploy</code> script will run automatically before <code>deploy</code> is run.</p><p>If you are deploying to a GitHub user page instead of a project page you’ll need to make two<br>additional modifications:</p><ol><li>First, change your repository’s source branch to be any branch other than <strong>master</strong>.</li><li>Additionally, tweak your <code>package.json</code> scripts to push deployments to <strong>master</strong>:<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  "scripts": &#123;</span><br><span class="line">    "predeploy": "npm run build",</span><br><span class="line"><span class="deletion">-   "deploy": "gh-pages -d build",</span></span><br><span class="line"><span class="addition">+   "deploy": "gh-pages -b master -d build",</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Step-3-Deploy-the-site-by-running-npm-run-deploy"><a href="#Step-3-Deploy-the-site-by-running-npm-run-deploy" class="headerlink" title="Step 3: Deploy the site by running npm run deploy"></a>Step 3: Deploy the site by running <code>npm run deploy</code></h4><p>Then run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run deploy</span><br></pre></td></tr></table></figure><h4 id="Step-4-Ensure-your-project’s-settings-use-gh-pages"><a href="#Step-4-Ensure-your-project’s-settings-use-gh-pages" class="headerlink" title="Step 4: Ensure your project’s settings use gh-pages"></a>Step 4: Ensure your project’s settings use <code>gh-pages</code></h4><p>Finally, make sure <strong>GitHub Pages</strong> option in your GitHub project settings is set to use the <code>gh-pages</code> branch:</p><p><img src="http://i.imgur.com/HUjEr9l.png" width="500" alt="gh-pages branch setting"></p><h4 id="Step-5-Optionally-configure-the-domain"><a href="#Step-5-Optionally-configure-the-domain" class="headerlink" title="Step 5: Optionally, configure the domain"></a>Step 5: Optionally, configure the domain</h4><p>You can configure a custom domain with GitHub Pages by adding a <code>CNAME</code> file to the <code>public/</code> folder.</p><h4 id="Notes-on-client-side-routing"><a href="#Notes-on-client-side-routing" class="headerlink" title="Notes on client-side routing"></a>Notes on client-side routing</h4><p>GitHub Pages doesn’t support routers that use the HTML5 <code>pushState</code> history API under the hood (for example, React Router using <code>browserHistory</code>). This is because when there is a fresh page load for a url like <code>http://user.github.io/todomvc/todos/42</code>, where <code>/todos/42</code> is a frontend route, the GitHub Pages server returns 404 because it knows nothing of <code>/todos/42</code>. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:</p><ul><li>You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to <code>hashHistory</code> for this effect, but the URL will be longer and more verbose (for example, <code>http://user.github.io/todomvc/#/todos/42?_k=yknaj</code>). <a href="https://reacttraining.com/react-router/web/api/Router" target="_blank" rel="noopener">Read more</a> about different history implementations in React Router.</li><li>Alternatively, you can use a trick to teach GitHub Pages to handle 404 by redirecting to your <code>index.html</code> page with a special redirect parameter. You would need to add a <code>404.html</code> file with the redirection code to the <code>build</code> folder before deploying your project, and you’ll need to add code handling the redirect parameter to <code>index.html</code>. You can find a detailed explanation of this technique <a href="https://github.com/rafrex/spa-github-pages" target="_blank" rel="noopener">in this guide</a>.</li></ul><h4 id="Troubleshooting"><a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h4><h5 id="“-dev-tty-No-such-a-device-or-address”"><a href="#“-dev-tty-No-such-a-device-or-address”" class="headerlink" title="“/dev/tty: No such a device or address”"></a>“/dev/tty: No such a device or address”</h5><p>If, when deploying, you get <code>/dev/tty: No such a device or address</code> or a similar error, try the follwing:</p><ol><li>Create a new <a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Token</a></li><li><code>git remote set-url origin https://&lt;user&gt;:&lt;token&gt;@github.com/&lt;user&gt;/&lt;repo&gt;</code> .</li><li>Try <code>npm run deploy again</code></li></ol><h3 id="Heroku"><a href="#Heroku" class="headerlink" title="Heroku"></a><a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a></h3><p>Use the <a href="https://github.com/mars/create-react-app-buildpack" target="_blank" rel="noopener">Heroku Buildpack for Create React App</a>.<br><br>You can find instructions in <a href="https://blog.heroku.com/deploying-react-with-zero-configuration" target="_blank" rel="noopener">Deploying React with Zero Configuration</a>.</p><h4 id="Resolving-Heroku-Deployment-Errors"><a href="#Resolving-Heroku-Deployment-Errors" class="headerlink" title="Resolving Heroku Deployment Errors"></a>Resolving Heroku Deployment Errors</h4><p>Sometimes <code>npm run build</code> works locally but fails during deploy via Heroku. Following are the most common cases.</p><h5 id="“Module-not-found-Error-Cannot-resolve-‘file’-or-‘directory’”"><a href="#“Module-not-found-Error-Cannot-resolve-‘file’-or-‘directory’”" class="headerlink" title="“Module not found: Error: Cannot resolve ‘file’ or ‘directory’”"></a>“Module not found: Error: Cannot resolve ‘file’ or ‘directory’”</h5><p>If you get something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remote: Failed to create a production build. Reason:</span><br><span class="line">remote: Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos;</span><br><span class="line">MyDirectory in /tmp/build_1234/src</span><br></pre></td></tr></table></figure><p>It means you need to ensure that the lettercase of the file or directory you <code>import</code> matches the one you see on your filesystem or on GitHub.</p><p>This is important because Linux (the operating system used by Heroku) is case sensitive. So <code>MyDirectory</code> and <code>mydirectory</code> are two distinct directories and thus, even though the project builds locally, the difference in case breaks the <code>import</code> statements on Heroku remotes.</p><h5 id="“Could-not-find-a-required-file-”"><a href="#“Could-not-find-a-required-file-”" class="headerlink" title="“Could not find a required file.”"></a>“Could not find a required file.”</h5><p>If you exclude or ignore necessary files from the package you will see a error similar this one:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">remote: Could not find a required file.</span><br><span class="line">remote:   Name: `index.html`</span><br><span class="line">remote:   Searched in: /tmp/build_a2875fc163b209225122d68916f1d4df/public</span><br><span class="line">remote:</span><br><span class="line">remote: npm ERR! Linux 3.13.0-105-generic</span><br><span class="line">remote: npm ERR! argv &quot;/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/node&quot; &quot;/tmp/build_a2875fc163b209225122d68916f1d4df/.heroku/node/bin/npm&quot; &quot;run&quot; &quot;build&quot;</span><br></pre></td></tr></table></figure><p>In this case, ensure that the file is there with the proper lettercase and that’s not ignored on your local <code>.gitignore</code> or <code>~/.gitignore_global</code>.</p><h3 id="Netlify"><a href="#Netlify" class="headerlink" title="Netlify"></a><a href="https://www.netlify.com/" target="_blank" rel="noopener">Netlify</a></h3><p><strong>To do a manual deploy to Netlify’s CDN:</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install netlify-cli -g</span><br><span class="line">netlify deploy</span><br></pre></td></tr></table></figure><p>Choose <code>build</code> as the path to deploy.</p><p><strong>To setup continuous delivery:</strong></p><p>With this setup Netlify will build and deploy when you push to git or open a pull request:</p><ol><li><a href="https://app.netlify.com/signup" target="_blank" rel="noopener">Start a new netlify project</a></li><li>Pick your Git hosting service and select your repository</li><li>Set <code>yarn build</code> as the build command and <code>build</code> as the publish directory</li><li>Click <code>Deploy site</code></li></ol><p><strong>Support for client-side routing:</strong></p><p>To support <code>pushState</code>, make sure to create a <code>public/_redirects</code> file with the following rewrite rules:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/*  /index.html  200</span><br></pre></td></tr></table></figure><p>When you build the project, Create React App will place the <code>public</code> folder contents into the build output.</p><h3 id="Now"><a href="#Now" class="headerlink" title="Now"></a><a href="https://zeit.co/now" target="_blank" rel="noopener">Now</a></h3><p>Now offers a zero-configuration single-command deployment. You can use <code>now</code> to deploy your app for free.</p><ol><li><p>Install the <code>now</code> command-line tool either via the recommended <a href="https://zeit.co/download" target="_blank" rel="noopener">desktop tool</a> or via node with <code>npm install -g now</code>.</p></li><li><p>Build your app by running <code>npm run build</code>.</p></li><li><p>Move into the build directory by running <code>cd build</code>.</p></li><li><p>Run <code>now --name your-project-name</code> from within the build directory. You will see a <strong>now.sh</strong> URL in your output like this:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Ready! https://your-project-name-tpspyhtdtk.now.sh (copied to clipboard)</span><br></pre></td></tr></table></figure><p> Paste that URL into your browser when the build is complete, and you will see your deployed app.</p></li></ol><p>Details are available in <a href="https://zeit.co/blog/unlimited-static" target="_blank" rel="noopener">this article.</a></p><h3 id="S3-and-CloudFront"><a href="#S3-and-CloudFront" class="headerlink" title="S3 and CloudFront"></a><a href="https://aws.amazon.com/s3" target="_blank" rel="noopener">S3</a> and <a href="https://aws.amazon.com/cloudfront/" target="_blank" rel="noopener">CloudFront</a></h3><p>See this <a href="https://medium.com/@omgwtfmarc/deploying-create-react-app-to-s3-or-cloudfront-48dae4ce0af" target="_blank" rel="noopener">blog post</a> on how to deploy your React app to Amazon Web Services S3 and CloudFront.</p><h3 id="Surge"><a href="#Surge" class="headerlink" title="Surge"></a><a href="https://surge.sh/" target="_blank" rel="noopener">Surge</a></h3><p>Install the Surge CLI if you haven’t already by running <code>npm install -g surge</code>. Run the <code>surge</code> command and log in you or create a new account.</p><p>When asked about the project path, make sure to specify the <code>build</code> folder, for example:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project path: /path/to/project/build</span><br></pre></td></tr></table></figure><p>Note that in order to support routers that use HTML5 <code>pushState</code> API, you may want to rename the <code>index.html</code> in your build folder to <code>200.html</code> before deploying to Surge. This <a href="https://surge.sh/help/adding-a-200-page-for-client-side-routing" target="_blank" rel="noopener">ensures that every URL falls back to that file</a>.</p><h2 id="Advanced-Configuration"><a href="#Advanced-Configuration" class="headerlink" title="Advanced Configuration"></a>Advanced Configuration</h2><p>You can adjust various development and production settings by setting environment variables in your shell or with <a href="#adding-development-environment-variables-in-env">.env</a>.</p><table><thead><tr><th style="text-align:left">Variable</th><th style="text-align:center">Development</th><th style="text-align:center">Production</th><th style="text-align:left">Usage</th></tr></thead><tbody><tr><td style="text-align:left">BROWSER</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:x:</td><td style="text-align:left">By default, Create React App will open the default system browser, favoring Chrome on macOS. Specify a <a href="https://github.com/sindresorhus/opn#app" target="_blank" rel="noopener">browser</a> to override this behavior, or set it to <code>none</code> to disable it completely. If you need to customize the way the browser is launched, you can specify a node script instead. Any arguments passed to <code>npm start</code> will also be passed to this script, and the url where your app is served will be the last argument. Your script’s file name must have the <code>.js</code> extension.</td></tr><tr><td style="text-align:left">HOST</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:x:</td><td style="text-align:left">By default, the development web server binds to <code>localhost</code>. You may use this variable to specify a different host.</td></tr><tr><td style="text-align:left">PORT</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:x:</td><td style="text-align:left">By default, the development web server will attempt to listen on port 3000 or prompt you to attempt the next available port. You may use this variable to specify a different port.</td></tr><tr><td style="text-align:left">HTTPS</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:x:</td><td style="text-align:left">When set to <code>true</code>, Create React App will run the development server in <code>https</code> mode.</td></tr><tr><td style="text-align:left">PUBLIC_URL</td><td style="text-align:center">:x:</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:left">Create React App assumes your application is hosted at the serving web server’s root or a subpath as specified in <a href="#building-for-relative-paths"><code>package.json</code> (<code>homepage</code>)</a>. Normally, Create React App ignores the hostname. You may use this variable to force assets to be referenced verbatim to the url you provide (hostname included). This may be particularly useful when using a CDN to host your application.</td></tr><tr><td style="text-align:left">CI</td><td style="text-align:center">:large_orange_diamond:</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:left">When set to <code>true</code>, Create React App treats warnings as failures in the build. It also makes the test runner non-watching. Most CIs set this flag by default.</td></tr><tr><td style="text-align:left">REACT_EDITOR</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:x:</td><td style="text-align:left">When an app crashes in development, you will see an error overlay with clickable stack trace. When you click on it, Create React App will try to determine the editor you are using based on currently running processes, and open the relevant source file. You can <a href="https://github.com/facebookincubator/create-react-app/issues/2636" target="_blank" rel="noopener">send a pull request to detect your editor of choice</a>. Setting this environment variable overrides the automatic detection. If you do it, make sure your systems <a href="https://en.wikipedia.org/wiki/PATH_(variable" target="_blank" rel="noopener">PATH</a>) environment variable points to your editor’s bin folder. You can also set it to <code>none</code> to disable it completely.</td></tr><tr><td style="text-align:left">CHOKIDAR_USEPOLLING</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:x:</td><td style="text-align:left">When set to <code>true</code>, the watcher runs in polling mode, as necessary inside a VM. Use this option if <code>npm start</code> isn’t detecting changes.</td></tr><tr><td style="text-align:left">GENERATE_SOURCEMAP</td><td style="text-align:center">:x:</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:left">When set to <code>false</code>, source maps are not generated for a production build. This solves OOM issues on some smaller machines.</td></tr><tr><td style="text-align:left">NODE_PATH</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:center">:white_check_mark:</td><td style="text-align:left">Same as <a href="https://nodejs.org/api/modules.html#modules_loading_from_the_global_folders" target="_blank" rel="noopener"><code>NODE_PATH</code> in Node.js</a>, but only relative folders are allowed. Can be handy for emulating a monorepo setup by setting <code>NODE_PATH=src</code>.</td></tr></tbody></table><h2 id="Troubleshooting-1"><a href="#Troubleshooting-1" class="headerlink" title="Troubleshooting"></a>Troubleshooting</h2><h3 id="npm-start-doesn’t-detect-changes"><a href="#npm-start-doesn’t-detect-changes" class="headerlink" title="npm start doesn’t detect changes"></a><code>npm start</code> doesn’t detect changes</h3><p>When you save a file while <code>npm start</code> is running, the browser should refresh with the updated code.<br><br>If this doesn’t happen, try one of the following workarounds:</p><ul><li>If your project is in a Dropbox folder, try moving it out.</li><li>If the watcher doesn’t see a file called <code>index.js</code> and you’re referencing it by the folder name, you <a href="https://github.com/facebookincubator/create-react-app/issues/1164" target="_blank" rel="noopener">need to restart the watcher</a> due to a Webpack bug.</li><li>Some editors like Vim and IntelliJ have a “safe write” feature that currently breaks the watcher. You will need to disable it. Follow the instructions in <a href="https://webpack.js.org/guides/development/#adjusting-your-text-editor" target="_blank" rel="noopener">“Adjusting Your Text Editor”</a>.</li><li>If your project path contains parentheses, try moving the project to a path without them. This is caused by a <a href="https://github.com/webpack/watchpack/issues/42" target="_blank" rel="noopener">Webpack watcher bug</a>.</li><li>On Linux and macOS, you might need to <a href="https://github.com/webpack/docs/wiki/troubleshooting#not-enough-watchers" target="_blank" rel="noopener">tweak system settings</a> to allow more watchers.</li><li>If the project runs inside a virtual machine such as (a Vagrant provisioned) VirtualBox, create an <code>.env</code> file in your project directory if it doesn’t exist, and add <code>CHOKIDAR_USEPOLLING=true</code> to it. This ensures that the next time you run <code>npm start</code>, the watcher uses the polling mode, as necessary inside a VM.</li></ul><p>If none of these solutions help please leave a comment <a href="https://github.com/facebookincubator/create-react-app/issues/659" target="_blank" rel="noopener">in this thread</a>.</p><h3 id="npm-test-hangs-on-macOS-Sierra"><a href="#npm-test-hangs-on-macOS-Sierra" class="headerlink" title="npm test hangs on macOS Sierra"></a><code>npm test</code> hangs on macOS Sierra</h3><p>If you run <code>npm test</code> and the console gets stuck after printing <code>react-scripts test --env=jsdom</code> to the console there might be a problem with your <a href="https://facebook.github.io/watchman/" target="_blank" rel="noopener">Watchman</a> installation as described in <a href="https://github.com/facebookincubator/create-react-app/issues/713" target="_blank" rel="noopener">facebookincubator/create-react-app#713</a>.</p><p>We recommend deleting <code>node_modules</code> in your project and running <code>npm install</code> (or <code>yarn</code> if you use it) first. If it doesn’t help, you can try one of the numerous workarounds mentioned in these issues:</p><ul><li><a href="https://github.com/facebook/jest/issues/1767" target="_blank" rel="noopener">facebook/jest#1767</a></li><li><a href="https://github.com/facebook/watchman/issues/358" target="_blank" rel="noopener">facebook/watchman#358</a></li><li><a href="https://github.com/ember-cli/ember-cli/issues/6259" target="_blank" rel="noopener">ember-cli/ember-cli#6259</a></li></ul><p>It is reported that installing Watchman 4.7.0 or newer fixes the issue. If you use <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a>, you can run these commands to update it:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watchman shutdown-server</span><br><span class="line">brew update</span><br><span class="line">brew reinstall watchman</span><br></pre></td></tr></table></figure><p>You can find <a href="https://facebook.github.io/watchman/docs/install.html#build-install" target="_blank" rel="noopener">other installation methods</a> on the Watchman documentation page.</p><p>If this still doesn’t help, try running <code>launchctl unload -F ~/Library/LaunchAgents/com.github.facebook.watchman.plist</code>.</p><p>There are also reports that <em>uninstalling</em> Watchman fixes the issue. So if nothing else helps, remove it from your system and try again.</p><h3 id="npm-run-build-exits-too-early"><a href="#npm-run-build-exits-too-early" class="headerlink" title="npm run build exits too early"></a><code>npm run build</code> exits too early</h3><p>It is reported that <code>npm run build</code> can fail on machines with limited memory and no swap space, which is common in cloud environments. Even with small projects this command can increase RAM usage in your system by hundreds of megabytes, so if you have less than 1 GB of available memory your build is likely to fail with the following message:</p><blockquote><p> The build failed because the process exited too early. This probably means the system ran out of memory or someone called <code>kill -9</code> on the process.</p></blockquote><p>If you are completely sure that you didn’t terminate the process, consider <a href="https://www.digitalocean.com/community/tutorials/how-to-add-swap-on-ubuntu-14-04" target="_blank" rel="noopener">adding some swap space</a> to the machine you’re building on, or build the project locally.</p><h3 id="npm-run-build-fails-on-Heroku"><a href="#npm-run-build-fails-on-Heroku" class="headerlink" title="npm run build fails on Heroku"></a><code>npm run build</code> fails on Heroku</h3><p>This may be a problem with case sensitive filenames.<br>Please refer to <a href="#resolving-heroku-deployment-errors">this section</a>.</p><h3 id="Moment-js-locales-are-missing"><a href="#Moment-js-locales-are-missing" class="headerlink" title="Moment.js locales are missing"></a>Moment.js locales are missing</h3><p>If you use a <a href="https://momentjs.com/" target="_blank" rel="noopener">Moment.js</a>, you might notice that only the English locale is available by default. This is because the locale files are large, and you probably only need a subset of <a href="https://momentjs.com/#multiple-locale-support" target="_blank" rel="noopener">all the locales provided by Moment.js</a>.</p><p>To add a specific Moment.js locale to your bundle, you need to import it explicitly.<br><br>For example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/fr'</span>;</span><br></pre></td></tr></table></figure><p>If import multiple locales this way, you can later switch between them by calling <code>moment.locale()</code> with the locale name:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">'moment'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/fr'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/es'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">moment.locale(<span class="string">'fr'</span>);</span><br></pre></td></tr></table></figure><p>This will only work for locales that have been explicitly imported before.</p><h3 id="npm-run-build-fails-to-minify"><a href="#npm-run-build-fails-to-minify" class="headerlink" title="npm run build fails to minify"></a><code>npm run build</code> fails to minify</h3><p>Some third-party packages don’t compile their code to ES5 before publishing to npm. This often causes problems in the ecosystem because neither browsers (except for most modern versions) nor some tools currently support all ES6 features. We recommend to publish code on npm as ES5 at least for a few more years.</p><p><br><br>To resolve this:</p><ol><li><p>Open an issue on the dependency’s issue tracker and ask that the package be published pre-compiled.</p><ul><li>Note: Create React App can consume both CommonJS and ES modules. For Node.js compatibility, it is recommended that the main entry point is CommonJS. However, they can optionally provide an ES module entry point with the <code>module</code> field in <code>package.json</code>. Note that <strong>even if a library provides an ES Modules version, it should still precompile other ES6 features to ES5 if it intends to support older browsers</strong>.</li></ul></li><li><p>Fork the package and publish a corrected version yourself. </p></li><li><p>If the dependency is small enough, copy it to your <code>src/</code> folder and treat it as application code.</p></li></ol><p>In the future, we might start automatically compiling incompatible third-party modules, but it is not currently supported. This approach would also slow down the production builds.</p><h2 id="Alternatives-to-Ejecting"><a href="#Alternatives-to-Ejecting" class="headerlink" title="Alternatives to Ejecting"></a>Alternatives to Ejecting</h2><p><a href="#npm-run-eject">Ejecting</a> lets you customize anything, but from that point on you have to maintain the configuration and scripts yourself. This can be daunting if you have many similar projects. In such cases instead of ejecting we recommend to <em>fork</em> <code>react-scripts</code> and any other packages you need. <a href="https://auth0.com/blog/how-to-configure-create-react-app/" target="_blank" rel="noopener">This article</a> dives into how to do it in depth. You can find more discussion in <a href="https://github.com/facebookincubator/create-react-app/issues/682" target="_blank" rel="noopener">this issue</a>.</p><h2 id="Something-Missing"><a href="#Something-Missing" class="headerlink" title="Something Missing?"></a>Something Missing?</h2><p>If you have ideas for more “How To” recipes that should be on this page, <a href="https://github.com/facebookincubator/create-react-app/issues" target="_blank" rel="noopener">let us know</a> or <a href="https://github.com/facebookincubator/create-react-app/edit/master/packages/react-scripts/template/README.md" target="_blank" rel="noopener">contribute some!</a></p>]]></content>
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> 前端知识点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序socket、重力感应、上拉加载下拉刷新、折线表、拖拽</title>
      <link href="/2018/05/27/WxSAUnitTest/"/>
      <url>/2018/05/27/WxSAUnitTest/</url>
      <content type="html"><![CDATA[<p><a href="https://github.com/xueyibokong/wxSAUnitTest" target="_blank" rel="noopener">项目github地址</a></p><h1 id="socket-【多人群聊，用户头像是微信用户信息】"><a href="#socket-【多人群聊，用户头像是微信用户信息】" class="headerlink" title="socket 【多人群聊，用户头像是微信用户信息】"></a>socket 【多人群聊，用户头像是微信用户信息】</h1><p>利用微信的socket与后端完成通道消息传输。</p><center><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/sayhello.gif" alt=""></center><h1 id="重力感应-【云雾动态壁纸】"><a href="#重力感应-【云雾动态壁纸】" class="headerlink" title="重力感应 【云雾动态壁纸】"></a>重力感应 【云雾动态壁纸】</h1><p>利用重力感应将x轴y轴的值动态追加到背景图云雾（3层云雾图）的left和top上，达到摇动手机背景透视的效果。</p><p>#上拉加载下拉刷新<br>此功能为列表常用功能，微信小程序在实现此功能上目前又两种体现在代码中”pages/scrolltest/scrolltest”,<br>“pages/scroll/scroll”两个page中，具体效果亲测可知。需要注意的是：</p><h2 id="1、pages-scrolltest-scrolltest"><a href="#1、pages-scrolltest-scrolltest" class="headerlink" title="1、pages/scrolltest/scrolltest"></a>1、pages/scrolltest/scrolltest</h2><p>scroll-view组件提供的边界判断是无回弹效果的，并且当滚动条已达边界时再向零界方向滑动是不会再次触发边界事件的（不适合做下拉刷新可以做瀑布流）。</p><h2 id="2、pages-scroll-scroll"><a href="#2、pages-scroll-scroll" class="headerlink" title="2、pages/scroll/scroll"></a>2、pages/scroll/scroll</h2><p>而通过onPullDownRefresh事件监听page下拉的动作则又回弹并会重复触发（适合做下拉刷新），onReachBottom事件可以多次触发但同样无回弹（不过可以通过监听到的事件自己做回弹效果，适合做上拉刷新）。</p><h1 id="折线表-【chart】"><a href="#折线表-【chart】" class="headerlink" title="折线表 【chart】"></a>折线表 【chart】</h1><p>通过canvas绘制折线图根据y轴数据最大值计算y轴范围。<br><code>注意：</code> 小程序的canvas重绘制无需清除画布，h5则需要。<br><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/linechange.gif" alt=""></p><h1 id="拖拽-【列表左滑动】"><a href="#拖拽-【列表左滑动】" class="headerlink" title="拖拽 【列表左滑动】"></a>拖拽 【列表左滑动】</h1><center><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/leftDrag.gif" alt=""></center><h1 id="二维数组实现单选多选模块"><a href="#二维数组实现单选多选模块" class="headerlink" title="二维数组实现单选多选模块"></a>二维数组实现单选多选模块</h1><center><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/multArray.gif" alt=""></center><h1 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h1><center><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/map.gif" alt=""></center><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/27/WxSAUnitTest/">http://blog.thephenix.com/2018/05/27/WxSAUnitTest/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅谈前端为适应不同终端的布局技巧</title>
      <link href="/2018/05/26/LayoutSkill/"/>
      <url>/2018/05/26/LayoutSkill/</url>
      <content type="html"><![CDATA[<blockquote><p>今天关于前端布局做一个小总结，大概分为4部分，如果以后再有新想法则后补。</p></blockquote><h1 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h1><p>响应式布局已经是老生常谈了。为了让我们的网站在跨终端后能有着很好的前端表现，响应式可谓是功不可没。推介一篇博文<a href="http://www.jiawin.com/response-type-layout-design" target="_blank" rel="noopener">《响应式那些小事》</a>。</p><blockquote><p>下面是我抽取bootstrap中响应式布局代码思想写的一个小例子</p></blockquote><p><a href="../../../../html/MediaQuery.html">demo 传送门</a></p><blockquote><p>code</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="comment">/*固定布局*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container-fluid</span> &#123;</span><br><span class="line">    <span class="comment">/*流式布局*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*响应式*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container-fluid</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*小于930px*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">930px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-7</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-7</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-8</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-8</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-9</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-9</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-10</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-10</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-11</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-11</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-12</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-s-12</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*介于930px到1024px之间*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">930px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-7</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-7</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-8</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-8</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-9</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-9</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-10</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-10</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-11</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-11</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-12</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-m-12</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*大于1024px*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1240px</span>) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">1240px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-1</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">8.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-2</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">16.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-3</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-4</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-5</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">41.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-6</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-7</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-7</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">58.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-8</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-8</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">66.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-9</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-9</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">75%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-10</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-10</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">83.33333333%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-11</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-11</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">91.66666667%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-12</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.container-fluid</span> &gt; <span class="selector-class">.row</span> &gt; <span class="selector-class">.cls-l-12</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>响应式可以非常灵活的应用，但也要注意其不常用设备信息的兼容问题。</p><h1 id="自适应设计"><a href="#自适应设计" class="headerlink" title="自适应设计"></a>自适应设计</h1><p>说到自适应设计（AWD：Adaptive Design ）就不得不将它与响应式设计（RWD：Ethan Marcote）进行一番对比。</p><h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><p>RWD ：通过Media Query对一整套前端页面在不同端所需表现进行控制。<br>AWD：针对于不同终端制定不同的前端页面，服务器会根据浏览器访问网站时所带终端信息进行判断并返回相应页面。</p><h2 id="优势比较："><a href="#优势比较：" class="headerlink" title="优势比较："></a>优势比较：</h2><h3 id="优势："><a href="#优势：" class="headerlink" title="优势："></a>优势：</h3><p>AWD可以针对于不同终端深度自定义网页及交互;<br>RWD将一套html+css代码适应与多终端;</p><h3 id="劣势："><a href="#劣势：" class="headerlink" title="劣势："></a>劣势：</h3><p>AWD需开发多套html+css，并且需要大体统计客户所使用的终端情况，以便更有针对性;<br>RWD中css代码冗余太多，会造成加载负担;</p><h2 id="有图有真相："><a href="#有图有真相：" class="headerlink" title="有图有真相："></a>有图有真相：</h2><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/21b19020b573ccdc38c13227f50f33b1_r.png" alt=""></p><p>至于网站需要选择哪种布局设计需要看个人公司工期安排。</p><h1 id="栅格化布局（display）"><a href="#栅格化布局（display）" class="headerlink" title="栅格化布局（display）"></a>栅格化布局（display）</h1><p>先说一个场景很多时候我们想做一个元素不定的横向导航，希望nav标签内的元素动态平分父元素的width，不用js脚本的话我们就可以尝试接下来的方法。</p><h2 id="display-table"><a href="#display-table" class="headerlink" title="display table"></a>display table</h2><blockquote><p>将元素扮演为表格，此方法与table标签有异曲同工之妙，不同的是在语义化方面无法表现出像table一样的数据包装。IE8之后无需担心兼容性问题。</p></blockquote><p>table<br>使该元素按table样式渲染<br>table-row<br>使该元素按tr样式渲染<br>table-cell<br>使该元素按td样式渲染<br>table-row-group<br>使该元素按tbody样式渲染<br>table-header-group<br>使该元素按thead样式渲染<br>table-footer-group<br>使该元素按tfoot样式渲染<br>table-caption<br>使该元素按caption样式渲染<br>table-column<br>使该元素按col样式渲染<br>table-column-group<br>使该元素按colgroup样式渲染</p><p>Demo Code<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#main</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: table;</span></span><br><span class="line"><span class="undefined">    border-collapse: collapse;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-id">#main</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="undefined">    display: table-cell;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span><span class="selector-pseudo">:5px</span> <span class="selector-tag">solid</span> <span class="selector-id">#e47f17</span>;</span></span><br><span class="line"><span class="undefined">    text-indent: 2em;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>? navigation column content…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>? news headlines column content…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>? main article content…<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="column-布局"><a href="#column-布局" class="headerlink" title="column 布局"></a>column 布局</h2><p>CSS3中提出多列布局(multi-column)，补充了传统HTML网页中块状布局模式。非常适合宽屏终端排版。<br>Demo Code：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.columsBox</span> &#123;</span></span><br><span class="line"><span class="undefined">    -moz-column-count: 3;</span></span><br><span class="line"><span class="undefined">    -webkit-column-count: 3;</span></span><br><span class="line"><span class="undefined">    column-count: 3;</span></span><br><span class="line"><span class="undefined">    -moz-column-gap: 40px;</span></span><br><span class="line"><span class="undefined">    -webkit-column-gap: 40px;</span></span><br><span class="line"><span class="undefined">    column-gap: 40px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-moz-column-rule</span>: 4<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f9ae27</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-column-rule</span>: 4<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f9ae27</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">column-rule</span>: 4<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#f9ae27</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columsBox"</span>&gt;</span></span><br><span class="line">    Internet Explorer 不支持 column-count 属性。column-count和column-gap可以简写为columns:column-count column-gap。巧妙的运用column能够完成web开发中的很多场景，如要求不高的瀑布流，杂志图文排版等等。</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="flexbox-弹性布局"><a href="#flexbox-弹性布局" class="headerlink" title="flexbox (弹性布局)"></a>flexbox (弹性布局)</h2><p>请移步<a href="//blog.thephenix.cn/2018/05/26/FlexLayout">《FLEXBOX(弹性布局)》</a>。</p><h1 id="布局中特殊单位的灵活应用"><a href="#布局中特殊单位的灵活应用" class="headerlink" title="布局中特殊单位的灵活应用"></a>布局中特殊单位的灵活应用</h1><p>请移步<a href="//blog.thephenix.cn/2018/05/26/LayoutUnit">《布局中长度单位的灵活应用》</a>。</p><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/26/LayoutSkill/">http://blog.thephenix.com/2018/05/26/LayoutSkill/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>布局中长度单位的灵活应用</title>
      <link href="/2018/05/26/LayoutUnit/"/>
      <url>/2018/05/26/LayoutUnit/</url>
      <content type="html"><![CDATA[<p>如果说把RWD和AWD比作网页布局树干的话，那这些单位便是枝叶了，只有很好的结合应用，才能将页面灵活起来。</p><h1 id="先列举一下css中的长度单位"><a href="#先列举一下css中的长度单位" class="headerlink" title="先列举一下css中的长度单位:"></a>先列举一下css中的长度单位:</h1><table><thead><tr><th>长度单位</th><th>版本</th><th>描述 </th></tr></thead><tbody><tr><td>文本相对长度单位 Font-relative Length Units</td><td></td><td></td></tr><tr><td>em</td><td>CSS1</td><td>相对于当前对象内文本的字体尺寸</td></tr><tr><td>ex</td><td>CSS1</td><td>相对于字符“x”的高度。通常为字体高度的一半</td></tr><tr><td>ch</td><td>CSS3</td><td>数字“0”的宽度</td></tr><tr><td>rem</td><td>CSS3</td><td>相对于根元素(l元素)font-size计算值的倍数</td></tr><tr><td>视口相对长度单位 Viewport-relative Length Units</td><td></td><td></td></tr><tr><td>vw</td><td>CSS3</td><td>相对于视口的宽度。视口被均分为100单位的vw</td></tr><tr><td>vh</td><td>CSS3</td><td>相对于视口的高度。视口被均分为100单位的vh</td></tr><tr><td>vmax</td><td>CSS3</td><td>相对于视口的宽度或高度，总是相对于大的那个。视口的宽度或高度被均分为100单位的vmax</td></tr><tr><td>vmin</td><td>CSS3</td><td>相对于视口的宽度或高度，总是相对于小的那个。视口的宽度或高度被均分为100单位的vmin</td></tr><tr><td>绝对长度单位 Absolute Length Units</td><td></td><td></td></tr><tr><td>cm</td><td>CSS1</td><td>厘米</td></tr><tr><td>mm</td><td>CSS1</td><td>毫米</td></tr><tr><td>q</td><td>CSS3</td><td>1/4毫米（quarter-millimeters）; 1q = 0.25mm</td></tr><tr><td>in</td><td>CSS1</td><td>英寸（inches）; 1in = 2.54cm</td></tr><tr><td>pt</td><td>CSS1</td><td>点（points）; 1pt = 1/72in</td></tr><tr><td>pc</td><td>CSS1</td><td>派卡（picas）; 1pc = 12pt</td></tr><tr><td>px</td><td>CSS1</td><td>像素（pixels）; 1px = 1/96in</td></tr></tbody></table><h1 id="这里重点会说到px，-，em，rem，vh，vw等在布局中的应用场景"><a href="#这里重点会说到px，-，em，rem，vh，vw等在布局中的应用场景" class="headerlink" title="这里重点会说到px，%，em，rem，vh，vw等在布局中的应用场景"></a>这里重点会说到px，%，em，rem，vh，vw等在布局中的应用场景</h1><h1 id="PX："><a href="#PX：" class="headerlink" title="PX："></a>PX：</h1><p>在web开发中对绝对长度单位的应用一般都是PX，px其实为css的逻辑像素，针对移动端开发的同学还需要注意逻辑像素和物理像素在开发中的区别和开发受到的影响。</p><h1 id="："><a href="#：" class="headerlink" title="%："></a>%：</h1><p>严格意义上讲%也能算作相对长度单位，相信大部分前端同学都会喜欢%来控制页面元素占位，%继承于父辈元素，可用于很多css属性，如：字体（font），尺寸（dimension），外补白（margin），内补白（padding），定位（position），变换tronsform等。前文响应式分类中的DEMO就用到了%，可回顾。</p><h1 id="EM-REM"><a href="#EM-REM" class="headerlink" title="EM REM:"></a>EM REM:</h1><p>em，rem这两个单位需要放在一起比较，em是当前dom对象的字体尺寸，rem是根元素字体尺寸即root em；</p><p>往往响应式设计都会配合百分比，em和rem来用的实现页面跨端适应。</p><p>这里写个demo，用来描述em和rem的应用场景；<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">@media only screen and (max-width: 320px) &#123;</span></span><br><span class="line"><span class="undefined">html&#123;</span></span><br><span class="line"><span class="undefined">font-size: 64%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@media only screen and (min-width: 320px) and (max-width: 375px)&#123;</span></span><br><span class="line"><span class="undefined">html&#123;</span></span><br><span class="line"><span class="undefined">font-size: 76%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@media only screen and (min-width: 375px) and (max-width: 414px)&#123;</span></span><br><span class="line"><span class="undefined">html&#123;</span></span><br><span class="line"><span class="undefined">font-size: 84%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@media only screen and (min-width: 414px) and (max-width: 768px)&#123;</span></span><br><span class="line"><span class="undefined">html&#123;</span></span><br><span class="line"><span class="undefined">font-size: 92%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@media only screen and (min-width: 768px) and (max-width: 1024px)&#123;</span></span><br><span class="line"><span class="undefined">html&#123;</span></span><br><span class="line"><span class="undefined">font-size: 100%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">@media only screen and (min-width: 1024px)&#123;</span></span><br><span class="line"><span class="undefined">html&#123;</span></span><br><span class="line"><span class="undefined">font-size: 108%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.bigBox&#123;</span></span><br><span class="line"><span class="undefined">font-size: 3rem;</span></span><br><span class="line"><span class="undefined">border: 1px solid #ccc;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.bigFont&#123;</span></span><br><span class="line"><span class="undefined">font-size: 1em;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.middleFont&#123;</span></span><br><span class="line"><span class="undefined">font-size: 0.75em;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">.smallFont&#123;</span></span><br><span class="line"><span class="undefined">font-size: 0.5em;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">下面框内元素用到的是em，三行的字体比例是固定的。与root的font-size是rem单位</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bigBox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bigFont"</span>&gt;</span></span><br><span class="line">bigFont</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"middleFont"</span>&gt;</span></span><br><span class="line">middleFont</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"smallFont"</span>&gt;</span></span><br><span class="line">smallFont</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="VW-VH"><a href="#VW-VH" class="headerlink" title="VW VH:"></a>VW VH:</h1><p>这两个单位是针对视窗而定的相对单位，相比较em，rem，%来说更加的直观粗暴，而且我们知道在线性布局中，我们一般不会给html和body固定的高度这样的话想要让元素具有height上的百分比就实现不了了（当然js参与除外），这时vh就能完美解决。<br>复制如下code，放在新建的html文件中测试：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 80vh; border: 1px solid #333333;margin-top: 10vh;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>就可以实现垂直居中。</p><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/26/LayoutUnit/">http://blog.thephenix.com/2018/05/26/LayoutUnit/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FLEXBOX(弹性布局)</title>
      <link href="/2018/05/26/FlexLayout/"/>
      <url>/2018/05/26/FlexLayout/</url>
      <content type="html"><![CDATA[<h1 id="flex的概念"><a href="#flex的概念" class="headerlink" title="flex的概念"></a>flex的概念</h1><p>flex是一种可伸缩的布局方式，由css3提供，主要分为两层结构（可重复嵌套），伸缩容器（flex container）和伸缩项目（felx item），为包含关系。可以轻松解决一些复杂的css布局，如自动分割，垂直居中等。在考虑大规模应用此项技术之前可以进行<a href="https://caniuse.com/" target="_blank" rel="noopener">兼容性查阅</a>，视情况而定。</p><h1 id="flex特性"><a href="#flex特性" class="headerlink" title="flex特性"></a>flex特性</h1><p>通过display:flex;便可以定义一组flex模型了；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">display: -moz-box; /* Firefox */</span><br><span class="line">display: -ms-flexbox; /* IE10 */</span><br><span class="line">display: -webkit-box; /* Safari */</span><br><span class="line">display: -webkit-flex; /* Chrome, WebKit */</span><br><span class="line">display: box;</span><br><span class="line">display: flexbox;</span><br><span class="line">display: flex;</span><br></pre></td></tr></table></figure></p><p>设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p><h4 id="相比较传统web布局而言，flex布局有很多优点："><a href="#相比较传统web布局而言，flex布局有很多优点：" class="headerlink" title="相比较传统web布局而言，flex布局有很多优点："></a>相比较传统web布局而言，flex布局有很多优点：</h4><p>传统布局是自上而下的线性布局，对于内联元素是从左到右排版，那么flex则是根据flex-flow流布局。</p><h1 id="flex图解"><a href="#flex图解" class="headerlink" title="flex图解"></a>flex图解</h1><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/flexModel.jpg" alt="flex盒子模型图"></p><center>flex盒子模型图</center><p><img src="https://raw.githubusercontent.com/xueyibokong/BlogImages/master/res/flexbox.jpg" alt="flex属性图"></p><center>flex属性图</center><h1 id="flex属性工具"><a href="#flex属性工具" class="headerlink" title="flex属性工具"></a>flex属性工具</h1><p>你可以通过这个<a href="../../../../html/Flexbox.html">demo</a>或者<a href="https://codepen.io/xueyibokong/pen/Nzryre" target="_blank" rel="noopener">codepan demo</a>来测试flexbox的每一个属性从而更加方便的记忆理解。</p><p>另外，可以试试这个<a href="http://flexboxfroggy.com/#zh-cn" target="_blank" rel="noopener">FlexboxFroggy</a>。</p><p>请用支持vh,vw的浏览器调试，在测试属性时候请结合着调节浏览器窗口size。</p><p>参考：<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">https://css-tricks.com/snippets/css/a-guide-to-flexbox/</a></p><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/26/FlexLayout/">http://blog.thephenix.com/2018/05/26/FlexLayout/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NginxCof</title>
      <link href="/2018/05/26/NginxCof/"/>
      <url>/2018/05/26/NginxCof/</url>
      <content type="html"><![CDATA[<h1 id="NGINX基础配置以及配合TLS实现多站点和https、wss"><a href="#NGINX基础配置以及配合TLS实现多站点和https、wss" class="headerlink" title="NGINX基础配置以及配合TLS实现多站点和https、wss"></a>NGINX基础配置以及配合TLS实现多站点和https、wss</h1><p>见 <a href="https://zhuanlan.zhihu.com/p/35887211" target="_blank" rel="noopener">NGINX基础配置以及配合TLS实现多站点和https、wss</a></p><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/26/NginxCof/">http://blog.thephenix.com/2018/05/26/NginxCof/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git Api</title>
      <link href="/2018/05/26/GitApi/"/>
      <url>/2018/05/26/GitApi/</url>
      <content type="html"><![CDATA[<h1 id="API"><a href="#API" class="headerlink" title="API"></a><a href="../../../../html/GitAPI.html">API</a></h1><h2 id="推荐这个教程-ProGit"><a href="#推荐这个教程-ProGit" class="headerlink" title="推荐这个教程 ProGit"></a>推荐这个教程 <a href="https://git.oschina.net/progit/" target="_blank" rel="noopener">ProGit</a></h2><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/26/GitApi/">http://blog.thephenix.com/2018/05/26/GitApi/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github Pages + hexo 建博客</title>
      <link href="/2018/05/25/HexoAndGithubPages/"/>
      <url>/2018/05/25/HexoAndGithubPages/</url>
      <content type="html"><![CDATA[<h1 id="GitHub-Pages-Hexo-To-My-Blog"><a href="#GitHub-Pages-Hexo-To-My-Blog" class="headerlink" title="GitHub Pages + Hexo To My Blog"></a>GitHub Pages + Hexo To My Blog</h1><h2 id="xueyibokong-github-io"><a href="#xueyibokong-github-io" class="headerlink" title="xueyibokong.github.io"></a>xueyibokong.github.io</h2><p>我自己的github仓库</p><h2 id="Hexo-Hexo-文档"><a href="#Hexo-Hexo-文档" class="headerlink" title="Hexo Hexo 文档"></a>Hexo <a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">Hexo 文档</a></h2><p>blog建站工具<br>通过配置 <code>_config.yml</code> 的 <code>Deployment</code> 来关联 <code>xueyibokong.github.io</code></p><h2 id="目录分析"><a href="#目录分析" class="headerlink" title="目录分析"></a>目录分析</h2><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a><code>_config.yml</code></h4><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。这个文件下面会做较为详细的介绍。</p><h4 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h4><p>scaffolds是“脚手架”的意思，当你新建一篇文章（hexo new ‘title’）的时候，hexo是根据这个目录下的文件进行构建的。基本不用关心。</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>这个目录很重要，新建的文章都是在保存在这个目录下的._posts 。需要新建的博文都放在 _posts 目录下。<br>_posts 目录下是一个个 markdown 文件。你应该可以看到一个 hello-world.md 的文件，文章就在这个文件中编辑。<br>_posts 目录下的md文件，会被编译成html文件，放到 public 文件夹下。</p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>网站主题目录，hexo有非常好的主题拓展，支持的主题也很丰富。该目录下，每一个子目录就是一个主题。</p><h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><h2 id="文章多点发布-amp-同步"><a href="#文章多点发布-amp-同步" class="headerlink" title="文章多点发布 &amp; 同步"></a>文章多点发布 &amp; 同步</h2><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><h4 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h4><p>文章默认创建在source/_post目录下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &quot;My New Post&quot;</span><br></pre></td></tr></table></figure></p><p>创建文章的<code>.md</code>文件会在头部生成文章基本信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test hexo</span><br><span class="line">date: 2018-05-25 10:30:12</span><br><span class="line">tags: </span><br><span class="line">- q</span><br><span class="line">- w</span><br><span class="line">type:</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><blockquote><p><code>title</code> 文章标题<br><code>date</code>  时间<br><code>tags</code>  文章标签<br><code>type</code>  文章类型</p></blockquote><h4 id="Run-server-查看效果"><a href="#Run-server-查看效果" class="headerlink" title="Run server [查看效果]"></a>Run server [查看效果]</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">or</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h4 id="构建静态文件"><a href="#构建静态文件" class="headerlink" title="构建静态文件"></a>构建静态文件</h4><p>初始化静态文件，也就是将source/_post目录下<code>.md</code>的文章构建到public目录下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate </span><br><span class="line">or</span><br><span class="line">$ hexo g</span><br><span class="line">or </span><br><span class="line">$ hexo server -p 端口号</span><br></pre></td></tr></table></figure></p><h4 id="推送到-username-github-io"><a href="#推送到-username-github-io" class="headerlink" title="推送到 username.github.io"></a>推送到 username.github.io</h4><p>将public目录下的静态web推送到<code>username.github.io</code>仓库下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><h3 id="换点发布"><a href="#换点发布" class="headerlink" title="换点发布"></a>换点发布</h3><h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>换一台电脑发布文章。</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>1、将hexo项目保存到 username.github.io项目的hexo分支上。<br>2、将hexo分支设为default分支，便于clone和提交。</p><h2 id="主题应用"><a href="#主题应用" class="headerlink" title="主题应用"></a>主题应用</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置有主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。</p><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [主题仓库地址] themes/[主题名]</span><br></pre></td></tr></table></figure><h3 id="启动主题"><a href="#启动主题" class="headerlink" title="启动主题"></a>启动主题</h3><p>修改根目录下的<code>_config.yml</code>的<code>theme</code>配置项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme : [主题名]</span><br></pre></td></tr></table></figure></p><h3 id="本地验证"><a href="#本地验证" class="headerlink" title="本地验证"></a>本地验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="推送到线上生效"><a href="#推送到线上生效" class="headerlink" title="推送到线上生效"></a>推送到线上生效</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>原文=&gt; <a href="http://blog.thephenix.com/2018/05/25/HexoAndGithubPages/">http://blog.thephenix.com/2018/05/25/HexoAndGithubPages/</a> 【请尊重版权】</p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Github Pages </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端面试题</title>
      <link href="/2018/05/25/FEPunktyWiedzy/"/>
      <url>/2018/05/25/FEPunktyWiedzy/</url>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端知识点 </tag>
            
            <tag> 整理 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
